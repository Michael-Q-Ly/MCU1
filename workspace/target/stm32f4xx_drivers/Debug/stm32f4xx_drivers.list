
stm32f4xx_drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000dc0  080001ac  080001ac  000101ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000f6c  08000f74  00010f74  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000f6c  08000f6c  00010f74  2**0
                  CONTENTS
  4 .ARM          00000000  08000f6c  08000f6c  00010f74  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000f6c  08000f74  00010f74  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000f6c  08000f6c  00010f6c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000f70  08000f70  00010f70  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010f74  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00010f74  2**0
                  CONTENTS
 10 .bss          0000001c  20000000  20000000  00020000  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000001c  2000001c  00020000  2**0
                  ALLOC
 12 .ARM.attributes 0000002a  00000000  00000000  00010f74  2**0
                  CONTENTS, READONLY
 13 .debug_info   000013aa  00000000  00000000  00010f9e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000049a  00000000  00000000  00012348  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000158  00000000  00000000  000127e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000138  00000000  00000000  00012940  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00002332  00000000  00000000  00012a78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000016f8  00000000  00000000  00014daa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0000a134  00000000  00000000  000164a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  000205d6  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000004e4  00000000  00000000  00020628  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	; (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	20000000 	.word	0x20000000
 80001c8:	00000000 	.word	0x00000000
 80001cc:	08000f54 	.word	0x08000f54

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	; (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	; (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	; (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	20000004 	.word	0x20000004
 80001e8:	08000f54 	.word	0x08000f54

080001ec <GPIO_PeriClockControl>:
 * 
 * @return              none
 * 
 * @note                none
 */
void GPIO_PeriClockControl(GPIO_RegDef_t *pGPIOx, uint8_t EnorDi) {
 80001ec:	b480      	push	{r7}
 80001ee:	b083      	sub	sp, #12
 80001f0:	af00      	add	r7, sp, #0
 80001f2:	6078      	str	r0, [r7, #4]
 80001f4:	460b      	mov	r3, r1
 80001f6:	70fb      	strb	r3, [r7, #3]
    // If enabled,
    if (EnorDi == ENABLE) {
 80001f8:	78fb      	ldrb	r3, [r7, #3]
 80001fa:	2b01      	cmp	r3, #1
 80001fc:	f040 8095 	bne.w	800032a <GPIO_PeriClockControl+0x13e>
        // Check which GPIO and enable
        switch ((unsigned long int) pGPIOx) {
 8000200:	687b      	ldr	r3, [r7, #4]
 8000202:	4a8f      	ldr	r2, [pc, #572]	; (8000440 <GPIO_PeriClockControl+0x254>)
 8000204:	4293      	cmp	r3, r2
 8000206:	f000 8089 	beq.w	800031c <GPIO_PeriClockControl+0x130>
 800020a:	4a8d      	ldr	r2, [pc, #564]	; (8000440 <GPIO_PeriClockControl+0x254>)
 800020c:	4293      	cmp	r3, r2
 800020e:	f200 8136 	bhi.w	800047e <GPIO_PeriClockControl+0x292>
 8000212:	4a8c      	ldr	r2, [pc, #560]	; (8000444 <GPIO_PeriClockControl+0x258>)
 8000214:	4293      	cmp	r3, r2
 8000216:	d07a      	beq.n	800030e <GPIO_PeriClockControl+0x122>
 8000218:	4a8a      	ldr	r2, [pc, #552]	; (8000444 <GPIO_PeriClockControl+0x258>)
 800021a:	4293      	cmp	r3, r2
 800021c:	f200 812f 	bhi.w	800047e <GPIO_PeriClockControl+0x292>
 8000220:	4a89      	ldr	r2, [pc, #548]	; (8000448 <GPIO_PeriClockControl+0x25c>)
 8000222:	4293      	cmp	r3, r2
 8000224:	d06c      	beq.n	8000300 <GPIO_PeriClockControl+0x114>
 8000226:	4a88      	ldr	r2, [pc, #544]	; (8000448 <GPIO_PeriClockControl+0x25c>)
 8000228:	4293      	cmp	r3, r2
 800022a:	f200 8128 	bhi.w	800047e <GPIO_PeriClockControl+0x292>
 800022e:	4a87      	ldr	r2, [pc, #540]	; (800044c <GPIO_PeriClockControl+0x260>)
 8000230:	4293      	cmp	r3, r2
 8000232:	d05e      	beq.n	80002f2 <GPIO_PeriClockControl+0x106>
 8000234:	4a85      	ldr	r2, [pc, #532]	; (800044c <GPIO_PeriClockControl+0x260>)
 8000236:	4293      	cmp	r3, r2
 8000238:	f200 8121 	bhi.w	800047e <GPIO_PeriClockControl+0x292>
 800023c:	4a84      	ldr	r2, [pc, #528]	; (8000450 <GPIO_PeriClockControl+0x264>)
 800023e:	4293      	cmp	r3, r2
 8000240:	d050      	beq.n	80002e4 <GPIO_PeriClockControl+0xf8>
 8000242:	4a83      	ldr	r2, [pc, #524]	; (8000450 <GPIO_PeriClockControl+0x264>)
 8000244:	4293      	cmp	r3, r2
 8000246:	f200 811a 	bhi.w	800047e <GPIO_PeriClockControl+0x292>
 800024a:	4a82      	ldr	r2, [pc, #520]	; (8000454 <GPIO_PeriClockControl+0x268>)
 800024c:	4293      	cmp	r3, r2
 800024e:	d042      	beq.n	80002d6 <GPIO_PeriClockControl+0xea>
 8000250:	4a80      	ldr	r2, [pc, #512]	; (8000454 <GPIO_PeriClockControl+0x268>)
 8000252:	4293      	cmp	r3, r2
 8000254:	f200 8113 	bhi.w	800047e <GPIO_PeriClockControl+0x292>
 8000258:	4a7f      	ldr	r2, [pc, #508]	; (8000458 <GPIO_PeriClockControl+0x26c>)
 800025a:	4293      	cmp	r3, r2
 800025c:	d034      	beq.n	80002c8 <GPIO_PeriClockControl+0xdc>
 800025e:	4a7e      	ldr	r2, [pc, #504]	; (8000458 <GPIO_PeriClockControl+0x26c>)
 8000260:	4293      	cmp	r3, r2
 8000262:	f200 810c 	bhi.w	800047e <GPIO_PeriClockControl+0x292>
 8000266:	4a7d      	ldr	r2, [pc, #500]	; (800045c <GPIO_PeriClockControl+0x270>)
 8000268:	4293      	cmp	r3, r2
 800026a:	d026      	beq.n	80002ba <GPIO_PeriClockControl+0xce>
 800026c:	4a7b      	ldr	r2, [pc, #492]	; (800045c <GPIO_PeriClockControl+0x270>)
 800026e:	4293      	cmp	r3, r2
 8000270:	f200 8105 	bhi.w	800047e <GPIO_PeriClockControl+0x292>
 8000274:	4a7a      	ldr	r2, [pc, #488]	; (8000460 <GPIO_PeriClockControl+0x274>)
 8000276:	4293      	cmp	r3, r2
 8000278:	d018      	beq.n	80002ac <GPIO_PeriClockControl+0xc0>
 800027a:	4a79      	ldr	r2, [pc, #484]	; (8000460 <GPIO_PeriClockControl+0x274>)
 800027c:	4293      	cmp	r3, r2
 800027e:	f200 80fe 	bhi.w	800047e <GPIO_PeriClockControl+0x292>
 8000282:	4a78      	ldr	r2, [pc, #480]	; (8000464 <GPIO_PeriClockControl+0x278>)
 8000284:	4293      	cmp	r3, r2
 8000286:	d003      	beq.n	8000290 <GPIO_PeriClockControl+0xa4>
 8000288:	4a77      	ldr	r2, [pc, #476]	; (8000468 <GPIO_PeriClockControl+0x27c>)
 800028a:	4293      	cmp	r3, r2
 800028c:	d007      	beq.n	800029e <GPIO_PeriClockControl+0xb2>
                case GPIOG_BASE_ADDR:       GPIOG_PCLK_EN() ;       break ;
                case GPIOH_BASE_ADDR:       GPIOH_PCLK_EN() ;       break ;
                case GPIOI_BASE_ADDR:       GPIOI_PCLK_EN() ;       break ;
                case GPIOJ_BASE_ADDR:       GPIOJ_PCLK_EN() ;       break ;
                case GPIOK_BASE_ADDR:       GPIOK_PCLK_EN() ;       break ;
                default:                    return ;                break ;         // TODO: return error or cause a user fault
 800028e:	e0f6      	b.n	800047e <GPIO_PeriClockControl+0x292>
                case GPIOA_BASE_ADDR:       GPIOA_PCLK_EN() ;       break ;
 8000290:	4b76      	ldr	r3, [pc, #472]	; (800046c <GPIO_PeriClockControl+0x280>)
 8000292:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000294:	4a75      	ldr	r2, [pc, #468]	; (800046c <GPIO_PeriClockControl+0x280>)
 8000296:	f043 0301 	orr.w	r3, r3, #1
 800029a:	6313      	str	r3, [r2, #48]	; 0x30
 800029c:	e0f2      	b.n	8000484 <GPIO_PeriClockControl+0x298>
                case GPIOB_BASE_ADDR:       GPIOB_PCLK_EN() ;       break ;
 800029e:	4b73      	ldr	r3, [pc, #460]	; (800046c <GPIO_PeriClockControl+0x280>)
 80002a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80002a2:	4a72      	ldr	r2, [pc, #456]	; (800046c <GPIO_PeriClockControl+0x280>)
 80002a4:	f043 0302 	orr.w	r3, r3, #2
 80002a8:	6313      	str	r3, [r2, #48]	; 0x30
 80002aa:	e0eb      	b.n	8000484 <GPIO_PeriClockControl+0x298>
                case GPIOC_BASE_ADDR:       GPIOC_PCLK_EN() ;       break ;
 80002ac:	4b6f      	ldr	r3, [pc, #444]	; (800046c <GPIO_PeriClockControl+0x280>)
 80002ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80002b0:	4a6e      	ldr	r2, [pc, #440]	; (800046c <GPIO_PeriClockControl+0x280>)
 80002b2:	f043 0304 	orr.w	r3, r3, #4
 80002b6:	6313      	str	r3, [r2, #48]	; 0x30
 80002b8:	e0e4      	b.n	8000484 <GPIO_PeriClockControl+0x298>
                case GPIOD_BASE_ADDR:       GPIOD_PCLK_EN() ;       break ;
 80002ba:	4b6c      	ldr	r3, [pc, #432]	; (800046c <GPIO_PeriClockControl+0x280>)
 80002bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80002be:	4a6b      	ldr	r2, [pc, #428]	; (800046c <GPIO_PeriClockControl+0x280>)
 80002c0:	f043 0308 	orr.w	r3, r3, #8
 80002c4:	6313      	str	r3, [r2, #48]	; 0x30
 80002c6:	e0dd      	b.n	8000484 <GPIO_PeriClockControl+0x298>
                case GPIOE_BASE_ADDR:       GPIOE_PCLK_EN() ;       break ;
 80002c8:	4b68      	ldr	r3, [pc, #416]	; (800046c <GPIO_PeriClockControl+0x280>)
 80002ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80002cc:	4a67      	ldr	r2, [pc, #412]	; (800046c <GPIO_PeriClockControl+0x280>)
 80002ce:	f043 0310 	orr.w	r3, r3, #16
 80002d2:	6313      	str	r3, [r2, #48]	; 0x30
 80002d4:	e0d6      	b.n	8000484 <GPIO_PeriClockControl+0x298>
                case GPIOF_BASE_ADDR:       GPIOF_PCLK_EN() ;       break ;
 80002d6:	4b65      	ldr	r3, [pc, #404]	; (800046c <GPIO_PeriClockControl+0x280>)
 80002d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80002da:	4a64      	ldr	r2, [pc, #400]	; (800046c <GPIO_PeriClockControl+0x280>)
 80002dc:	f043 0320 	orr.w	r3, r3, #32
 80002e0:	6313      	str	r3, [r2, #48]	; 0x30
 80002e2:	e0cf      	b.n	8000484 <GPIO_PeriClockControl+0x298>
                case GPIOG_BASE_ADDR:       GPIOG_PCLK_EN() ;       break ;
 80002e4:	4b61      	ldr	r3, [pc, #388]	; (800046c <GPIO_PeriClockControl+0x280>)
 80002e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80002e8:	4a60      	ldr	r2, [pc, #384]	; (800046c <GPIO_PeriClockControl+0x280>)
 80002ea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80002ee:	6313      	str	r3, [r2, #48]	; 0x30
 80002f0:	e0c8      	b.n	8000484 <GPIO_PeriClockControl+0x298>
                case GPIOH_BASE_ADDR:       GPIOH_PCLK_EN() ;       break ;
 80002f2:	4b5e      	ldr	r3, [pc, #376]	; (800046c <GPIO_PeriClockControl+0x280>)
 80002f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80002f6:	4a5d      	ldr	r2, [pc, #372]	; (800046c <GPIO_PeriClockControl+0x280>)
 80002f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80002fc:	6313      	str	r3, [r2, #48]	; 0x30
 80002fe:	e0c1      	b.n	8000484 <GPIO_PeriClockControl+0x298>
                case GPIOI_BASE_ADDR:       GPIOI_PCLK_EN() ;       break ;
 8000300:	4b5a      	ldr	r3, [pc, #360]	; (800046c <GPIO_PeriClockControl+0x280>)
 8000302:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000304:	4a59      	ldr	r2, [pc, #356]	; (800046c <GPIO_PeriClockControl+0x280>)
 8000306:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800030a:	6313      	str	r3, [r2, #48]	; 0x30
 800030c:	e0ba      	b.n	8000484 <GPIO_PeriClockControl+0x298>
                case GPIOJ_BASE_ADDR:       GPIOJ_PCLK_EN() ;       break ;
 800030e:	4b57      	ldr	r3, [pc, #348]	; (800046c <GPIO_PeriClockControl+0x280>)
 8000310:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000312:	4a56      	ldr	r2, [pc, #344]	; (800046c <GPIO_PeriClockControl+0x280>)
 8000314:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000318:	6313      	str	r3, [r2, #48]	; 0x30
 800031a:	e0b3      	b.n	8000484 <GPIO_PeriClockControl+0x298>
                case GPIOK_BASE_ADDR:       GPIOK_PCLK_EN() ;       break ;
 800031c:	4b53      	ldr	r3, [pc, #332]	; (800046c <GPIO_PeriClockControl+0x280>)
 800031e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000320:	4a52      	ldr	r2, [pc, #328]	; (800046c <GPIO_PeriClockControl+0x280>)
 8000322:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000326:	6313      	str	r3, [r2, #48]	; 0x30
 8000328:	e0ac      	b.n	8000484 <GPIO_PeriClockControl+0x298>
        }
    }
    else {
        // Disable the GPIO otherwise
        switch ((unsigned long int) pGPIOx) {
 800032a:	687b      	ldr	r3, [r7, #4]
 800032c:	4a44      	ldr	r2, [pc, #272]	; (8000440 <GPIO_PeriClockControl+0x254>)
 800032e:	4293      	cmp	r3, r2
 8000330:	f000 809e 	beq.w	8000470 <GPIO_PeriClockControl+0x284>
 8000334:	4a42      	ldr	r2, [pc, #264]	; (8000440 <GPIO_PeriClockControl+0x254>)
 8000336:	4293      	cmp	r3, r2
 8000338:	f200 80a3 	bhi.w	8000482 <GPIO_PeriClockControl+0x296>
 800033c:	4a41      	ldr	r2, [pc, #260]	; (8000444 <GPIO_PeriClockControl+0x258>)
 800033e:	4293      	cmp	r3, r2
 8000340:	d077      	beq.n	8000432 <GPIO_PeriClockControl+0x246>
 8000342:	4a40      	ldr	r2, [pc, #256]	; (8000444 <GPIO_PeriClockControl+0x258>)
 8000344:	4293      	cmp	r3, r2
 8000346:	f200 809c 	bhi.w	8000482 <GPIO_PeriClockControl+0x296>
 800034a:	4a3f      	ldr	r2, [pc, #252]	; (8000448 <GPIO_PeriClockControl+0x25c>)
 800034c:	4293      	cmp	r3, r2
 800034e:	d069      	beq.n	8000424 <GPIO_PeriClockControl+0x238>
 8000350:	4a3d      	ldr	r2, [pc, #244]	; (8000448 <GPIO_PeriClockControl+0x25c>)
 8000352:	4293      	cmp	r3, r2
 8000354:	f200 8095 	bhi.w	8000482 <GPIO_PeriClockControl+0x296>
 8000358:	4a3c      	ldr	r2, [pc, #240]	; (800044c <GPIO_PeriClockControl+0x260>)
 800035a:	4293      	cmp	r3, r2
 800035c:	d05b      	beq.n	8000416 <GPIO_PeriClockControl+0x22a>
 800035e:	4a3b      	ldr	r2, [pc, #236]	; (800044c <GPIO_PeriClockControl+0x260>)
 8000360:	4293      	cmp	r3, r2
 8000362:	f200 808e 	bhi.w	8000482 <GPIO_PeriClockControl+0x296>
 8000366:	4a3a      	ldr	r2, [pc, #232]	; (8000450 <GPIO_PeriClockControl+0x264>)
 8000368:	4293      	cmp	r3, r2
 800036a:	d04d      	beq.n	8000408 <GPIO_PeriClockControl+0x21c>
 800036c:	4a38      	ldr	r2, [pc, #224]	; (8000450 <GPIO_PeriClockControl+0x264>)
 800036e:	4293      	cmp	r3, r2
 8000370:	f200 8087 	bhi.w	8000482 <GPIO_PeriClockControl+0x296>
 8000374:	4a37      	ldr	r2, [pc, #220]	; (8000454 <GPIO_PeriClockControl+0x268>)
 8000376:	4293      	cmp	r3, r2
 8000378:	d03f      	beq.n	80003fa <GPIO_PeriClockControl+0x20e>
 800037a:	4a36      	ldr	r2, [pc, #216]	; (8000454 <GPIO_PeriClockControl+0x268>)
 800037c:	4293      	cmp	r3, r2
 800037e:	f200 8080 	bhi.w	8000482 <GPIO_PeriClockControl+0x296>
 8000382:	4a35      	ldr	r2, [pc, #212]	; (8000458 <GPIO_PeriClockControl+0x26c>)
 8000384:	4293      	cmp	r3, r2
 8000386:	d031      	beq.n	80003ec <GPIO_PeriClockControl+0x200>
 8000388:	4a33      	ldr	r2, [pc, #204]	; (8000458 <GPIO_PeriClockControl+0x26c>)
 800038a:	4293      	cmp	r3, r2
 800038c:	d879      	bhi.n	8000482 <GPIO_PeriClockControl+0x296>
 800038e:	4a33      	ldr	r2, [pc, #204]	; (800045c <GPIO_PeriClockControl+0x270>)
 8000390:	4293      	cmp	r3, r2
 8000392:	d024      	beq.n	80003de <GPIO_PeriClockControl+0x1f2>
 8000394:	4a31      	ldr	r2, [pc, #196]	; (800045c <GPIO_PeriClockControl+0x270>)
 8000396:	4293      	cmp	r3, r2
 8000398:	d873      	bhi.n	8000482 <GPIO_PeriClockControl+0x296>
 800039a:	4a31      	ldr	r2, [pc, #196]	; (8000460 <GPIO_PeriClockControl+0x274>)
 800039c:	4293      	cmp	r3, r2
 800039e:	d017      	beq.n	80003d0 <GPIO_PeriClockControl+0x1e4>
 80003a0:	4a2f      	ldr	r2, [pc, #188]	; (8000460 <GPIO_PeriClockControl+0x274>)
 80003a2:	4293      	cmp	r3, r2
 80003a4:	d86d      	bhi.n	8000482 <GPIO_PeriClockControl+0x296>
 80003a6:	4a2f      	ldr	r2, [pc, #188]	; (8000464 <GPIO_PeriClockControl+0x278>)
 80003a8:	4293      	cmp	r3, r2
 80003aa:	d003      	beq.n	80003b4 <GPIO_PeriClockControl+0x1c8>
 80003ac:	4a2e      	ldr	r2, [pc, #184]	; (8000468 <GPIO_PeriClockControl+0x27c>)
 80003ae:	4293      	cmp	r3, r2
 80003b0:	d007      	beq.n	80003c2 <GPIO_PeriClockControl+0x1d6>
                case GPIOG_BASE_ADDR:       GPIOG_PCLK_DI() ;       break ;
                case GPIOH_BASE_ADDR:       GPIOH_PCLK_DI() ;       break ;
                case GPIOI_BASE_ADDR:       GPIOI_PCLK_DI() ;       break ;
                case GPIOJ_BASE_ADDR:       GPIOJ_PCLK_DI() ;       break ;
                case GPIOK_BASE_ADDR:       GPIOK_PCLK_DI() ;       break ;
                default:                    return ;                break ;         // TODO: return error or cause a user fault
 80003b2:	e066      	b.n	8000482 <GPIO_PeriClockControl+0x296>
                case GPIOA_BASE_ADDR:       GPIOA_PCLK_DI() ;       break ;
 80003b4:	4b2d      	ldr	r3, [pc, #180]	; (800046c <GPIO_PeriClockControl+0x280>)
 80003b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003b8:	4a2c      	ldr	r2, [pc, #176]	; (800046c <GPIO_PeriClockControl+0x280>)
 80003ba:	f023 0301 	bic.w	r3, r3, #1
 80003be:	6313      	str	r3, [r2, #48]	; 0x30
 80003c0:	e060      	b.n	8000484 <GPIO_PeriClockControl+0x298>
                case GPIOB_BASE_ADDR:       GPIOB_PCLK_DI() ;       break ;
 80003c2:	4b2a      	ldr	r3, [pc, #168]	; (800046c <GPIO_PeriClockControl+0x280>)
 80003c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003c6:	4a29      	ldr	r2, [pc, #164]	; (800046c <GPIO_PeriClockControl+0x280>)
 80003c8:	f023 0302 	bic.w	r3, r3, #2
 80003cc:	6313      	str	r3, [r2, #48]	; 0x30
 80003ce:	e059      	b.n	8000484 <GPIO_PeriClockControl+0x298>
                case GPIOC_BASE_ADDR:       GPIOC_PCLK_DI() ;       break ;
 80003d0:	4b26      	ldr	r3, [pc, #152]	; (800046c <GPIO_PeriClockControl+0x280>)
 80003d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003d4:	4a25      	ldr	r2, [pc, #148]	; (800046c <GPIO_PeriClockControl+0x280>)
 80003d6:	f023 0304 	bic.w	r3, r3, #4
 80003da:	6313      	str	r3, [r2, #48]	; 0x30
 80003dc:	e052      	b.n	8000484 <GPIO_PeriClockControl+0x298>
                case GPIOD_BASE_ADDR:       GPIOD_PCLK_DI() ;       break ;
 80003de:	4b23      	ldr	r3, [pc, #140]	; (800046c <GPIO_PeriClockControl+0x280>)
 80003e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003e2:	4a22      	ldr	r2, [pc, #136]	; (800046c <GPIO_PeriClockControl+0x280>)
 80003e4:	f023 0308 	bic.w	r3, r3, #8
 80003e8:	6313      	str	r3, [r2, #48]	; 0x30
 80003ea:	e04b      	b.n	8000484 <GPIO_PeriClockControl+0x298>
                case GPIOE_BASE_ADDR:       GPIOE_PCLK_DI() ;       break ;
 80003ec:	4b1f      	ldr	r3, [pc, #124]	; (800046c <GPIO_PeriClockControl+0x280>)
 80003ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003f0:	4a1e      	ldr	r2, [pc, #120]	; (800046c <GPIO_PeriClockControl+0x280>)
 80003f2:	f023 0310 	bic.w	r3, r3, #16
 80003f6:	6313      	str	r3, [r2, #48]	; 0x30
 80003f8:	e044      	b.n	8000484 <GPIO_PeriClockControl+0x298>
                case GPIOF_BASE_ADDR:       GPIOF_PCLK_DI() ;       break ;
 80003fa:	4b1c      	ldr	r3, [pc, #112]	; (800046c <GPIO_PeriClockControl+0x280>)
 80003fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003fe:	4a1b      	ldr	r2, [pc, #108]	; (800046c <GPIO_PeriClockControl+0x280>)
 8000400:	f023 0320 	bic.w	r3, r3, #32
 8000404:	6313      	str	r3, [r2, #48]	; 0x30
 8000406:	e03d      	b.n	8000484 <GPIO_PeriClockControl+0x298>
                case GPIOG_BASE_ADDR:       GPIOG_PCLK_DI() ;       break ;
 8000408:	4b18      	ldr	r3, [pc, #96]	; (800046c <GPIO_PeriClockControl+0x280>)
 800040a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800040c:	4a17      	ldr	r2, [pc, #92]	; (800046c <GPIO_PeriClockControl+0x280>)
 800040e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000412:	6313      	str	r3, [r2, #48]	; 0x30
 8000414:	e036      	b.n	8000484 <GPIO_PeriClockControl+0x298>
                case GPIOH_BASE_ADDR:       GPIOH_PCLK_DI() ;       break ;
 8000416:	4b15      	ldr	r3, [pc, #84]	; (800046c <GPIO_PeriClockControl+0x280>)
 8000418:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800041a:	4a14      	ldr	r2, [pc, #80]	; (800046c <GPIO_PeriClockControl+0x280>)
 800041c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8000420:	6313      	str	r3, [r2, #48]	; 0x30
 8000422:	e02f      	b.n	8000484 <GPIO_PeriClockControl+0x298>
                case GPIOI_BASE_ADDR:       GPIOI_PCLK_DI() ;       break ;
 8000424:	4b11      	ldr	r3, [pc, #68]	; (800046c <GPIO_PeriClockControl+0x280>)
 8000426:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000428:	4a10      	ldr	r2, [pc, #64]	; (800046c <GPIO_PeriClockControl+0x280>)
 800042a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800042e:	6313      	str	r3, [r2, #48]	; 0x30
 8000430:	e028      	b.n	8000484 <GPIO_PeriClockControl+0x298>
                case GPIOJ_BASE_ADDR:       GPIOJ_PCLK_DI() ;       break ;
 8000432:	4b0e      	ldr	r3, [pc, #56]	; (800046c <GPIO_PeriClockControl+0x280>)
 8000434:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000436:	4a0d      	ldr	r2, [pc, #52]	; (800046c <GPIO_PeriClockControl+0x280>)
 8000438:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800043c:	6313      	str	r3, [r2, #48]	; 0x30
 800043e:	e021      	b.n	8000484 <GPIO_PeriClockControl+0x298>
 8000440:	40022800 	.word	0x40022800
 8000444:	40022400 	.word	0x40022400
 8000448:	40022000 	.word	0x40022000
 800044c:	40021c00 	.word	0x40021c00
 8000450:	40021800 	.word	0x40021800
 8000454:	40021400 	.word	0x40021400
 8000458:	40021000 	.word	0x40021000
 800045c:	40020c00 	.word	0x40020c00
 8000460:	40020800 	.word	0x40020800
 8000464:	40020000 	.word	0x40020000
 8000468:	40020400 	.word	0x40020400
 800046c:	40023800 	.word	0x40023800
                case GPIOK_BASE_ADDR:       GPIOK_PCLK_DI() ;       break ;
 8000470:	4b06      	ldr	r3, [pc, #24]	; (800048c <GPIO_PeriClockControl+0x2a0>)
 8000472:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000474:	4a05      	ldr	r2, [pc, #20]	; (800048c <GPIO_PeriClockControl+0x2a0>)
 8000476:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800047a:	6313      	str	r3, [r2, #48]	; 0x30
 800047c:	e002      	b.n	8000484 <GPIO_PeriClockControl+0x298>
                default:                    return ;                break ;         // TODO: return error or cause a user fault
 800047e:	bf00      	nop
 8000480:	e000      	b.n	8000484 <GPIO_PeriClockControl+0x298>
                default:                    return ;                break ;         // TODO: return error or cause a user fault
 8000482:	bf00      	nop
        }
    }
}
 8000484:	370c      	adds	r7, #12
 8000486:	46bd      	mov	sp, r7
 8000488:	bc80      	pop	{r7}
 800048a:	4770      	bx	lr
 800048c:	40023800 	.word	0x40023800

08000490 <GPIO_Init>:
 *                                          by that amount. This gives us a left shift of 8, landing us
 *                                          on bit 8 of the high reg, which is the lsb of pin 10's four
 *                                          bit fields!
 *                                      
 */
void GPIO_Init(GPIO_Handle_t *pGPIO_Handle) {
 8000490:	b580      	push	{r7, lr}
 8000492:	b086      	sub	sp, #24
 8000494:	af00      	add	r7, sp, #0
 8000496:	6078      	str	r0, [r7, #4]
    // 0. Enable the GPIO peripheral clock
    GPIO_PeriClockControl(pGPIO_Handle->pGPIOx, ENABLE) ;
 8000498:	687b      	ldr	r3, [r7, #4]
 800049a:	681b      	ldr	r3, [r3, #0]
 800049c:	2101      	movs	r1, #1
 800049e:	4618      	mov	r0, r3
 80004a0:	f7ff fea4 	bl	80001ec <GPIO_PeriClockControl>
    
    // 1. Configure the mode of GPIO pin
    uint32_t temp = 0 ;                                                                                             // Temporary register
 80004a4:	2300      	movs	r3, #0
 80004a6:	617b      	str	r3, [r7, #20]
    if (pGPIO_Handle->GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_ANALOG) {
 80004a8:	687b      	ldr	r3, [r7, #4]
 80004aa:	795b      	ldrb	r3, [r3, #5]
 80004ac:	2b03      	cmp	r3, #3
 80004ae:	d820      	bhi.n	80004f2 <GPIO_Init+0x62>
        // The non-interrupt mode
        temp = (pGPIO_Handle->GPIO_PinConfig.GPIO_PinMode << (2 * pGPIO_Handle->GPIO_PinConfig.GPIO_PinNumber)) ;
 80004b0:	687b      	ldr	r3, [r7, #4]
 80004b2:	795b      	ldrb	r3, [r3, #5]
 80004b4:	461a      	mov	r2, r3
 80004b6:	687b      	ldr	r3, [r7, #4]
 80004b8:	791b      	ldrb	r3, [r3, #4]
 80004ba:	005b      	lsls	r3, r3, #1
 80004bc:	fa02 f303 	lsl.w	r3, r2, r3
 80004c0:	617b      	str	r3, [r7, #20]
        pGPIO_Handle->pGPIOx->MODER &= ~(0x3 << 2 * (pGPIO_Handle->GPIO_PinConfig.GPIO_PinNumber)) ;                // Clear 2 bit fields
 80004c2:	687b      	ldr	r3, [r7, #4]
 80004c4:	681b      	ldr	r3, [r3, #0]
 80004c6:	681a      	ldr	r2, [r3, #0]
 80004c8:	687b      	ldr	r3, [r7, #4]
 80004ca:	791b      	ldrb	r3, [r3, #4]
 80004cc:	005b      	lsls	r3, r3, #1
 80004ce:	2103      	movs	r1, #3
 80004d0:	fa01 f303 	lsl.w	r3, r1, r3
 80004d4:	43db      	mvns	r3, r3
 80004d6:	4619      	mov	r1, r3
 80004d8:	687b      	ldr	r3, [r7, #4]
 80004da:	681b      	ldr	r3, [r3, #0]
 80004dc:	400a      	ands	r2, r1
 80004de:	601a      	str	r2, [r3, #0]
        pGPIO_Handle->pGPIOx->MODER |= temp ;                                                                       // Set
 80004e0:	687b      	ldr	r3, [r7, #4]
 80004e2:	681b      	ldr	r3, [r3, #0]
 80004e4:	6819      	ldr	r1, [r3, #0]
 80004e6:	687b      	ldr	r3, [r7, #4]
 80004e8:	681b      	ldr	r3, [r3, #0]
 80004ea:	697a      	ldr	r2, [r7, #20]
 80004ec:	430a      	orrs	r2, r1
 80004ee:	601a      	str	r2, [r3, #0]
 80004f0:	e0f1      	b.n	80006d6 <GPIO_Init+0x246>
    }
    else {
        // Interrupt mode
        uint8_t bitFieldOffset = pGPIO_Handle->GPIO_PinConfig.GPIO_PinNumber ;
 80004f2:	687b      	ldr	r3, [r7, #4]
 80004f4:	791b      	ldrb	r3, [r3, #4]
 80004f6:	74fb      	strb	r3, [r7, #19]
        switch (pGPIO_Handle->GPIO_PinConfig.GPIO_PinMode) {
 80004f8:	687b      	ldr	r3, [r7, #4]
 80004fa:	795b      	ldrb	r3, [r3, #5]
 80004fc:	2b06      	cmp	r3, #6
 80004fe:	d033      	beq.n	8000568 <GPIO_Init+0xd8>
 8000500:	2b06      	cmp	r3, #6
 8000502:	f300 8184 	bgt.w	800080e <GPIO_Init+0x37e>
 8000506:	2b04      	cmp	r3, #4
 8000508:	d002      	beq.n	8000510 <GPIO_Init+0x80>
 800050a:	2b05      	cmp	r3, #5
 800050c:	d016      	beq.n	800053c <GPIO_Init+0xac>
                // 1. Configure the FTSR and RTSR
                EXTI->FTSR |= (1 << bitFieldOffset) ;
                EXTI->RTSR |= (1 << bitFieldOffset) ;
                break ;
            default:
                return ;
 800050e:	e17e      	b.n	800080e <GPIO_Init+0x37e>
                EXTI->FTSR |= (1 << bitFieldOffset) ;
 8000510:	4b4a      	ldr	r3, [pc, #296]	; (800063c <GPIO_Init+0x1ac>)
 8000512:	68db      	ldr	r3, [r3, #12]
 8000514:	7cfa      	ldrb	r2, [r7, #19]
 8000516:	2101      	movs	r1, #1
 8000518:	fa01 f202 	lsl.w	r2, r1, r2
 800051c:	4611      	mov	r1, r2
 800051e:	4a47      	ldr	r2, [pc, #284]	; (800063c <GPIO_Init+0x1ac>)
 8000520:	430b      	orrs	r3, r1
 8000522:	60d3      	str	r3, [r2, #12]
                EXTI->RTSR &= ~(1 << bitFieldOffset) ;
 8000524:	4b45      	ldr	r3, [pc, #276]	; (800063c <GPIO_Init+0x1ac>)
 8000526:	689b      	ldr	r3, [r3, #8]
 8000528:	7cfa      	ldrb	r2, [r7, #19]
 800052a:	2101      	movs	r1, #1
 800052c:	fa01 f202 	lsl.w	r2, r1, r2
 8000530:	43d2      	mvns	r2, r2
 8000532:	4611      	mov	r1, r2
 8000534:	4a41      	ldr	r2, [pc, #260]	; (800063c <GPIO_Init+0x1ac>)
 8000536:	400b      	ands	r3, r1
 8000538:	6093      	str	r3, [r2, #8]
                break ;
 800053a:	e02a      	b.n	8000592 <GPIO_Init+0x102>
                EXTI->RTSR |= (1 << bitFieldOffset) ;
 800053c:	4b3f      	ldr	r3, [pc, #252]	; (800063c <GPIO_Init+0x1ac>)
 800053e:	689b      	ldr	r3, [r3, #8]
 8000540:	7cfa      	ldrb	r2, [r7, #19]
 8000542:	2101      	movs	r1, #1
 8000544:	fa01 f202 	lsl.w	r2, r1, r2
 8000548:	4611      	mov	r1, r2
 800054a:	4a3c      	ldr	r2, [pc, #240]	; (800063c <GPIO_Init+0x1ac>)
 800054c:	430b      	orrs	r3, r1
 800054e:	6093      	str	r3, [r2, #8]
                EXTI->FTSR &= ~(1 << bitFieldOffset) ;
 8000550:	4b3a      	ldr	r3, [pc, #232]	; (800063c <GPIO_Init+0x1ac>)
 8000552:	68db      	ldr	r3, [r3, #12]
 8000554:	7cfa      	ldrb	r2, [r7, #19]
 8000556:	2101      	movs	r1, #1
 8000558:	fa01 f202 	lsl.w	r2, r1, r2
 800055c:	43d2      	mvns	r2, r2
 800055e:	4611      	mov	r1, r2
 8000560:	4a36      	ldr	r2, [pc, #216]	; (800063c <GPIO_Init+0x1ac>)
 8000562:	400b      	ands	r3, r1
 8000564:	60d3      	str	r3, [r2, #12]
                break ;
 8000566:	e014      	b.n	8000592 <GPIO_Init+0x102>
                EXTI->FTSR |= (1 << bitFieldOffset) ;
 8000568:	4b34      	ldr	r3, [pc, #208]	; (800063c <GPIO_Init+0x1ac>)
 800056a:	68db      	ldr	r3, [r3, #12]
 800056c:	7cfa      	ldrb	r2, [r7, #19]
 800056e:	2101      	movs	r1, #1
 8000570:	fa01 f202 	lsl.w	r2, r1, r2
 8000574:	4611      	mov	r1, r2
 8000576:	4a31      	ldr	r2, [pc, #196]	; (800063c <GPIO_Init+0x1ac>)
 8000578:	430b      	orrs	r3, r1
 800057a:	60d3      	str	r3, [r2, #12]
                EXTI->RTSR |= (1 << bitFieldOffset) ;
 800057c:	4b2f      	ldr	r3, [pc, #188]	; (800063c <GPIO_Init+0x1ac>)
 800057e:	689b      	ldr	r3, [r3, #8]
 8000580:	7cfa      	ldrb	r2, [r7, #19]
 8000582:	2101      	movs	r1, #1
 8000584:	fa01 f202 	lsl.w	r2, r1, r2
 8000588:	4611      	mov	r1, r2
 800058a:	4a2c      	ldr	r2, [pc, #176]	; (800063c <GPIO_Init+0x1ac>)
 800058c:	430b      	orrs	r3, r1
 800058e:	6093      	str	r3, [r2, #8]
                break ;
 8000590:	bf00      	nop
        }

        // 2. Configure the GPIO port selection in SYSCFG_EXTICR
        uint8_t temp1 = bitFieldOffset / 4 ;
 8000592:	7cfb      	ldrb	r3, [r7, #19]
 8000594:	089b      	lsrs	r3, r3, #2
 8000596:	74bb      	strb	r3, [r7, #18]
        uint8_t temp2 = bitFieldOffset % 4 ;
 8000598:	7cfb      	ldrb	r3, [r7, #19]
 800059a:	f003 0303 	and.w	r3, r3, #3
 800059e:	747b      	strb	r3, [r7, #17]
        uint8_t portCode = GPIO_BASE_ADDR_TO_CODE(pGPIO_Handle->pGPIOx) ;
 80005a0:	687b      	ldr	r3, [r7, #4]
 80005a2:	681b      	ldr	r3, [r3, #0]
 80005a4:	4a26      	ldr	r2, [pc, #152]	; (8000640 <GPIO_Init+0x1b0>)
 80005a6:	4293      	cmp	r3, r2
 80005a8:	d060      	beq.n	800066c <GPIO_Init+0x1dc>
 80005aa:	687b      	ldr	r3, [r7, #4]
 80005ac:	681b      	ldr	r3, [r3, #0]
 80005ae:	4a25      	ldr	r2, [pc, #148]	; (8000644 <GPIO_Init+0x1b4>)
 80005b0:	4293      	cmp	r3, r2
 80005b2:	d040      	beq.n	8000636 <GPIO_Init+0x1a6>
 80005b4:	687b      	ldr	r3, [r7, #4]
 80005b6:	681b      	ldr	r3, [r3, #0]
 80005b8:	4a23      	ldr	r2, [pc, #140]	; (8000648 <GPIO_Init+0x1b8>)
 80005ba:	4293      	cmp	r3, r2
 80005bc:	d039      	beq.n	8000632 <GPIO_Init+0x1a2>
 80005be:	687b      	ldr	r3, [r7, #4]
 80005c0:	681b      	ldr	r3, [r3, #0]
 80005c2:	4a22      	ldr	r2, [pc, #136]	; (800064c <GPIO_Init+0x1bc>)
 80005c4:	4293      	cmp	r3, r2
 80005c6:	d032      	beq.n	800062e <GPIO_Init+0x19e>
 80005c8:	687b      	ldr	r3, [r7, #4]
 80005ca:	681b      	ldr	r3, [r3, #0]
 80005cc:	4a20      	ldr	r2, [pc, #128]	; (8000650 <GPIO_Init+0x1c0>)
 80005ce:	4293      	cmp	r3, r2
 80005d0:	d02b      	beq.n	800062a <GPIO_Init+0x19a>
 80005d2:	687b      	ldr	r3, [r7, #4]
 80005d4:	681b      	ldr	r3, [r3, #0]
 80005d6:	4a1f      	ldr	r2, [pc, #124]	; (8000654 <GPIO_Init+0x1c4>)
 80005d8:	4293      	cmp	r3, r2
 80005da:	d024      	beq.n	8000626 <GPIO_Init+0x196>
 80005dc:	687b      	ldr	r3, [r7, #4]
 80005de:	681b      	ldr	r3, [r3, #0]
 80005e0:	4a1d      	ldr	r2, [pc, #116]	; (8000658 <GPIO_Init+0x1c8>)
 80005e2:	4293      	cmp	r3, r2
 80005e4:	d01d      	beq.n	8000622 <GPIO_Init+0x192>
 80005e6:	687b      	ldr	r3, [r7, #4]
 80005e8:	681b      	ldr	r3, [r3, #0]
 80005ea:	4a1c      	ldr	r2, [pc, #112]	; (800065c <GPIO_Init+0x1cc>)
 80005ec:	4293      	cmp	r3, r2
 80005ee:	d016      	beq.n	800061e <GPIO_Init+0x18e>
 80005f0:	687b      	ldr	r3, [r7, #4]
 80005f2:	681b      	ldr	r3, [r3, #0]
 80005f4:	4a1a      	ldr	r2, [pc, #104]	; (8000660 <GPIO_Init+0x1d0>)
 80005f6:	4293      	cmp	r3, r2
 80005f8:	d00f      	beq.n	800061a <GPIO_Init+0x18a>
 80005fa:	687b      	ldr	r3, [r7, #4]
 80005fc:	681b      	ldr	r3, [r3, #0]
 80005fe:	4a19      	ldr	r2, [pc, #100]	; (8000664 <GPIO_Init+0x1d4>)
 8000600:	4293      	cmp	r3, r2
 8000602:	d008      	beq.n	8000616 <GPIO_Init+0x186>
 8000604:	687b      	ldr	r3, [r7, #4]
 8000606:	681b      	ldr	r3, [r3, #0]
 8000608:	4a17      	ldr	r2, [pc, #92]	; (8000668 <GPIO_Init+0x1d8>)
 800060a:	4293      	cmp	r3, r2
 800060c:	d101      	bne.n	8000612 <GPIO_Init+0x182>
 800060e:	230a      	movs	r3, #10
 8000610:	e02d      	b.n	800066e <GPIO_Init+0x1de>
 8000612:	2300      	movs	r3, #0
 8000614:	e02b      	b.n	800066e <GPIO_Init+0x1de>
 8000616:	2309      	movs	r3, #9
 8000618:	e029      	b.n	800066e <GPIO_Init+0x1de>
 800061a:	2308      	movs	r3, #8
 800061c:	e027      	b.n	800066e <GPIO_Init+0x1de>
 800061e:	2307      	movs	r3, #7
 8000620:	e025      	b.n	800066e <GPIO_Init+0x1de>
 8000622:	2306      	movs	r3, #6
 8000624:	e023      	b.n	800066e <GPIO_Init+0x1de>
 8000626:	2305      	movs	r3, #5
 8000628:	e021      	b.n	800066e <GPIO_Init+0x1de>
 800062a:	2304      	movs	r3, #4
 800062c:	e01f      	b.n	800066e <GPIO_Init+0x1de>
 800062e:	2303      	movs	r3, #3
 8000630:	e01d      	b.n	800066e <GPIO_Init+0x1de>
 8000632:	2302      	movs	r3, #2
 8000634:	e01b      	b.n	800066e <GPIO_Init+0x1de>
 8000636:	2301      	movs	r3, #1
 8000638:	e019      	b.n	800066e <GPIO_Init+0x1de>
 800063a:	bf00      	nop
 800063c:	40013c00 	.word	0x40013c00
 8000640:	40020000 	.word	0x40020000
 8000644:	40020400 	.word	0x40020400
 8000648:	40020800 	.word	0x40020800
 800064c:	40020c00 	.word	0x40020c00
 8000650:	40021000 	.word	0x40021000
 8000654:	40021400 	.word	0x40021400
 8000658:	40021800 	.word	0x40021800
 800065c:	40021c00 	.word	0x40021c00
 8000660:	40022000 	.word	0x40022000
 8000664:	40022400 	.word	0x40022400
 8000668:	40022800 	.word	0x40022800
 800066c:	2300      	movs	r3, #0
 800066e:	743b      	strb	r3, [r7, #16]
        SYSCFG_PCLK_EN() ;                                                                                          // Enable SYSCFG peripheral clock
 8000670:	4b69      	ldr	r3, [pc, #420]	; (8000818 <GPIO_Init+0x388>)
 8000672:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000674:	4a68      	ldr	r2, [pc, #416]	; (8000818 <GPIO_Init+0x388>)
 8000676:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800067a:	6453      	str	r3, [r2, #68]	; 0x44
        SYSCFG->EXTICR[temp1] &= ~(0xF << (temp2 * 4)) ;                                                            // Clear 4 bits
 800067c:	4a67      	ldr	r2, [pc, #412]	; (800081c <GPIO_Init+0x38c>)
 800067e:	7cbb      	ldrb	r3, [r7, #18]
 8000680:	3302      	adds	r3, #2
 8000682:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000686:	7c7b      	ldrb	r3, [r7, #17]
 8000688:	009b      	lsls	r3, r3, #2
 800068a:	210f      	movs	r1, #15
 800068c:	fa01 f303 	lsl.w	r3, r1, r3
 8000690:	43db      	mvns	r3, r3
 8000692:	4618      	mov	r0, r3
 8000694:	4961      	ldr	r1, [pc, #388]	; (800081c <GPIO_Init+0x38c>)
 8000696:	7cbb      	ldrb	r3, [r7, #18]
 8000698:	4002      	ands	r2, r0
 800069a:	3302      	adds	r3, #2
 800069c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        SYSCFG->EXTICR[temp1] |= (portCode << (temp2 * 4)) ;                                                        // Set 4 bits
 80006a0:	4a5e      	ldr	r2, [pc, #376]	; (800081c <GPIO_Init+0x38c>)
 80006a2:	7cbb      	ldrb	r3, [r7, #18]
 80006a4:	3302      	adds	r3, #2
 80006a6:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80006aa:	7c39      	ldrb	r1, [r7, #16]
 80006ac:	7c7b      	ldrb	r3, [r7, #17]
 80006ae:	009b      	lsls	r3, r3, #2
 80006b0:	fa01 f303 	lsl.w	r3, r1, r3
 80006b4:	4618      	mov	r0, r3
 80006b6:	4959      	ldr	r1, [pc, #356]	; (800081c <GPIO_Init+0x38c>)
 80006b8:	7cbb      	ldrb	r3, [r7, #18]
 80006ba:	4302      	orrs	r2, r0
 80006bc:	3302      	adds	r3, #2
 80006be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        // 3. Enable the EXTI interrupt delivery using IMR
        EXTI->IMR |= (1 << bitFieldOffset) ;
 80006c2:	4b57      	ldr	r3, [pc, #348]	; (8000820 <GPIO_Init+0x390>)
 80006c4:	681b      	ldr	r3, [r3, #0]
 80006c6:	7cfa      	ldrb	r2, [r7, #19]
 80006c8:	2101      	movs	r1, #1
 80006ca:	fa01 f202 	lsl.w	r2, r1, r2
 80006ce:	4611      	mov	r1, r2
 80006d0:	4a53      	ldr	r2, [pc, #332]	; (8000820 <GPIO_Init+0x390>)
 80006d2:	430b      	orrs	r3, r1
 80006d4:	6013      	str	r3, [r2, #0]
    }

    // 2. Configure the speed
    temp = 0 ;
 80006d6:	2300      	movs	r3, #0
 80006d8:	617b      	str	r3, [r7, #20]
    temp = pGPIO_Handle->GPIO_PinConfig.GPIO_PinSpeed << (2 * pGPIO_Handle->GPIO_PinConfig.GPIO_PinNumber) ;
 80006da:	687b      	ldr	r3, [r7, #4]
 80006dc:	799b      	ldrb	r3, [r3, #6]
 80006de:	461a      	mov	r2, r3
 80006e0:	687b      	ldr	r3, [r7, #4]
 80006e2:	791b      	ldrb	r3, [r3, #4]
 80006e4:	005b      	lsls	r3, r3, #1
 80006e6:	fa02 f303 	lsl.w	r3, r2, r3
 80006ea:	617b      	str	r3, [r7, #20]
    pGPIO_Handle->pGPIOx->OSPEEDR &= ~(0x3 << (2 * pGPIO_Handle->GPIO_PinConfig.GPIO_PinNumber)) ;                  // Clear
 80006ec:	687b      	ldr	r3, [r7, #4]
 80006ee:	681b      	ldr	r3, [r3, #0]
 80006f0:	689a      	ldr	r2, [r3, #8]
 80006f2:	687b      	ldr	r3, [r7, #4]
 80006f4:	791b      	ldrb	r3, [r3, #4]
 80006f6:	005b      	lsls	r3, r3, #1
 80006f8:	2103      	movs	r1, #3
 80006fa:	fa01 f303 	lsl.w	r3, r1, r3
 80006fe:	43db      	mvns	r3, r3
 8000700:	4619      	mov	r1, r3
 8000702:	687b      	ldr	r3, [r7, #4]
 8000704:	681b      	ldr	r3, [r3, #0]
 8000706:	400a      	ands	r2, r1
 8000708:	609a      	str	r2, [r3, #8]
    pGPIO_Handle->pGPIOx->OSPEEDR |= temp ;                                                                         // Set
 800070a:	687b      	ldr	r3, [r7, #4]
 800070c:	681b      	ldr	r3, [r3, #0]
 800070e:	6899      	ldr	r1, [r3, #8]
 8000710:	687b      	ldr	r3, [r7, #4]
 8000712:	681b      	ldr	r3, [r3, #0]
 8000714:	697a      	ldr	r2, [r7, #20]
 8000716:	430a      	orrs	r2, r1
 8000718:	609a      	str	r2, [r3, #8]

    // 3. Configure the PUPD settings
    temp = 0 ;
 800071a:	2300      	movs	r3, #0
 800071c:	617b      	str	r3, [r7, #20]
    temp = pGPIO_Handle->GPIO_PinConfig.GPIO_PinPuPdCtrl << (2 * pGPIO_Handle->GPIO_PinConfig.GPIO_PinNumber) ;
 800071e:	687b      	ldr	r3, [r7, #4]
 8000720:	79db      	ldrb	r3, [r3, #7]
 8000722:	461a      	mov	r2, r3
 8000724:	687b      	ldr	r3, [r7, #4]
 8000726:	791b      	ldrb	r3, [r3, #4]
 8000728:	005b      	lsls	r3, r3, #1
 800072a:	fa02 f303 	lsl.w	r3, r2, r3
 800072e:	617b      	str	r3, [r7, #20]
    pGPIO_Handle->pGPIOx->PUPDR &= ~(0x3 << (2 *pGPIO_Handle->GPIO_PinConfig.GPIO_PinNumber)) ;                     // Clear
 8000730:	687b      	ldr	r3, [r7, #4]
 8000732:	681b      	ldr	r3, [r3, #0]
 8000734:	68da      	ldr	r2, [r3, #12]
 8000736:	687b      	ldr	r3, [r7, #4]
 8000738:	791b      	ldrb	r3, [r3, #4]
 800073a:	005b      	lsls	r3, r3, #1
 800073c:	2103      	movs	r1, #3
 800073e:	fa01 f303 	lsl.w	r3, r1, r3
 8000742:	43db      	mvns	r3, r3
 8000744:	4619      	mov	r1, r3
 8000746:	687b      	ldr	r3, [r7, #4]
 8000748:	681b      	ldr	r3, [r3, #0]
 800074a:	400a      	ands	r2, r1
 800074c:	60da      	str	r2, [r3, #12]
    pGPIO_Handle->pGPIOx->PUPDR |= temp ;                                                                           // Set
 800074e:	687b      	ldr	r3, [r7, #4]
 8000750:	681b      	ldr	r3, [r3, #0]
 8000752:	68d9      	ldr	r1, [r3, #12]
 8000754:	687b      	ldr	r3, [r7, #4]
 8000756:	681b      	ldr	r3, [r3, #0]
 8000758:	697a      	ldr	r2, [r7, #20]
 800075a:	430a      	orrs	r2, r1
 800075c:	60da      	str	r2, [r3, #12]

    // 4. Configure the op type
    temp = 0 ;
 800075e:	2300      	movs	r3, #0
 8000760:	617b      	str	r3, [r7, #20]
    temp = pGPIO_Handle->GPIO_PinConfig.GPIO_PinOPType << pGPIO_Handle->GPIO_PinConfig.GPIO_PinNumber ;
 8000762:	687b      	ldr	r3, [r7, #4]
 8000764:	7a1b      	ldrb	r3, [r3, #8]
 8000766:	461a      	mov	r2, r3
 8000768:	687b      	ldr	r3, [r7, #4]
 800076a:	791b      	ldrb	r3, [r3, #4]
 800076c:	fa02 f303 	lsl.w	r3, r2, r3
 8000770:	617b      	str	r3, [r7, #20]
    pGPIO_Handle->pGPIOx->OTYPER &= ~(0x1 << pGPIO_Handle->GPIO_PinConfig.GPIO_PinNumber) ;                         // Clear
 8000772:	687b      	ldr	r3, [r7, #4]
 8000774:	681b      	ldr	r3, [r3, #0]
 8000776:	685a      	ldr	r2, [r3, #4]
 8000778:	687b      	ldr	r3, [r7, #4]
 800077a:	791b      	ldrb	r3, [r3, #4]
 800077c:	4619      	mov	r1, r3
 800077e:	2301      	movs	r3, #1
 8000780:	408b      	lsls	r3, r1
 8000782:	43db      	mvns	r3, r3
 8000784:	4619      	mov	r1, r3
 8000786:	687b      	ldr	r3, [r7, #4]
 8000788:	681b      	ldr	r3, [r3, #0]
 800078a:	400a      	ands	r2, r1
 800078c:	605a      	str	r2, [r3, #4]
    pGPIO_Handle->pGPIOx->OTYPER |= temp ;                                                                          // Set
 800078e:	687b      	ldr	r3, [r7, #4]
 8000790:	681b      	ldr	r3, [r3, #0]
 8000792:	6859      	ldr	r1, [r3, #4]
 8000794:	687b      	ldr	r3, [r7, #4]
 8000796:	681b      	ldr	r3, [r3, #0]
 8000798:	697a      	ldr	r2, [r7, #20]
 800079a:	430a      	orrs	r2, r1
 800079c:	605a      	str	r2, [r3, #4]

    // 5. Configure the alt functionality
    if (pGPIO_Handle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_ALT_FUN) {
 800079e:	687b      	ldr	r3, [r7, #4]
 80007a0:	795b      	ldrb	r3, [r3, #5]
 80007a2:	2b02      	cmp	r3, #2
 80007a4:	d134      	bne.n	8000810 <GPIO_Init+0x380>
        // Configure the alt function registers
        uint32_t temp1 ;
        uint32_t temp2 ;

        temp1 = pGPIO_Handle->GPIO_PinConfig.GPIO_PinNumber / 8 ;
 80007a6:	687b      	ldr	r3, [r7, #4]
 80007a8:	791b      	ldrb	r3, [r3, #4]
 80007aa:	08db      	lsrs	r3, r3, #3
 80007ac:	b2db      	uxtb	r3, r3
 80007ae:	60fb      	str	r3, [r7, #12]
        temp2 = pGPIO_Handle->GPIO_PinConfig.GPIO_PinNumber % 8 ;
 80007b0:	687b      	ldr	r3, [r7, #4]
 80007b2:	791b      	ldrb	r3, [r3, #4]
 80007b4:	f003 0307 	and.w	r3, r3, #7
 80007b8:	60bb      	str	r3, [r7, #8]

        pGPIO_Handle->pGPIOx->AFR[temp1] &= ~(0xF << (4 * temp2));                                               // Clear 4 bit fields
 80007ba:	687b      	ldr	r3, [r7, #4]
 80007bc:	681b      	ldr	r3, [r3, #0]
 80007be:	68fa      	ldr	r2, [r7, #12]
 80007c0:	3208      	adds	r2, #8
 80007c2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80007c6:	68bb      	ldr	r3, [r7, #8]
 80007c8:	009b      	lsls	r3, r3, #2
 80007ca:	210f      	movs	r1, #15
 80007cc:	fa01 f303 	lsl.w	r3, r1, r3
 80007d0:	43db      	mvns	r3, r3
 80007d2:	4619      	mov	r1, r3
 80007d4:	687b      	ldr	r3, [r7, #4]
 80007d6:	681b      	ldr	r3, [r3, #0]
 80007d8:	4011      	ands	r1, r2
 80007da:	68fa      	ldr	r2, [r7, #12]
 80007dc:	3208      	adds	r2, #8
 80007de:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        pGPIO_Handle->pGPIOx->AFR[temp1] |= (pGPIO_Handle->GPIO_PinConfig.GPIO_PinAltFunMode << (4 * temp2));       // Set
 80007e2:	687b      	ldr	r3, [r7, #4]
 80007e4:	681b      	ldr	r3, [r3, #0]
 80007e6:	68fa      	ldr	r2, [r7, #12]
 80007e8:	3208      	adds	r2, #8
 80007ea:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80007ee:	687b      	ldr	r3, [r7, #4]
 80007f0:	7a5b      	ldrb	r3, [r3, #9]
 80007f2:	4619      	mov	r1, r3
 80007f4:	68bb      	ldr	r3, [r7, #8]
 80007f6:	009b      	lsls	r3, r3, #2
 80007f8:	fa01 f303 	lsl.w	r3, r1, r3
 80007fc:	4619      	mov	r1, r3
 80007fe:	687b      	ldr	r3, [r7, #4]
 8000800:	681b      	ldr	r3, [r3, #0]
 8000802:	4311      	orrs	r1, r2
 8000804:	68fa      	ldr	r2, [r7, #12]
 8000806:	3208      	adds	r2, #8
 8000808:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800080c:	e000      	b.n	8000810 <GPIO_Init+0x380>
                return ;
 800080e:	bf00      	nop
    }
}
 8000810:	3718      	adds	r7, #24
 8000812:	46bd      	mov	sp, r7
 8000814:	bd80      	pop	{r7, pc}
 8000816:	bf00      	nop
 8000818:	40023800 	.word	0x40023800
 800081c:	40013800 	.word	0x40013800
 8000820:	40013c00 	.word	0x40013c00

08000824 <GPIO_ReadFromInputPin>:
 * 
 * @note                        To read, the function right-shifts the IDR value over by pinNumber
 *                              amount of times to the lsb. We then mask with 0x1 and typecast
 *                              to get the value in the IDR
 */
uint8_t GPIO_ReadFromInputPin(GPIO_RegDef_t *pGPIOx, uint8_t pinNumber) {
 8000824:	b480      	push	{r7}
 8000826:	b085      	sub	sp, #20
 8000828:	af00      	add	r7, sp, #0
 800082a:	6078      	str	r0, [r7, #4]
 800082c:	460b      	mov	r3, r1
 800082e:	70fb      	strb	r3, [r7, #3]
    uint8_t value ;
    value = (uint8_t) ((pGPIOx->IDR >> pinNumber) & 0x00000001 ) ;
 8000830:	687b      	ldr	r3, [r7, #4]
 8000832:	691a      	ldr	r2, [r3, #16]
 8000834:	78fb      	ldrb	r3, [r7, #3]
 8000836:	fa22 f303 	lsr.w	r3, r2, r3
 800083a:	b2db      	uxtb	r3, r3
 800083c:	f003 0301 	and.w	r3, r3, #1
 8000840:	73fb      	strb	r3, [r7, #15]
    return  value ;
 8000842:	7bfb      	ldrb	r3, [r7, #15]
}
 8000844:	4618      	mov	r0, r3
 8000846:	3714      	adds	r7, #20
 8000848:	46bd      	mov	sp, r7
 800084a:	bc80      	pop	{r7}
 800084c:	4770      	bx	lr
	...

08000850 <SPI_PeriClockControl>:
 * @return              none
 * 
 * @note                none
 * 
 */
void SPI_PeriClockControl(SPI_RegDef_t *pSPIx, uint8_t EnorDi) {
 8000850:	b480      	push	{r7}
 8000852:	b083      	sub	sp, #12
 8000854:	af00      	add	r7, sp, #0
 8000856:	6078      	str	r0, [r7, #4]
 8000858:	460b      	mov	r3, r1
 800085a:	70fb      	strb	r3, [r7, #3]
    // If enabling,
    if (EnorDi == ENABLE) {
 800085c:	78fb      	ldrb	r3, [r7, #3]
 800085e:	2b01      	cmp	r3, #1
 8000860:	d14c      	bne.n	80008fc <SPI_PeriClockControl+0xac>
        // Select which SPI peripheral and enable
        switch ((unsigned long int) pSPIx) {
 8000862:	687b      	ldr	r3, [r7, #4]
 8000864:	4a4e      	ldr	r2, [pc, #312]	; (80009a0 <SPI_PeriClockControl+0x150>)
 8000866:	4293      	cmp	r3, r2
 8000868:	d041      	beq.n	80008ee <SPI_PeriClockControl+0x9e>
 800086a:	4a4d      	ldr	r2, [pc, #308]	; (80009a0 <SPI_PeriClockControl+0x150>)
 800086c:	4293      	cmp	r3, r2
 800086e:	f200 808f 	bhi.w	8000990 <SPI_PeriClockControl+0x140>
 8000872:	4a4c      	ldr	r2, [pc, #304]	; (80009a4 <SPI_PeriClockControl+0x154>)
 8000874:	4293      	cmp	r3, r2
 8000876:	d033      	beq.n	80008e0 <SPI_PeriClockControl+0x90>
 8000878:	4a4a      	ldr	r2, [pc, #296]	; (80009a4 <SPI_PeriClockControl+0x154>)
 800087a:	4293      	cmp	r3, r2
 800087c:	f200 8088 	bhi.w	8000990 <SPI_PeriClockControl+0x140>
 8000880:	4a49      	ldr	r2, [pc, #292]	; (80009a8 <SPI_PeriClockControl+0x158>)
 8000882:	4293      	cmp	r3, r2
 8000884:	d025      	beq.n	80008d2 <SPI_PeriClockControl+0x82>
 8000886:	4a48      	ldr	r2, [pc, #288]	; (80009a8 <SPI_PeriClockControl+0x158>)
 8000888:	4293      	cmp	r3, r2
 800088a:	f200 8081 	bhi.w	8000990 <SPI_PeriClockControl+0x140>
 800088e:	4a47      	ldr	r2, [pc, #284]	; (80009ac <SPI_PeriClockControl+0x15c>)
 8000890:	4293      	cmp	r3, r2
 8000892:	d009      	beq.n	80008a8 <SPI_PeriClockControl+0x58>
 8000894:	4a45      	ldr	r2, [pc, #276]	; (80009ac <SPI_PeriClockControl+0x15c>)
 8000896:	4293      	cmp	r3, r2
 8000898:	d87a      	bhi.n	8000990 <SPI_PeriClockControl+0x140>
 800089a:	4a45      	ldr	r2, [pc, #276]	; (80009b0 <SPI_PeriClockControl+0x160>)
 800089c:	4293      	cmp	r3, r2
 800089e:	d00a      	beq.n	80008b6 <SPI_PeriClockControl+0x66>
 80008a0:	4a44      	ldr	r2, [pc, #272]	; (80009b4 <SPI_PeriClockControl+0x164>)
 80008a2:	4293      	cmp	r3, r2
 80008a4:	d00e      	beq.n	80008c4 <SPI_PeriClockControl+0x74>
                case SPI2_BASE_ADDR:        SPI2_PCLK_EN() ;        break ;
                case SPI3_BASE_ADDR:        SPI3_PCLK_EN() ;        break ;
                case SPI4_BASE_ADDR:        SPI4_PCLK_EN() ;        break ;
                case SPI5_BASE_ADDR:        SPI5_PCLK_EN() ;        break ;
                case SPI6_BASE_ADDR:        SPI6_PCLK_EN() ;        break ;
                default:                    return ;                break ;         // TODO: return error or cause a user fault
 80008a6:	e073      	b.n	8000990 <SPI_PeriClockControl+0x140>
                case SPI1_BASE_ADDR:        SPI1_PCLK_EN() ;        break ;
 80008a8:	4b43      	ldr	r3, [pc, #268]	; (80009b8 <SPI_PeriClockControl+0x168>)
 80008aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008ac:	4a42      	ldr	r2, [pc, #264]	; (80009b8 <SPI_PeriClockControl+0x168>)
 80008ae:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80008b2:	6453      	str	r3, [r2, #68]	; 0x44
 80008b4:	e06f      	b.n	8000996 <SPI_PeriClockControl+0x146>
                case SPI2_BASE_ADDR:        SPI2_PCLK_EN() ;        break ;
 80008b6:	4b40      	ldr	r3, [pc, #256]	; (80009b8 <SPI_PeriClockControl+0x168>)
 80008b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008ba:	4a3f      	ldr	r2, [pc, #252]	; (80009b8 <SPI_PeriClockControl+0x168>)
 80008bc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80008c0:	6413      	str	r3, [r2, #64]	; 0x40
 80008c2:	e068      	b.n	8000996 <SPI_PeriClockControl+0x146>
                case SPI3_BASE_ADDR:        SPI3_PCLK_EN() ;        break ;
 80008c4:	4b3c      	ldr	r3, [pc, #240]	; (80009b8 <SPI_PeriClockControl+0x168>)
 80008c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008c8:	4a3b      	ldr	r2, [pc, #236]	; (80009b8 <SPI_PeriClockControl+0x168>)
 80008ca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80008ce:	6413      	str	r3, [r2, #64]	; 0x40
 80008d0:	e061      	b.n	8000996 <SPI_PeriClockControl+0x146>
                case SPI4_BASE_ADDR:        SPI4_PCLK_EN() ;        break ;
 80008d2:	4b39      	ldr	r3, [pc, #228]	; (80009b8 <SPI_PeriClockControl+0x168>)
 80008d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008d6:	4a38      	ldr	r2, [pc, #224]	; (80009b8 <SPI_PeriClockControl+0x168>)
 80008d8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80008dc:	6453      	str	r3, [r2, #68]	; 0x44
 80008de:	e05a      	b.n	8000996 <SPI_PeriClockControl+0x146>
                case SPI5_BASE_ADDR:        SPI5_PCLK_EN() ;        break ;
 80008e0:	4b35      	ldr	r3, [pc, #212]	; (80009b8 <SPI_PeriClockControl+0x168>)
 80008e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008e4:	4a34      	ldr	r2, [pc, #208]	; (80009b8 <SPI_PeriClockControl+0x168>)
 80008e6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80008ea:	6453      	str	r3, [r2, #68]	; 0x44
 80008ec:	e053      	b.n	8000996 <SPI_PeriClockControl+0x146>
                case SPI6_BASE_ADDR:        SPI6_PCLK_EN() ;        break ;
 80008ee:	4b32      	ldr	r3, [pc, #200]	; (80009b8 <SPI_PeriClockControl+0x168>)
 80008f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008f2:	4a31      	ldr	r2, [pc, #196]	; (80009b8 <SPI_PeriClockControl+0x168>)
 80008f4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80008f8:	6453      	str	r3, [r2, #68]	; 0x44
 80008fa:	e04c      	b.n	8000996 <SPI_PeriClockControl+0x146>
        }
    }
    else {
        // Disable the corresponding SPI peripheral otherwise
        switch ((unsigned long int) pSPIx) {
 80008fc:	687b      	ldr	r3, [r7, #4]
 80008fe:	4a28      	ldr	r2, [pc, #160]	; (80009a0 <SPI_PeriClockControl+0x150>)
 8000900:	4293      	cmp	r3, r2
 8000902:	d03e      	beq.n	8000982 <SPI_PeriClockControl+0x132>
 8000904:	4a26      	ldr	r2, [pc, #152]	; (80009a0 <SPI_PeriClockControl+0x150>)
 8000906:	4293      	cmp	r3, r2
 8000908:	d844      	bhi.n	8000994 <SPI_PeriClockControl+0x144>
 800090a:	4a26      	ldr	r2, [pc, #152]	; (80009a4 <SPI_PeriClockControl+0x154>)
 800090c:	4293      	cmp	r3, r2
 800090e:	d031      	beq.n	8000974 <SPI_PeriClockControl+0x124>
 8000910:	4a24      	ldr	r2, [pc, #144]	; (80009a4 <SPI_PeriClockControl+0x154>)
 8000912:	4293      	cmp	r3, r2
 8000914:	d83e      	bhi.n	8000994 <SPI_PeriClockControl+0x144>
 8000916:	4a24      	ldr	r2, [pc, #144]	; (80009a8 <SPI_PeriClockControl+0x158>)
 8000918:	4293      	cmp	r3, r2
 800091a:	d024      	beq.n	8000966 <SPI_PeriClockControl+0x116>
 800091c:	4a22      	ldr	r2, [pc, #136]	; (80009a8 <SPI_PeriClockControl+0x158>)
 800091e:	4293      	cmp	r3, r2
 8000920:	d838      	bhi.n	8000994 <SPI_PeriClockControl+0x144>
 8000922:	4a22      	ldr	r2, [pc, #136]	; (80009ac <SPI_PeriClockControl+0x15c>)
 8000924:	4293      	cmp	r3, r2
 8000926:	d009      	beq.n	800093c <SPI_PeriClockControl+0xec>
 8000928:	4a20      	ldr	r2, [pc, #128]	; (80009ac <SPI_PeriClockControl+0x15c>)
 800092a:	4293      	cmp	r3, r2
 800092c:	d832      	bhi.n	8000994 <SPI_PeriClockControl+0x144>
 800092e:	4a20      	ldr	r2, [pc, #128]	; (80009b0 <SPI_PeriClockControl+0x160>)
 8000930:	4293      	cmp	r3, r2
 8000932:	d00a      	beq.n	800094a <SPI_PeriClockControl+0xfa>
 8000934:	4a1f      	ldr	r2, [pc, #124]	; (80009b4 <SPI_PeriClockControl+0x164>)
 8000936:	4293      	cmp	r3, r2
 8000938:	d00e      	beq.n	8000958 <SPI_PeriClockControl+0x108>
                case SPI2_BASE_ADDR:        SPI2_PCLK_DI() ;        break ;
                case SPI3_BASE_ADDR:        SPI3_PCLK_DI() ;        break ;
                case SPI4_BASE_ADDR:        SPI4_PCLK_DI() ;        break ;
                case SPI5_BASE_ADDR:        SPI5_PCLK_DI() ;        break ;
                case SPI6_BASE_ADDR:        SPI6_PCLK_DI() ;        break ;
                default:                    return ;                break ;         // TODO: return error or cause a user fault
 800093a:	e02b      	b.n	8000994 <SPI_PeriClockControl+0x144>
                case SPI1_BASE_ADDR:        SPI1_PCLK_DI() ;        break ;
 800093c:	4b1e      	ldr	r3, [pc, #120]	; (80009b8 <SPI_PeriClockControl+0x168>)
 800093e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000940:	4a1d      	ldr	r2, [pc, #116]	; (80009b8 <SPI_PeriClockControl+0x168>)
 8000942:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000946:	6453      	str	r3, [r2, #68]	; 0x44
 8000948:	e025      	b.n	8000996 <SPI_PeriClockControl+0x146>
                case SPI2_BASE_ADDR:        SPI2_PCLK_DI() ;        break ;
 800094a:	4b1b      	ldr	r3, [pc, #108]	; (80009b8 <SPI_PeriClockControl+0x168>)
 800094c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800094e:	4a1a      	ldr	r2, [pc, #104]	; (80009b8 <SPI_PeriClockControl+0x168>)
 8000950:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8000954:	6413      	str	r3, [r2, #64]	; 0x40
 8000956:	e01e      	b.n	8000996 <SPI_PeriClockControl+0x146>
                case SPI3_BASE_ADDR:        SPI3_PCLK_DI() ;        break ;
 8000958:	4b17      	ldr	r3, [pc, #92]	; (80009b8 <SPI_PeriClockControl+0x168>)
 800095a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800095c:	4a16      	ldr	r2, [pc, #88]	; (80009b8 <SPI_PeriClockControl+0x168>)
 800095e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8000962:	6413      	str	r3, [r2, #64]	; 0x40
 8000964:	e017      	b.n	8000996 <SPI_PeriClockControl+0x146>
                case SPI4_BASE_ADDR:        SPI4_PCLK_DI() ;        break ;
 8000966:	4b14      	ldr	r3, [pc, #80]	; (80009b8 <SPI_PeriClockControl+0x168>)
 8000968:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800096a:	4a13      	ldr	r2, [pc, #76]	; (80009b8 <SPI_PeriClockControl+0x168>)
 800096c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8000970:	6453      	str	r3, [r2, #68]	; 0x44
 8000972:	e010      	b.n	8000996 <SPI_PeriClockControl+0x146>
                case SPI5_BASE_ADDR:        SPI5_PCLK_DI() ;        break ;
 8000974:	4b10      	ldr	r3, [pc, #64]	; (80009b8 <SPI_PeriClockControl+0x168>)
 8000976:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000978:	4a0f      	ldr	r2, [pc, #60]	; (80009b8 <SPI_PeriClockControl+0x168>)
 800097a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800097e:	6453      	str	r3, [r2, #68]	; 0x44
 8000980:	e009      	b.n	8000996 <SPI_PeriClockControl+0x146>
                case SPI6_BASE_ADDR:        SPI6_PCLK_DI() ;        break ;
 8000982:	4b0d      	ldr	r3, [pc, #52]	; (80009b8 <SPI_PeriClockControl+0x168>)
 8000984:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000986:	4a0c      	ldr	r2, [pc, #48]	; (80009b8 <SPI_PeriClockControl+0x168>)
 8000988:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800098c:	6453      	str	r3, [r2, #68]	; 0x44
 800098e:	e002      	b.n	8000996 <SPI_PeriClockControl+0x146>
                default:                    return ;                break ;         // TODO: return error or cause a user fault
 8000990:	bf00      	nop
 8000992:	e000      	b.n	8000996 <SPI_PeriClockControl+0x146>
                default:                    return ;                break ;         // TODO: return error or cause a user fault
 8000994:	bf00      	nop
        }
    }

}
 8000996:	370c      	adds	r7, #12
 8000998:	46bd      	mov	sp, r7
 800099a:	bc80      	pop	{r7}
 800099c:	4770      	bx	lr
 800099e:	bf00      	nop
 80009a0:	40015400 	.word	0x40015400
 80009a4:	40015000 	.word	0x40015000
 80009a8:	40013400 	.word	0x40013400
 80009ac:	40013000 	.word	0x40013000
 80009b0:	40003800 	.word	0x40003800
 80009b4:	40003c00 	.word	0x40003c00
 80009b8:	40023800 	.word	0x40023800

080009bc <SPI_Init>:
 * @return                  none
 * 
 * @note                    none
 * 
 */
void SPI_Init(SPI_Handle_t *pSPIHandle) {
 80009bc:	b580      	push	{r7, lr}
 80009be:	b084      	sub	sp, #16
 80009c0:	af00      	add	r7, sp, #0
 80009c2:	6078      	str	r0, [r7, #4]
    // Enable the SPIx peripheral
    SPI_PeriClockControl(pSPIHandle->pSPIx, ENABLE) ;
 80009c4:	687b      	ldr	r3, [r7, #4]
 80009c6:	681b      	ldr	r3, [r3, #0]
 80009c8:	2101      	movs	r1, #1
 80009ca:	4618      	mov	r0, r3
 80009cc:	f7ff ff40 	bl	8000850 <SPI_PeriClockControl>

    // Configure the SPI_CR1 register
    uint32_t tempReg = 0 ;
 80009d0:	2300      	movs	r3, #0
 80009d2:	60fb      	str	r3, [r7, #12]

    // 1. Configure the device mode
    tempReg |=  pSPIHandle->SPIConfig.SPI_DeviceMode << SPI_CR1_MSTR ;
 80009d4:	687b      	ldr	r3, [r7, #4]
 80009d6:	791b      	ldrb	r3, [r3, #4]
 80009d8:	009b      	lsls	r3, r3, #2
 80009da:	461a      	mov	r2, r3
 80009dc:	68fb      	ldr	r3, [r7, #12]
 80009de:	4313      	orrs	r3, r2
 80009e0:	60fb      	str	r3, [r7, #12]

    // 2. Configure the bus mode
    switch (pSPIHandle->SPIConfig.SPI_BusConfig) {
 80009e2:	687b      	ldr	r3, [r7, #4]
 80009e4:	795b      	ldrb	r3, [r3, #5]
 80009e6:	2b04      	cmp	r3, #4
 80009e8:	d010      	beq.n	8000a0c <SPI_Init+0x50>
 80009ea:	2b04      	cmp	r3, #4
 80009ec:	dc17      	bgt.n	8000a1e <SPI_Init+0x62>
 80009ee:	2b01      	cmp	r3, #1
 80009f0:	d002      	beq.n	80009f8 <SPI_Init+0x3c>
 80009f2:	2b02      	cmp	r3, #2
 80009f4:	d005      	beq.n	8000a02 <SPI_Init+0x46>
 80009f6:	e012      	b.n	8000a1e <SPI_Init+0x62>
        case SPI_BUS_CONFIG_FD:
            // BIDI mode should be cleared
            tempReg &= ~(1 << SPI_CR1_BIDIMODE) ;
 80009f8:	68fb      	ldr	r3, [r7, #12]
 80009fa:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80009fe:	60fb      	str	r3, [r7, #12]
            break ;
 8000a00:	e012      	b.n	8000a28 <SPI_Init+0x6c>
        case SPI_BUS_CONFIG_HD:
            // BIDI mode should be set
            tempReg |= (1 << SPI_CR1_BIDIMODE) ;
 8000a02:	68fb      	ldr	r3, [r7, #12]
 8000a04:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000a08:	60fb      	str	r3, [r7, #12]
            break ;
 8000a0a:	e00d      	b.n	8000a28 <SPI_Init+0x6c>
        case SPI_BUS_CONFIG_SIMPLEX_RXONLY:
            // BIDI mode should be cleared and RXONLY bit must be set
            tempReg &= ~(1 << SPI_CR1_BIDIMODE) ;
 8000a0c:	68fb      	ldr	r3, [r7, #12]
 8000a0e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8000a12:	60fb      	str	r3, [r7, #12]
            tempReg |= (1 << SPI_CR1_RXONLY) ;
 8000a14:	68fb      	ldr	r3, [r7, #12]
 8000a16:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000a1a:	60fb      	str	r3, [r7, #12]
            break ;
 8000a1c:	e004      	b.n	8000a28 <SPI_Init+0x6c>
        default:
            // Set as Full Duplex by default otherwise
            tempReg &= ~(1 << SPI_CR1_BIDIMODE) ;
 8000a1e:	68fb      	ldr	r3, [r7, #12]
 8000a20:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8000a24:	60fb      	str	r3, [r7, #12]
            break ;
 8000a26:	bf00      	nop
    }

    // 3. configure the SPI serial clock speed (baud rate)
    tempReg |= pSPIHandle->SPIConfig.SPI_SclkSpeed << SPI_CR1_BR ;
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	799b      	ldrb	r3, [r3, #6]
 8000a2c:	00db      	lsls	r3, r3, #3
 8000a2e:	461a      	mov	r2, r3
 8000a30:	68fb      	ldr	r3, [r7, #12]
 8000a32:	4313      	orrs	r3, r2
 8000a34:	60fb      	str	r3, [r7, #12]

    // 4. Configure the DFF
    tempReg |= pSPIHandle->SPIConfig.SPI_DFF << SPI_CR1_DFF ;
 8000a36:	687b      	ldr	r3, [r7, #4]
 8000a38:	79db      	ldrb	r3, [r3, #7]
 8000a3a:	02db      	lsls	r3, r3, #11
 8000a3c:	461a      	mov	r2, r3
 8000a3e:	68fb      	ldr	r3, [r7, #12]
 8000a40:	4313      	orrs	r3, r2
 8000a42:	60fb      	str	r3, [r7, #12]

    // 5. Configure the CPOL
    tempReg |= pSPIHandle->SPIConfig.SPI_CPOL << SPI_CR1_CPOL ;
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	7a1b      	ldrb	r3, [r3, #8]
 8000a48:	005b      	lsls	r3, r3, #1
 8000a4a:	461a      	mov	r2, r3
 8000a4c:	68fb      	ldr	r3, [r7, #12]
 8000a4e:	4313      	orrs	r3, r2
 8000a50:	60fb      	str	r3, [r7, #12]

    //6. Configure the CPHA
    tempReg |= pSPIHandle->SPIConfig.SPI_CPHA << SPI_CR1_CPHA ;
 8000a52:	687b      	ldr	r3, [r7, #4]
 8000a54:	7a5b      	ldrb	r3, [r3, #9]
 8000a56:	461a      	mov	r2, r3
 8000a58:	68fb      	ldr	r3, [r7, #12]
 8000a5a:	4313      	orrs	r3, r2
 8000a5c:	60fb      	str	r3, [r7, #12]

    // 7. Configure the SSM
    tempReg |= pSPIHandle->SPIConfig.SPI_SSM << SPI_CR1_SSM ;
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	7a9b      	ldrb	r3, [r3, #10]
 8000a62:	025b      	lsls	r3, r3, #9
 8000a64:	461a      	mov	r2, r3
 8000a66:	68fb      	ldr	r3, [r7, #12]
 8000a68:	4313      	orrs	r3, r2
 8000a6a:	60fb      	str	r3, [r7, #12]

    pSPIHandle->pSPIx->CR1 = tempReg ;
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	681b      	ldr	r3, [r3, #0]
 8000a70:	68fa      	ldr	r2, [r7, #12]
 8000a72:	601a      	str	r2, [r3, #0]
}
 8000a74:	bf00      	nop
 8000a76:	3710      	adds	r7, #16
 8000a78:	46bd      	mov	sp, r7
 8000a7a:	bd80      	pop	{r7, pc}

08000a7c <SPI_SendData>:
 * @return                  none
 * 
 * @note                    the 16-bit DFF has its length decremented twice  since it sends 2 bytes
 * 
 */
void SPI_SendData(SPI_RegDef_t *pSPIx, uint8_t *pTxBuffer, uint32_t len) {
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	b084      	sub	sp, #16
 8000a80:	af00      	add	r7, sp, #0
 8000a82:	60f8      	str	r0, [r7, #12]
 8000a84:	60b9      	str	r1, [r7, #8]
 8000a86:	607a      	str	r2, [r7, #4]
    while (len > 0) {
 8000a88:	e027      	b.n	8000ada <SPI_SendData+0x5e>
        // 1. Wait for TXE bit to be set -> This will indicate the Tx buffer is empty
        while (SPI_GetFlagStatus(pSPIx, SPI_TXE_FLAG) == FLAG_RESET) ;
 8000a8a:	bf00      	nop
 8000a8c:	2102      	movs	r1, #2
 8000a8e:	68f8      	ldr	r0, [r7, #12]
 8000a90:	f000 f898 	bl	8000bc4 <SPI_GetFlagStatus>
 8000a94:	4603      	mov	r3, r0
 8000a96:	2b00      	cmp	r3, #0
 8000a98:	d0f8      	beq.n	8000a8c <SPI_SendData+0x10>

        // Check if the DFF bit is set for 8 or 16-bits
        if (pSPIx->CR1 & (1 << SPI_CR1_DFF)) {
 8000a9a:	68fb      	ldr	r3, [r7, #12]
 8000a9c:	681b      	ldr	r3, [r3, #0]
 8000a9e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000aa2:	2b00      	cmp	r3, #0
 8000aa4:	d00e      	beq.n	8000ac4 <SPI_SendData+0x48>
            // 16-bit DFF
        	// 1. Load the data into the DR
            pSPIx->DR = *((uint16_t*) pTxBuffer) ;
 8000aa6:	68bb      	ldr	r3, [r7, #8]
 8000aa8:	881b      	ldrh	r3, [r3, #0]
 8000aaa:	461a      	mov	r2, r3
 8000aac:	68fb      	ldr	r3, [r7, #12]
 8000aae:	60da      	str	r2, [r3, #12]
            len-- ;
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	3b01      	subs	r3, #1
 8000ab4:	607b      	str	r3, [r7, #4]
            len-- ;
 8000ab6:	687b      	ldr	r3, [r7, #4]
 8000ab8:	3b01      	subs	r3, #1
 8000aba:	607b      	str	r3, [r7, #4]
            (uint16_t*) pTxBuffer++ ;
 8000abc:	68bb      	ldr	r3, [r7, #8]
 8000abe:	3301      	adds	r3, #1
 8000ac0:	60bb      	str	r3, [r7, #8]
 8000ac2:	e00a      	b.n	8000ada <SPI_SendData+0x5e>
        }
        else {
            // 8-bit DFF
            pSPIx->DR = *pTxBuffer ;
 8000ac4:	68bb      	ldr	r3, [r7, #8]
 8000ac6:	781b      	ldrb	r3, [r3, #0]
 8000ac8:	461a      	mov	r2, r3
 8000aca:	68fb      	ldr	r3, [r7, #12]
 8000acc:	60da      	str	r2, [r3, #12]
            len-- ;
 8000ace:	687b      	ldr	r3, [r7, #4]
 8000ad0:	3b01      	subs	r3, #1
 8000ad2:	607b      	str	r3, [r7, #4]
            pTxBuffer++ ;
 8000ad4:	68bb      	ldr	r3, [r7, #8]
 8000ad6:	3301      	adds	r3, #1
 8000ad8:	60bb      	str	r3, [r7, #8]
    while (len > 0) {
 8000ada:	687b      	ldr	r3, [r7, #4]
 8000adc:	2b00      	cmp	r3, #0
 8000ade:	d1d4      	bne.n	8000a8a <SPI_SendData+0xe>
        }
    }
}
 8000ae0:	bf00      	nop
 8000ae2:	bf00      	nop
 8000ae4:	3710      	adds	r7, #16
 8000ae6:	46bd      	mov	sp, r7
 8000ae8:	bd80      	pop	{r7, pc}

08000aea <SPI_ReceiveData>:
 * @return                  none
 * 
 * @note                    none
 * 
 */
void SPI_ReceiveData(SPI_RegDef_t *pSPIx, uint8_t *pRxBuffer, uint32_t len) {
 8000aea:	b580      	push	{r7, lr}
 8000aec:	b084      	sub	sp, #16
 8000aee:	af00      	add	r7, sp, #0
 8000af0:	60f8      	str	r0, [r7, #12]
 8000af2:	60b9      	str	r1, [r7, #8]
 8000af4:	607a      	str	r2, [r7, #4]
    while (len > 0) {
 8000af6:	e027      	b.n	8000b48 <SPI_ReceiveData+0x5e>
        // 1. Wait for RXNE bit to be set
        while (SPI_GetFlagStatus(pSPIx, SPI_RXNE_FLAG) == (uint8_t)FLAG_RESET) ;
 8000af8:	bf00      	nop
 8000afa:	2101      	movs	r1, #1
 8000afc:	68f8      	ldr	r0, [r7, #12]
 8000afe:	f000 f861 	bl	8000bc4 <SPI_GetFlagStatus>
 8000b02:	4603      	mov	r3, r0
 8000b04:	2b00      	cmp	r3, #0
 8000b06:	d0f8      	beq.n	8000afa <SPI_ReceiveData+0x10>

        // Check if the DFF bit is set for 8 or 16-bits
        if (pSPIx->CR1 & (1 << SPI_CR1_DFF)) {
 8000b08:	68fb      	ldr	r3, [r7, #12]
 8000b0a:	681b      	ldr	r3, [r3, #0]
 8000b0c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000b10:	2b00      	cmp	r3, #0
 8000b12:	d00e      	beq.n	8000b32 <SPI_ReceiveData+0x48>
            // 16-bit DFF
        	// 1. Load the data from DR to RxBuffer address
            *((uint16_t*)pRxBuffer) = pSPIx->DR ;
 8000b14:	68fb      	ldr	r3, [r7, #12]
 8000b16:	68db      	ldr	r3, [r3, #12]
 8000b18:	b29a      	uxth	r2, r3
 8000b1a:	68bb      	ldr	r3, [r7, #8]
 8000b1c:	801a      	strh	r2, [r3, #0]
            len-- ;
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	3b01      	subs	r3, #1
 8000b22:	607b      	str	r3, [r7, #4]
            len-- ;
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	3b01      	subs	r3, #1
 8000b28:	607b      	str	r3, [r7, #4]
            (uint16_t*)pRxBuffer++ ;
 8000b2a:	68bb      	ldr	r3, [r7, #8]
 8000b2c:	3301      	adds	r3, #1
 8000b2e:	60bb      	str	r3, [r7, #8]
 8000b30:	e00a      	b.n	8000b48 <SPI_ReceiveData+0x5e>
        }
        else {
            // 8-bit DFF
        	// 1. Load the data from DR to RxBuffer address
            *(pRxBuffer) = pSPIx->DR ;
 8000b32:	68fb      	ldr	r3, [r7, #12]
 8000b34:	68db      	ldr	r3, [r3, #12]
 8000b36:	b2da      	uxtb	r2, r3
 8000b38:	68bb      	ldr	r3, [r7, #8]
 8000b3a:	701a      	strb	r2, [r3, #0]
            len-- ;
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	3b01      	subs	r3, #1
 8000b40:	607b      	str	r3, [r7, #4]
            pRxBuffer++ ;
 8000b42:	68bb      	ldr	r3, [r7, #8]
 8000b44:	3301      	adds	r3, #1
 8000b46:	60bb      	str	r3, [r7, #8]
    while (len > 0) {
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	2b00      	cmp	r3, #0
 8000b4c:	d1d4      	bne.n	8000af8 <SPI_ReceiveData+0xe>
        }
    }

}
 8000b4e:	bf00      	nop
 8000b50:	bf00      	nop
 8000b52:	3710      	adds	r7, #16
 8000b54:	46bd      	mov	sp, r7
 8000b56:	bd80      	pop	{r7, pc}

08000b58 <SPI_PeripheralControl>:
 * @return                  none
 * 
 * @note                    none
 * 
 */
void SPI_PeripheralControl(SPI_RegDef_t *pSPIx, uint8_t EnorDi) {
 8000b58:	b480      	push	{r7}
 8000b5a:	b083      	sub	sp, #12
 8000b5c:	af00      	add	r7, sp, #0
 8000b5e:	6078      	str	r0, [r7, #4]
 8000b60:	460b      	mov	r3, r1
 8000b62:	70fb      	strb	r3, [r7, #3]
    if (EnorDi) {
 8000b64:	78fb      	ldrb	r3, [r7, #3]
 8000b66:	2b00      	cmp	r3, #0
 8000b68:	d006      	beq.n	8000b78 <SPI_PeripheralControl+0x20>
        pSPIx->CR1 |= (1 << SPI_CR1_SPE) ;
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	681b      	ldr	r3, [r3, #0]
 8000b6e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	601a      	str	r2, [r3, #0]
    }
    else {
        pSPIx->CR1 &= ~(1 << SPI_CR1_SPE) ;
    }
}
 8000b76:	e005      	b.n	8000b84 <SPI_PeripheralControl+0x2c>
        pSPIx->CR1 &= ~(1 << SPI_CR1_SPE) ;
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	681b      	ldr	r3, [r3, #0]
 8000b7c:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	601a      	str	r2, [r3, #0]
}
 8000b84:	bf00      	nop
 8000b86:	370c      	adds	r7, #12
 8000b88:	46bd      	mov	sp, r7
 8000b8a:	bc80      	pop	{r7}
 8000b8c:	4770      	bx	lr

08000b8e <SPI_SSOEConfig>:
 * @return                  none
 * 
 * @note                    none
 * 
 */
void SPI_SSOEConfig(SPI_RegDef_t *pSPIx, uint8_t EnorDi) {
 8000b8e:	b480      	push	{r7}
 8000b90:	b083      	sub	sp, #12
 8000b92:	af00      	add	r7, sp, #0
 8000b94:	6078      	str	r0, [r7, #4]
 8000b96:	460b      	mov	r3, r1
 8000b98:	70fb      	strb	r3, [r7, #3]
    if (EnorDi == ENABLE) {
 8000b9a:	78fb      	ldrb	r3, [r7, #3]
 8000b9c:	2b01      	cmp	r3, #1
 8000b9e:	d106      	bne.n	8000bae <SPI_SSOEConfig+0x20>
        pSPIx->CR2 |= (1 << SPI_CR2_SSOE) ;
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	685b      	ldr	r3, [r3, #4]
 8000ba4:	f043 0204 	orr.w	r2, r3, #4
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	605a      	str	r2, [r3, #4]
    }
    else {
        pSPIx->CR2 &= ~(1 << SPI_CR2_SSOE) ;
    }
}
 8000bac:	e005      	b.n	8000bba <SPI_SSOEConfig+0x2c>
        pSPIx->CR2 &= ~(1 << SPI_CR2_SSOE) ;
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	685b      	ldr	r3, [r3, #4]
 8000bb2:	f023 0204 	bic.w	r2, r3, #4
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	605a      	str	r2, [r3, #4]
}
 8000bba:	bf00      	nop
 8000bbc:	370c      	adds	r7, #12
 8000bbe:	46bd      	mov	sp, r7
 8000bc0:	bc80      	pop	{r7}
 8000bc2:	4770      	bx	lr

08000bc4 <SPI_GetFlagStatus>:
 * 
 * @return uint8_t          0 or 1
 * 
 * @note                    none
 */
uint8_t SPI_GetFlagStatus(SPI_RegDef_t *pSPIx, uint32_t FlagName) {
 8000bc4:	b480      	push	{r7}
 8000bc6:	b083      	sub	sp, #12
 8000bc8:	af00      	add	r7, sp, #0
 8000bca:	6078      	str	r0, [r7, #4]
 8000bcc:	6039      	str	r1, [r7, #0]
    if (pSPIx->SR & FlagName) {
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	689a      	ldr	r2, [r3, #8]
 8000bd2:	683b      	ldr	r3, [r7, #0]
 8000bd4:	4013      	ands	r3, r2
 8000bd6:	2b00      	cmp	r3, #0
 8000bd8:	d001      	beq.n	8000bde <SPI_GetFlagStatus+0x1a>
        return FLAG_SET ;
 8000bda:	2301      	movs	r3, #1
 8000bdc:	e000      	b.n	8000be0 <SPI_GetFlagStatus+0x1c>
    }
    return FLAG_RESET ;
 8000bde:	2300      	movs	r3, #0
}
 8000be0:	4618      	mov	r0, r3
 8000be2:	370c      	adds	r7, #12
 8000be4:	46bd      	mov	sp, r7
 8000be6:	bc80      	pop	{r7}
 8000be8:	4770      	bx	lr
	...

08000bec <main>:
void SPI2_Inits(void) ;
void GPIO_ButtonInit(void) ;
void delay(void) ;
uint8_t SPI_VerifyResponse(uint8_t ackByte) ;

int main(void) {
 8000bec:	b580      	push	{r7, lr}
 8000bee:	b084      	sub	sp, #16
 8000bf0:	af00      	add	r7, sp, #0
	 * PC3  --> SPI2_MOSI
	 * PB10 --> SPI2_SCLK
	 * PB9  --> SPI2_NSS
	 * ALT function mode: 5
	 */
	uint8_t dummyWrite = 0xFF ;
 8000bf2:	23ff      	movs	r3, #255	; 0xff
 8000bf4:	737b      	strb	r3, [r7, #13]
	uint8_t dummyRead = 0xFF ;
 8000bf6:	23ff      	movs	r3, #255	; 0xff
 8000bf8:	733b      	strb	r3, [r7, #12]

    // Configure GPIO button
    GPIO_ButtonInit() ;
 8000bfa:	f000 f911 	bl	8000e20 <GPIO_ButtonInit>

    // Configure GPIO to behave as SPI2 pins
    SPI2_GPIOInits() ;
 8000bfe:	f000 f8b3 	bl	8000d68 <SPI2_GPIOInits>

    // Initialize SPI2 peripheral parameters
    SPI2_Inits() ;
 8000c02:	f000 f8e9 	bl	8000dd8 <SPI2_Inits>
     * Setting SSOE does NSS output enable.
     * The NSS pin is automatically managed by the hardware.
     * I.e., when SPE = 1, NSS will be pulled LOW,
     * and NSS pin will be HIGH when SPE = 0.
     */
    SPI_SSOEConfig(SPI2, ENABLE) ;
 8000c06:	2101      	movs	r1, #1
 8000c08:	4855      	ldr	r0, [pc, #340]	; (8000d60 <main+0x174>)
 8000c0a:	f7ff ffc0 	bl	8000b8e <SPI_SSOEConfig>

    while (1) {
        // Wait until a button press
        while (!GPIO_ReadFromInputPin(GPIOA, GPIO_PIN_NO_0)) ;
 8000c0e:	bf00      	nop
 8000c10:	2100      	movs	r1, #0
 8000c12:	4854      	ldr	r0, [pc, #336]	; (8000d64 <main+0x178>)
 8000c14:	f7ff fe06 	bl	8000824 <GPIO_ReadFromInputPin>
 8000c18:	4603      	mov	r3, r0
 8000c1a:	2b00      	cmp	r3, #0
 8000c1c:	d0f8      	beq.n	8000c10 <main+0x24>

        // Debounce button press with software delay for clean read
        delay() ;
 8000c1e:	f000 f91d 	bl	8000e5c <delay>

        // Enable the SPI2 peripheral
        SPI_PeripheralControl(SPI2, ENABLE) ;
 8000c22:	2101      	movs	r1, #1
 8000c24:	484e      	ldr	r0, [pc, #312]	; (8000d60 <main+0x174>)
 8000c26:	f7ff ff97 	bl	8000b58 <SPI_PeripheralControl>

        /**************************************************************/
        /*          * 1. CMD_LED_CTRL <pin_no_1>  	<value_1>         */
        /**************************************************************/

        uint8_t commandCode = COMMAND_LED_CTRL ;
 8000c2a:	2350      	movs	r3, #80	; 0x50
 8000c2c:	72fb      	strb	r3, [r7, #11]
        uint8_t ackByte ;
        uint8_t args[2] ;

        // Send command
        SPI_SendData(SPI2, &commandCode, 1) ;
 8000c2e:	f107 030b 	add.w	r3, r7, #11
 8000c32:	2201      	movs	r2, #1
 8000c34:	4619      	mov	r1, r3
 8000c36:	484a      	ldr	r0, [pc, #296]	; (8000d60 <main+0x174>)
 8000c38:	f7ff ff20 	bl	8000a7c <SPI_SendData>

        // Perform dummy read to clear RXNE
        SPI_ReceiveData(SPI2, &dummyRead, 1) ;
 8000c3c:	f107 030c 	add.w	r3, r7, #12
 8000c40:	2201      	movs	r2, #1
 8000c42:	4619      	mov	r1, r3
 8000c44:	4846      	ldr	r0, [pc, #280]	; (8000d60 <main+0x174>)
 8000c46:	f7ff ff50 	bl	8000aea <SPI_ReceiveData>

        // Send some dummy bits (1 byte) to fetch response from the peripheral
        SPI_SendData(SPI2, &dummyWrite, 1) ;
 8000c4a:	f107 030d 	add.w	r3, r7, #13
 8000c4e:	2201      	movs	r2, #1
 8000c50:	4619      	mov	r1, r3
 8000c52:	4843      	ldr	r0, [pc, #268]	; (8000d60 <main+0x174>)
 8000c54:	f7ff ff12 	bl	8000a7c <SPI_SendData>

        // Receive the ack byte received
        SPI_ReceiveData(SPI2, &ackByte, 1) ;
 8000c58:	f107 030a 	add.w	r3, r7, #10
 8000c5c:	2201      	movs	r2, #1
 8000c5e:	4619      	mov	r1, r3
 8000c60:	483f      	ldr	r0, [pc, #252]	; (8000d60 <main+0x174>)
 8000c62:	f7ff ff42 	bl	8000aea <SPI_ReceiveData>

        // Verify ack or nack
        if (SPI_VerifyResponse(ackByte)) {
 8000c66:	7abb      	ldrb	r3, [r7, #10]
 8000c68:	4618      	mov	r0, r3
 8000c6a:	f000 f90d 	bl	8000e88 <SPI_VerifyResponse>
 8000c6e:	4603      	mov	r3, r0
 8000c70:	2b00      	cmp	r3, #0
 8000c72:	d018      	beq.n	8000ca6 <main+0xba>
        	// Send arguments
        	args[0] = UNOR3_LED_PIN ;
 8000c74:	2309      	movs	r3, #9
 8000c76:	723b      	strb	r3, [r7, #8]
        	args[1] = LED_ON ;
 8000c78:	2301      	movs	r3, #1
 8000c7a:	727b      	strb	r3, [r7, #9]
        	SPI_SendData(SPI2, args, 2) ; /* 2 bytes sent */
 8000c7c:	f107 0308 	add.w	r3, r7, #8
 8000c80:	2202      	movs	r2, #2
 8000c82:	4619      	mov	r1, r3
 8000c84:	4836      	ldr	r0, [pc, #216]	; (8000d60 <main+0x174>)
 8000c86:	f7ff fef9 	bl	8000a7c <SPI_SendData>
			// Wait for BSY bit to reset  -> This will indicate that SPI is not busy in communication
			while (SPI_GetFlagStatus(SPI2, SPI_BSY_FLAG) == FLAG_SET) ;
 8000c8a:	bf00      	nop
 8000c8c:	2180      	movs	r1, #128	; 0x80
 8000c8e:	4834      	ldr	r0, [pc, #208]	; (8000d60 <main+0x174>)
 8000c90:	f7ff ff98 	bl	8000bc4 <SPI_GetFlagStatus>
 8000c94:	4603      	mov	r3, r0
 8000c96:	2b01      	cmp	r3, #1
 8000c98:	d0f8      	beq.n	8000c8c <main+0xa0>
			// Clear the OVR flag by reading DR and SR
			uint8_t temp __attribute__((unused)) = SPI2->DR ; /* temp is declared, but not referenced */
 8000c9a:	4b31      	ldr	r3, [pc, #196]	; (8000d60 <main+0x174>)
 8000c9c:	68db      	ldr	r3, [r3, #12]
 8000c9e:	73fb      	strb	r3, [r7, #15]
			temp = SPI2->SR ;
 8000ca0:	4b2f      	ldr	r3, [pc, #188]	; (8000d60 <main+0x174>)
 8000ca2:	689b      	ldr	r3, [r3, #8]
 8000ca4:	73fb      	strb	r3, [r7, #15]
        /*          2. CMD_SENSOR_READ <analog_pin_no_1				  */
        /**************************************************************/
       /*  */

        // Wait until a button press
        while (!GPIO_ReadFromInputPin(GPIOA, GPIO_PIN_NO_0)) ;
 8000ca6:	bf00      	nop
 8000ca8:	2100      	movs	r1, #0
 8000caa:	482e      	ldr	r0, [pc, #184]	; (8000d64 <main+0x178>)
 8000cac:	f7ff fdba 	bl	8000824 <GPIO_ReadFromInputPin>
 8000cb0:	4603      	mov	r3, r0
 8000cb2:	2b00      	cmp	r3, #0
 8000cb4:	d0f8      	beq.n	8000ca8 <main+0xbc>

        // Debounce button press with software delay for clean read
        delay() ;
 8000cb6:	f000 f8d1 	bl	8000e5c <delay>

        commandCode = COMMAND_SENSOR_READ ;
 8000cba:	2351      	movs	r3, #81	; 0x51
 8000cbc:	72fb      	strb	r3, [r7, #11]

        // Send command
        SPI_SendData(SPI2, &commandCode, 1) ;
 8000cbe:	f107 030b 	add.w	r3, r7, #11
 8000cc2:	2201      	movs	r2, #1
 8000cc4:	4619      	mov	r1, r3
 8000cc6:	4826      	ldr	r0, [pc, #152]	; (8000d60 <main+0x174>)
 8000cc8:	f7ff fed8 	bl	8000a7c <SPI_SendData>

        // Perform dummy read to clear RXNE
        SPI_ReceiveData(SPI2, &dummyRead, 1) ;
 8000ccc:	f107 030c 	add.w	r3, r7, #12
 8000cd0:	2201      	movs	r2, #1
 8000cd2:	4619      	mov	r1, r3
 8000cd4:	4822      	ldr	r0, [pc, #136]	; (8000d60 <main+0x174>)
 8000cd6:	f7ff ff08 	bl	8000aea <SPI_ReceiveData>

        // Send some dummy bits (1 byte) to fetch response from the peripheral
        SPI_SendData(SPI2, &dummyWrite, 1) ;
 8000cda:	f107 030d 	add.w	r3, r7, #13
 8000cde:	2201      	movs	r2, #1
 8000ce0:	4619      	mov	r1, r3
 8000ce2:	481f      	ldr	r0, [pc, #124]	; (8000d60 <main+0x174>)
 8000ce4:	f7ff feca 	bl	8000a7c <SPI_SendData>

        // Receive the ack byte received
        SPI_ReceiveData(SPI2, &ackByte, 1) ;
 8000ce8:	f107 030a 	add.w	r3, r7, #10
 8000cec:	2201      	movs	r2, #1
 8000cee:	4619      	mov	r1, r3
 8000cf0:	481b      	ldr	r0, [pc, #108]	; (8000d60 <main+0x174>)
 8000cf2:	f7ff fefa 	bl	8000aea <SPI_ReceiveData>

        // Verify ack or nack
        if (SPI_VerifyResponse(ackByte)) {
 8000cf6:	7abb      	ldrb	r3, [r7, #10]
 8000cf8:	4618      	mov	r0, r3
 8000cfa:	f000 f8c5 	bl	8000e88 <SPI_VerifyResponse>
 8000cfe:	4603      	mov	r3, r0
 8000d00:	2b00      	cmp	r3, #0
 8000d02:	d084      	beq.n	8000c0e <main+0x22>
        	// Send arguments
        	args[0] = UNOR3_ANALOG_PIN_NO_0 ;
 8000d04:	2300      	movs	r3, #0
 8000d06:	723b      	strb	r3, [r7, #8]

        	// Send arguments
        	SPI_SendData(SPI2, args, 1) ; /* 1 byte sent */
 8000d08:	f107 0308 	add.w	r3, r7, #8
 8000d0c:	2201      	movs	r2, #1
 8000d0e:	4619      	mov	r1, r3
 8000d10:	4813      	ldr	r0, [pc, #76]	; (8000d60 <main+0x174>)
 8000d12:	f7ff feb3 	bl	8000a7c <SPI_SendData>

			// Do a dummy read to clear off the RXNE
			SPI_ReceiveData(SPI2, &dummyRead, 1) ;
 8000d16:	f107 030c 	add.w	r3, r7, #12
 8000d1a:	2201      	movs	r2, #1
 8000d1c:	4619      	mov	r1, r3
 8000d1e:	4810      	ldr	r0, [pc, #64]	; (8000d60 <main+0x174>)
 8000d20:	f7ff fee3 	bl	8000aea <SPI_ReceiveData>

			// Insert delay so peripheral can have data ready
			delay();
 8000d24:	f000 f89a 	bl	8000e5c <delay>

			// Send some dummy bits (1 byte) to fetch response from the peripheral
			SPI_SendData(SPI2, &dummyWrite, 1) ;
 8000d28:	f107 030d 	add.w	r3, r7, #13
 8000d2c:	2201      	movs	r2, #1
 8000d2e:	4619      	mov	r1, r3
 8000d30:	480b      	ldr	r0, [pc, #44]	; (8000d60 <main+0x174>)
 8000d32:	f7ff fea3 	bl	8000a7c <SPI_SendData>

			uint8_t analogRead ;
			SPI_ReceiveData(SPI2, &analogRead, 1) ;
 8000d36:	1dfb      	adds	r3, r7, #7
 8000d38:	2201      	movs	r2, #1
 8000d3a:	4619      	mov	r1, r3
 8000d3c:	4808      	ldr	r0, [pc, #32]	; (8000d60 <main+0x174>)
 8000d3e:	f7ff fed4 	bl	8000aea <SPI_ReceiveData>

			// Wait for BSY bit to reset  -> This will indicate that SPI is not busy in communication
			while (SPI_GetFlagStatus(SPI2, SPI_BSY_FLAG) == FLAG_SET) ;
 8000d42:	bf00      	nop
 8000d44:	2180      	movs	r1, #128	; 0x80
 8000d46:	4806      	ldr	r0, [pc, #24]	; (8000d60 <main+0x174>)
 8000d48:	f7ff ff3c 	bl	8000bc4 <SPI_GetFlagStatus>
 8000d4c:	4603      	mov	r3, r0
 8000d4e:	2b01      	cmp	r3, #1
 8000d50:	d0f8      	beq.n	8000d44 <main+0x158>
			// Clear the OVR flag by reading DR and SR
			uint8_t temp __attribute__((unused)) = SPI2->DR ; /* temp is declared, but not referenced */
 8000d52:	4b03      	ldr	r3, [pc, #12]	; (8000d60 <main+0x174>)
 8000d54:	68db      	ldr	r3, [r3, #12]
 8000d56:	73bb      	strb	r3, [r7, #14]
			temp = SPI2->SR ;
 8000d58:	4b01      	ldr	r3, [pc, #4]	; (8000d60 <main+0x174>)
 8000d5a:	689b      	ldr	r3, [r3, #8]
 8000d5c:	73bb      	strb	r3, [r7, #14]
    while (1) {
 8000d5e:	e756      	b.n	8000c0e <main+0x22>
 8000d60:	40003800 	.word	0x40003800
 8000d64:	40020000 	.word	0x40020000

08000d68 <SPI2_GPIOInits>:
 * @return              none
 *
 * @note                none
 *
 */
void SPI2_GPIOInits(void) {
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	b084      	sub	sp, #16
 8000d6c:	af00      	add	r7, sp, #0
    /*
     * Configure the SPI pins
     */

    GPIO_Handle_t SPIPins ;
    memset(&SPIPins, 0, sizeof(SPIPins)) ;
 8000d6e:	1d3b      	adds	r3, r7, #4
 8000d70:	220c      	movs	r2, #12
 8000d72:	2100      	movs	r1, #0
 8000d74:	4618      	mov	r0, r3
 8000d76:	f000 f8e5 	bl	8000f44 <memset>

    SPIPins.pGPIOx = GPIOB ;
 8000d7a:	4b15      	ldr	r3, [pc, #84]	; (8000dd0 <SPI2_GPIOInits+0x68>)
 8000d7c:	607b      	str	r3, [r7, #4]
    SPIPins.GPIO_PinConfig.GPIO_PinMode         = GPIO_MODE_ALT_FUN ;
 8000d7e:	2302      	movs	r3, #2
 8000d80:	727b      	strb	r3, [r7, #9]
    SPIPins.GPIO_PinConfig.GPIO_PinSpeed        = GPIO_SPEED_FAST ;
 8000d82:	2302      	movs	r3, #2
 8000d84:	72bb      	strb	r3, [r7, #10]
    SPIPins.GPIO_PinConfig.GPIO_PinPuPdCtrl     = GPIO_NO_PUPD ;
 8000d86:	2300      	movs	r3, #0
 8000d88:	72fb      	strb	r3, [r7, #11]
    SPIPins.GPIO_PinConfig.GPIO_PinOPType       = GPIO_OP_TYPE_PP ;
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	733b      	strb	r3, [r7, #12]
    SPIPins.GPIO_PinConfig.GPIO_PinAltFunMode   = 5 ;
 8000d8e:	2305      	movs	r3, #5
 8000d90:	737b      	strb	r3, [r7, #13]
    /*
     * Configure the SPI2 pins
     */

    // NSS / NPS
    SPIPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_9 ;
 8000d92:	2309      	movs	r3, #9
 8000d94:	723b      	strb	r3, [r7, #8]
    GPIO_Init(&SPIPins) ;
 8000d96:	1d3b      	adds	r3, r7, #4
 8000d98:	4618      	mov	r0, r3
 8000d9a:	f7ff fb79 	bl	8000490 <GPIO_Init>

    // SCK
    SPIPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_10 ; /* PB13 did not work */
 8000d9e:	230a      	movs	r3, #10
 8000da0:	723b      	strb	r3, [r7, #8]
    GPIO_Init(&SPIPins) ;
 8000da2:	1d3b      	adds	r3, r7, #4
 8000da4:	4618      	mov	r0, r3
 8000da6:	f7ff fb73 	bl	8000490 <GPIO_Init>

    // MOSI / COPI
    SPIPins.pGPIOx = GPIOC ;
 8000daa:	4b0a      	ldr	r3, [pc, #40]	; (8000dd4 <SPI2_GPIOInits+0x6c>)
 8000dac:	607b      	str	r3, [r7, #4]
    SPIPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_3 ; /* PB15 did not work */
 8000dae:	2303      	movs	r3, #3
 8000db0:	723b      	strb	r3, [r7, #8]
    GPIO_Init(&SPIPins) ;
 8000db2:	1d3b      	adds	r3, r7, #4
 8000db4:	4618      	mov	r0, r3
 8000db6:	f7ff fb6b 	bl	8000490 <GPIO_Init>

    // MISO / CIPO
    SPIPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_2 ; /* PB15 did not work */
 8000dba:	2302      	movs	r3, #2
 8000dbc:	723b      	strb	r3, [r7, #8]
    GPIO_Init(&SPIPins) ;
 8000dbe:	1d3b      	adds	r3, r7, #4
 8000dc0:	4618      	mov	r0, r3
 8000dc2:	f7ff fb65 	bl	8000490 <GPIO_Init>
}
 8000dc6:	bf00      	nop
 8000dc8:	3710      	adds	r7, #16
 8000dca:	46bd      	mov	sp, r7
 8000dcc:	bd80      	pop	{r7, pc}
 8000dce:	bf00      	nop
 8000dd0:	40020400 	.word	0x40020400
 8000dd4:	40020800 	.word	0x40020800

08000dd8 <SPI2_Inits>:
 * @return              none
 *
 * @note                none
 *
 */
void SPI2_Inits(void) {
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	b084      	sub	sp, #16
 8000ddc:	af00      	add	r7, sp, #0
    SPI_Handle_t SPI2Handle ;
    memset(&SPI2Handle, 0, sizeof(SPI2Handle)) ;
 8000dde:	1d3b      	adds	r3, r7, #4
 8000de0:	220c      	movs	r2, #12
 8000de2:	2100      	movs	r1, #0
 8000de4:	4618      	mov	r0, r3
 8000de6:	f000 f8ad 	bl	8000f44 <memset>

    SPI2Handle.pSPIx = SPI2 ;
 8000dea:	4b0c      	ldr	r3, [pc, #48]	; (8000e1c <SPI2_Inits+0x44>)
 8000dec:	607b      	str	r3, [r7, #4]
    SPI2Handle.SPIConfig.SPI_DeviceMode     = SPI_DEVICE_MODE_CONTROLLER ;
 8000dee:	2301      	movs	r3, #1
 8000df0:	723b      	strb	r3, [r7, #8]
    SPI2Handle.SPIConfig.SPI_BusConfig      = SPI_BUS_CONFIG_FD ;
 8000df2:	2301      	movs	r3, #1
 8000df4:	727b      	strb	r3, [r7, #9]
    SPI2Handle.SPIConfig.SPI_SclkSpeed      = SPI_SCLK_SPEED_DIV8 ;                     /* Generates SCK of 2 MHz */
 8000df6:	2302      	movs	r3, #2
 8000df8:	72bb      	strb	r3, [r7, #10]
    SPI2Handle.SPIConfig.SPI_DFF            = SPI_DFF_8BITS ;
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	72fb      	strb	r3, [r7, #11]
    SPI2Handle.SPIConfig.SPI_CPOL           = SPI_CPOL_LOW ;
 8000dfe:	2300      	movs	r3, #0
 8000e00:	733b      	strb	r3, [r7, #12]
    SPI2Handle.SPIConfig.SPI_CPHA           = SPI_CPHA_LOW ;
 8000e02:	2300      	movs	r3, #0
 8000e04:	737b      	strb	r3, [r7, #13]
    SPI2Handle.SPIConfig.SPI_SSM            = SPI_SSM_DI ;                              /* Hardware slave management enabled for NSS pin */
 8000e06:	2300      	movs	r3, #0
 8000e08:	73bb      	strb	r3, [r7, #14]

    SPI_Init(&SPI2Handle) ;
 8000e0a:	1d3b      	adds	r3, r7, #4
 8000e0c:	4618      	mov	r0, r3
 8000e0e:	f7ff fdd5 	bl	80009bc <SPI_Init>
}
 8000e12:	bf00      	nop
 8000e14:	3710      	adds	r7, #16
 8000e16:	46bd      	mov	sp, r7
 8000e18:	bd80      	pop	{r7, pc}
 8000e1a:	bf00      	nop
 8000e1c:	40003800 	.word	0x40003800

08000e20 <GPIO_ButtonInit>:
 * @return              none
 *
 * @note                none
 *
 */
void GPIO_ButtonInit(void) {
 8000e20:	b580      	push	{r7, lr}
 8000e22:	b084      	sub	sp, #16
 8000e24:	af00      	add	r7, sp, #0
    GPIO_Handle_t GPIOHandle ;
    memset(&GPIOHandle, 0, sizeof(GPIOHandle)) ;
 8000e26:	1d3b      	adds	r3, r7, #4
 8000e28:	220c      	movs	r2, #12
 8000e2a:	2100      	movs	r1, #0
 8000e2c:	4618      	mov	r0, r3
 8000e2e:	f000 f889 	bl	8000f44 <memset>

    GPIOHandle.pGPIOx = GPIOA ;
 8000e32:	4b09      	ldr	r3, [pc, #36]	; (8000e58 <GPIO_ButtonInit+0x38>)
 8000e34:	607b      	str	r3, [r7, #4]
    GPIOHandle.GPIO_PinConfig.GPIO_PinNumber    = GPIO_PIN_NO_0 ;
 8000e36:	2300      	movs	r3, #0
 8000e38:	723b      	strb	r3, [r7, #8]
    GPIOHandle.GPIO_PinConfig.GPIO_PinMode      = GPIO_MODE_INPUT ;
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	727b      	strb	r3, [r7, #9]
    GPIOHandle.GPIO_PinConfig.GPIO_PinSpeed     = GPIO_SPEED_FAST ;
 8000e3e:	2302      	movs	r3, #2
 8000e40:	72bb      	strb	r3, [r7, #10]
    GPIOHandle.GPIO_PinConfig.GPIO_PinPuPdCtrl  = GPIO_NO_PUPD ;
 8000e42:	2300      	movs	r3, #0
 8000e44:	72fb      	strb	r3, [r7, #11]

    GPIO_Init(&GPIOHandle) ;
 8000e46:	1d3b      	adds	r3, r7, #4
 8000e48:	4618      	mov	r0, r3
 8000e4a:	f7ff fb21 	bl	8000490 <GPIO_Init>
}
 8000e4e:	bf00      	nop
 8000e50:	3710      	adds	r7, #16
 8000e52:	46bd      	mov	sp, r7
 8000e54:	bd80      	pop	{r7, pc}
 8000e56:	bf00      	nop
 8000e58:	40020000 	.word	0x40020000

08000e5c <delay>:
 * @return      		none
 *
 * @note        		none
 *
 */
void delay(void) {
 8000e5c:	b480      	push	{r7}
 8000e5e:	b083      	sub	sp, #12
 8000e60:	af00      	add	r7, sp, #0
    for (uint32_t i = 0 ; i < 500000/2 ; i++) ;
 8000e62:	2300      	movs	r3, #0
 8000e64:	607b      	str	r3, [r7, #4]
 8000e66:	e002      	b.n	8000e6e <delay+0x12>
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	3301      	adds	r3, #1
 8000e6c:	607b      	str	r3, [r7, #4]
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	4a04      	ldr	r2, [pc, #16]	; (8000e84 <delay+0x28>)
 8000e72:	4293      	cmp	r3, r2
 8000e74:	d9f8      	bls.n	8000e68 <delay+0xc>
}
 8000e76:	bf00      	nop
 8000e78:	bf00      	nop
 8000e7a:	370c      	adds	r7, #12
 8000e7c:	46bd      	mov	sp, r7
 8000e7e:	bc80      	pop	{r7}
 8000e80:	4770      	bx	lr
 8000e82:	bf00      	nop
 8000e84:	0003d08f 	.word	0x0003d08f

08000e88 <SPI_VerifyResponse>:
 *
 * @pre 				Controller sends message to peripheral
 * @post				Controller Receives message and gets either ack or nack
 * @param ackByte 		ack or nack
 */
uint8_t SPI_VerifyResponse(uint8_t ackByte) {
 8000e88:	b480      	push	{r7}
 8000e8a:	b083      	sub	sp, #12
 8000e8c:	af00      	add	r7, sp, #0
 8000e8e:	4603      	mov	r3, r0
 8000e90:	71fb      	strb	r3, [r7, #7]
	if (ackByte == 0xF5) {
 8000e92:	79fb      	ldrb	r3, [r7, #7]
 8000e94:	2bf5      	cmp	r3, #245	; 0xf5
 8000e96:	d101      	bne.n	8000e9c <SPI_VerifyResponse+0x14>
		// ack
		return 1 ;
 8000e98:	2301      	movs	r3, #1
 8000e9a:	e000      	b.n	8000e9e <SPI_VerifyResponse+0x16>
	}
	// nack
	return 0 ;
 8000e9c:	2300      	movs	r3, #0
}
 8000e9e:	4618      	mov	r0, r3
 8000ea0:	370c      	adds	r7, #12
 8000ea2:	46bd      	mov	sp, r7
 8000ea4:	bc80      	pop	{r7}
 8000ea6:	4770      	bx	lr

08000ea8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000ea8:	480d      	ldr	r0, [pc, #52]	; (8000ee0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000eaa:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000eac:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000eb0:	480c      	ldr	r0, [pc, #48]	; (8000ee4 <LoopForever+0x6>)
  ldr r1, =_edata
 8000eb2:	490d      	ldr	r1, [pc, #52]	; (8000ee8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000eb4:	4a0d      	ldr	r2, [pc, #52]	; (8000eec <LoopForever+0xe>)
  movs r3, #0
 8000eb6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000eb8:	e002      	b.n	8000ec0 <LoopCopyDataInit>

08000eba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000eba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ebc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ebe:	3304      	adds	r3, #4

08000ec0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ec0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ec2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ec4:	d3f9      	bcc.n	8000eba <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ec6:	4a0a      	ldr	r2, [pc, #40]	; (8000ef0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000ec8:	4c0a      	ldr	r4, [pc, #40]	; (8000ef4 <LoopForever+0x16>)
  movs r3, #0
 8000eca:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ecc:	e001      	b.n	8000ed2 <LoopFillZerobss>

08000ece <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ece:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ed0:	3204      	adds	r2, #4

08000ed2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ed2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ed4:	d3fb      	bcc.n	8000ece <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000ed6:	f000 f811 	bl	8000efc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000eda:	f7ff fe87 	bl	8000bec <main>

08000ede <LoopForever>:

LoopForever:
  b LoopForever
 8000ede:	e7fe      	b.n	8000ede <LoopForever>
  ldr   r0, =_estack
 8000ee0:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8000ee4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ee8:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000eec:	08000f74 	.word	0x08000f74
  ldr r2, =_sbss
 8000ef0:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000ef4:	2000001c 	.word	0x2000001c

08000ef8 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000ef8:	e7fe      	b.n	8000ef8 <ADC_IRQHandler>
	...

08000efc <__libc_init_array>:
 8000efc:	b570      	push	{r4, r5, r6, lr}
 8000efe:	4d0d      	ldr	r5, [pc, #52]	; (8000f34 <__libc_init_array+0x38>)
 8000f00:	4c0d      	ldr	r4, [pc, #52]	; (8000f38 <__libc_init_array+0x3c>)
 8000f02:	1b64      	subs	r4, r4, r5
 8000f04:	10a4      	asrs	r4, r4, #2
 8000f06:	2600      	movs	r6, #0
 8000f08:	42a6      	cmp	r6, r4
 8000f0a:	d109      	bne.n	8000f20 <__libc_init_array+0x24>
 8000f0c:	4d0b      	ldr	r5, [pc, #44]	; (8000f3c <__libc_init_array+0x40>)
 8000f0e:	4c0c      	ldr	r4, [pc, #48]	; (8000f40 <__libc_init_array+0x44>)
 8000f10:	f000 f820 	bl	8000f54 <_init>
 8000f14:	1b64      	subs	r4, r4, r5
 8000f16:	10a4      	asrs	r4, r4, #2
 8000f18:	2600      	movs	r6, #0
 8000f1a:	42a6      	cmp	r6, r4
 8000f1c:	d105      	bne.n	8000f2a <__libc_init_array+0x2e>
 8000f1e:	bd70      	pop	{r4, r5, r6, pc}
 8000f20:	f855 3b04 	ldr.w	r3, [r5], #4
 8000f24:	4798      	blx	r3
 8000f26:	3601      	adds	r6, #1
 8000f28:	e7ee      	b.n	8000f08 <__libc_init_array+0xc>
 8000f2a:	f855 3b04 	ldr.w	r3, [r5], #4
 8000f2e:	4798      	blx	r3
 8000f30:	3601      	adds	r6, #1
 8000f32:	e7f2      	b.n	8000f1a <__libc_init_array+0x1e>
 8000f34:	08000f6c 	.word	0x08000f6c
 8000f38:	08000f6c 	.word	0x08000f6c
 8000f3c:	08000f6c 	.word	0x08000f6c
 8000f40:	08000f70 	.word	0x08000f70

08000f44 <memset>:
 8000f44:	4402      	add	r2, r0
 8000f46:	4603      	mov	r3, r0
 8000f48:	4293      	cmp	r3, r2
 8000f4a:	d100      	bne.n	8000f4e <memset+0xa>
 8000f4c:	4770      	bx	lr
 8000f4e:	f803 1b01 	strb.w	r1, [r3], #1
 8000f52:	e7f9      	b.n	8000f48 <memset+0x4>

08000f54 <_init>:
 8000f54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000f56:	bf00      	nop
 8000f58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000f5a:	bc08      	pop	{r3}
 8000f5c:	469e      	mov	lr, r3
 8000f5e:	4770      	bx	lr

08000f60 <_fini>:
 8000f60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000f62:	bf00      	nop
 8000f64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000f66:	bc08      	pop	{r3}
 8000f68:	469e      	mov	lr, r3
 8000f6a:	4770      	bx	lr


stm32f4xx_drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002424  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000114  080025d4  080025d4  000125d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080026e8  080026e8  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  080026e8  080026e8  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  080026e8  080026e8  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080026e8  080026e8  000126e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080026ec  080026ec  000126ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080026f0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020070  2**0
                  CONTENTS
 10 .bss          000000dc  20000070  20000070  00020070  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000014c  2000014c  00020070  2**0
                  ALLOC
 12 .ARM.attributes 0000002a  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 13 .debug_info   000013d9  00000000  00000000  0002009a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000004ce  00000000  00000000  00021473  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000158  00000000  00000000  00021948  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000138  00000000  00000000  00021aa0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00002332  00000000  00000000  00021bd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00001717  00000000  00000000  00023f0a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0000a156  00000000  00000000  00025621  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0002f777  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00001094  00000000  00000000  0002f7c8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000070 	.word	0x20000070
 80001cc:	00000000 	.word	0x00000000
 80001d0:	080025bc 	.word	0x080025bc

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000074 	.word	0x20000074
 80001ec:	080025bc 	.word	0x080025bc

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <strlen>:
 8000290:	4603      	mov	r3, r0
 8000292:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000296:	2a00      	cmp	r2, #0
 8000298:	d1fb      	bne.n	8000292 <strlen+0x2>
 800029a:	1a18      	subs	r0, r3, r0
 800029c:	3801      	subs	r0, #1
 800029e:	4770      	bx	lr

080002a0 <GPIO_PeriClockControl>:
 * 
 * @return              none
 * 
 * @note                none
 */
void GPIO_PeriClockControl(GPIO_RegDef_t *pGPIOx, uint8_t EnorDi) {
 80002a0:	b480      	push	{r7}
 80002a2:	b083      	sub	sp, #12
 80002a4:	af00      	add	r7, sp, #0
 80002a6:	6078      	str	r0, [r7, #4]
 80002a8:	460b      	mov	r3, r1
 80002aa:	70fb      	strb	r3, [r7, #3]
    // If enabled,
    if (EnorDi == ENABLE) {
 80002ac:	78fb      	ldrb	r3, [r7, #3]
 80002ae:	2b01      	cmp	r3, #1
 80002b0:	f040 8095 	bne.w	80003de <GPIO_PeriClockControl+0x13e>
        // Check which GPIO and enable
        switch ((unsigned long int) pGPIOx) {
 80002b4:	687b      	ldr	r3, [r7, #4]
 80002b6:	4a8f      	ldr	r2, [pc, #572]	; (80004f4 <GPIO_PeriClockControl+0x254>)
 80002b8:	4293      	cmp	r3, r2
 80002ba:	f000 8089 	beq.w	80003d0 <GPIO_PeriClockControl+0x130>
 80002be:	4a8d      	ldr	r2, [pc, #564]	; (80004f4 <GPIO_PeriClockControl+0x254>)
 80002c0:	4293      	cmp	r3, r2
 80002c2:	f200 8136 	bhi.w	8000532 <GPIO_PeriClockControl+0x292>
 80002c6:	4a8c      	ldr	r2, [pc, #560]	; (80004f8 <GPIO_PeriClockControl+0x258>)
 80002c8:	4293      	cmp	r3, r2
 80002ca:	d07a      	beq.n	80003c2 <GPIO_PeriClockControl+0x122>
 80002cc:	4a8a      	ldr	r2, [pc, #552]	; (80004f8 <GPIO_PeriClockControl+0x258>)
 80002ce:	4293      	cmp	r3, r2
 80002d0:	f200 812f 	bhi.w	8000532 <GPIO_PeriClockControl+0x292>
 80002d4:	4a89      	ldr	r2, [pc, #548]	; (80004fc <GPIO_PeriClockControl+0x25c>)
 80002d6:	4293      	cmp	r3, r2
 80002d8:	d06c      	beq.n	80003b4 <GPIO_PeriClockControl+0x114>
 80002da:	4a88      	ldr	r2, [pc, #544]	; (80004fc <GPIO_PeriClockControl+0x25c>)
 80002dc:	4293      	cmp	r3, r2
 80002de:	f200 8128 	bhi.w	8000532 <GPIO_PeriClockControl+0x292>
 80002e2:	4a87      	ldr	r2, [pc, #540]	; (8000500 <GPIO_PeriClockControl+0x260>)
 80002e4:	4293      	cmp	r3, r2
 80002e6:	d05e      	beq.n	80003a6 <GPIO_PeriClockControl+0x106>
 80002e8:	4a85      	ldr	r2, [pc, #532]	; (8000500 <GPIO_PeriClockControl+0x260>)
 80002ea:	4293      	cmp	r3, r2
 80002ec:	f200 8121 	bhi.w	8000532 <GPIO_PeriClockControl+0x292>
 80002f0:	4a84      	ldr	r2, [pc, #528]	; (8000504 <GPIO_PeriClockControl+0x264>)
 80002f2:	4293      	cmp	r3, r2
 80002f4:	d050      	beq.n	8000398 <GPIO_PeriClockControl+0xf8>
 80002f6:	4a83      	ldr	r2, [pc, #524]	; (8000504 <GPIO_PeriClockControl+0x264>)
 80002f8:	4293      	cmp	r3, r2
 80002fa:	f200 811a 	bhi.w	8000532 <GPIO_PeriClockControl+0x292>
 80002fe:	4a82      	ldr	r2, [pc, #520]	; (8000508 <GPIO_PeriClockControl+0x268>)
 8000300:	4293      	cmp	r3, r2
 8000302:	d042      	beq.n	800038a <GPIO_PeriClockControl+0xea>
 8000304:	4a80      	ldr	r2, [pc, #512]	; (8000508 <GPIO_PeriClockControl+0x268>)
 8000306:	4293      	cmp	r3, r2
 8000308:	f200 8113 	bhi.w	8000532 <GPIO_PeriClockControl+0x292>
 800030c:	4a7f      	ldr	r2, [pc, #508]	; (800050c <GPIO_PeriClockControl+0x26c>)
 800030e:	4293      	cmp	r3, r2
 8000310:	d034      	beq.n	800037c <GPIO_PeriClockControl+0xdc>
 8000312:	4a7e      	ldr	r2, [pc, #504]	; (800050c <GPIO_PeriClockControl+0x26c>)
 8000314:	4293      	cmp	r3, r2
 8000316:	f200 810c 	bhi.w	8000532 <GPIO_PeriClockControl+0x292>
 800031a:	4a7d      	ldr	r2, [pc, #500]	; (8000510 <GPIO_PeriClockControl+0x270>)
 800031c:	4293      	cmp	r3, r2
 800031e:	d026      	beq.n	800036e <GPIO_PeriClockControl+0xce>
 8000320:	4a7b      	ldr	r2, [pc, #492]	; (8000510 <GPIO_PeriClockControl+0x270>)
 8000322:	4293      	cmp	r3, r2
 8000324:	f200 8105 	bhi.w	8000532 <GPIO_PeriClockControl+0x292>
 8000328:	4a7a      	ldr	r2, [pc, #488]	; (8000514 <GPIO_PeriClockControl+0x274>)
 800032a:	4293      	cmp	r3, r2
 800032c:	d018      	beq.n	8000360 <GPIO_PeriClockControl+0xc0>
 800032e:	4a79      	ldr	r2, [pc, #484]	; (8000514 <GPIO_PeriClockControl+0x274>)
 8000330:	4293      	cmp	r3, r2
 8000332:	f200 80fe 	bhi.w	8000532 <GPIO_PeriClockControl+0x292>
 8000336:	4a78      	ldr	r2, [pc, #480]	; (8000518 <GPIO_PeriClockControl+0x278>)
 8000338:	4293      	cmp	r3, r2
 800033a:	d003      	beq.n	8000344 <GPIO_PeriClockControl+0xa4>
 800033c:	4a77      	ldr	r2, [pc, #476]	; (800051c <GPIO_PeriClockControl+0x27c>)
 800033e:	4293      	cmp	r3, r2
 8000340:	d007      	beq.n	8000352 <GPIO_PeriClockControl+0xb2>
                case GPIOG_BASE_ADDR:       GPIOG_PCLK_EN() ;       break ;
                case GPIOH_BASE_ADDR:       GPIOH_PCLK_EN() ;       break ;
                case GPIOI_BASE_ADDR:       GPIOI_PCLK_EN() ;       break ;
                case GPIOJ_BASE_ADDR:       GPIOJ_PCLK_EN() ;       break ;
                case GPIOK_BASE_ADDR:       GPIOK_PCLK_EN() ;       break ;
                default:                    return ;                break ;         // TODO: return error or cause a user fault
 8000342:	e0f6      	b.n	8000532 <GPIO_PeriClockControl+0x292>
                case GPIOA_BASE_ADDR:       GPIOA_PCLK_EN() ;       break ;
 8000344:	4b76      	ldr	r3, [pc, #472]	; (8000520 <GPIO_PeriClockControl+0x280>)
 8000346:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000348:	4a75      	ldr	r2, [pc, #468]	; (8000520 <GPIO_PeriClockControl+0x280>)
 800034a:	f043 0301 	orr.w	r3, r3, #1
 800034e:	6313      	str	r3, [r2, #48]	; 0x30
 8000350:	e0f2      	b.n	8000538 <GPIO_PeriClockControl+0x298>
                case GPIOB_BASE_ADDR:       GPIOB_PCLK_EN() ;       break ;
 8000352:	4b73      	ldr	r3, [pc, #460]	; (8000520 <GPIO_PeriClockControl+0x280>)
 8000354:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000356:	4a72      	ldr	r2, [pc, #456]	; (8000520 <GPIO_PeriClockControl+0x280>)
 8000358:	f043 0302 	orr.w	r3, r3, #2
 800035c:	6313      	str	r3, [r2, #48]	; 0x30
 800035e:	e0eb      	b.n	8000538 <GPIO_PeriClockControl+0x298>
                case GPIOC_BASE_ADDR:       GPIOC_PCLK_EN() ;       break ;
 8000360:	4b6f      	ldr	r3, [pc, #444]	; (8000520 <GPIO_PeriClockControl+0x280>)
 8000362:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000364:	4a6e      	ldr	r2, [pc, #440]	; (8000520 <GPIO_PeriClockControl+0x280>)
 8000366:	f043 0304 	orr.w	r3, r3, #4
 800036a:	6313      	str	r3, [r2, #48]	; 0x30
 800036c:	e0e4      	b.n	8000538 <GPIO_PeriClockControl+0x298>
                case GPIOD_BASE_ADDR:       GPIOD_PCLK_EN() ;       break ;
 800036e:	4b6c      	ldr	r3, [pc, #432]	; (8000520 <GPIO_PeriClockControl+0x280>)
 8000370:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000372:	4a6b      	ldr	r2, [pc, #428]	; (8000520 <GPIO_PeriClockControl+0x280>)
 8000374:	f043 0308 	orr.w	r3, r3, #8
 8000378:	6313      	str	r3, [r2, #48]	; 0x30
 800037a:	e0dd      	b.n	8000538 <GPIO_PeriClockControl+0x298>
                case GPIOE_BASE_ADDR:       GPIOE_PCLK_EN() ;       break ;
 800037c:	4b68      	ldr	r3, [pc, #416]	; (8000520 <GPIO_PeriClockControl+0x280>)
 800037e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000380:	4a67      	ldr	r2, [pc, #412]	; (8000520 <GPIO_PeriClockControl+0x280>)
 8000382:	f043 0310 	orr.w	r3, r3, #16
 8000386:	6313      	str	r3, [r2, #48]	; 0x30
 8000388:	e0d6      	b.n	8000538 <GPIO_PeriClockControl+0x298>
                case GPIOF_BASE_ADDR:       GPIOF_PCLK_EN() ;       break ;
 800038a:	4b65      	ldr	r3, [pc, #404]	; (8000520 <GPIO_PeriClockControl+0x280>)
 800038c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800038e:	4a64      	ldr	r2, [pc, #400]	; (8000520 <GPIO_PeriClockControl+0x280>)
 8000390:	f043 0320 	orr.w	r3, r3, #32
 8000394:	6313      	str	r3, [r2, #48]	; 0x30
 8000396:	e0cf      	b.n	8000538 <GPIO_PeriClockControl+0x298>
                case GPIOG_BASE_ADDR:       GPIOG_PCLK_EN() ;       break ;
 8000398:	4b61      	ldr	r3, [pc, #388]	; (8000520 <GPIO_PeriClockControl+0x280>)
 800039a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800039c:	4a60      	ldr	r2, [pc, #384]	; (8000520 <GPIO_PeriClockControl+0x280>)
 800039e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80003a2:	6313      	str	r3, [r2, #48]	; 0x30
 80003a4:	e0c8      	b.n	8000538 <GPIO_PeriClockControl+0x298>
                case GPIOH_BASE_ADDR:       GPIOH_PCLK_EN() ;       break ;
 80003a6:	4b5e      	ldr	r3, [pc, #376]	; (8000520 <GPIO_PeriClockControl+0x280>)
 80003a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003aa:	4a5d      	ldr	r2, [pc, #372]	; (8000520 <GPIO_PeriClockControl+0x280>)
 80003ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80003b0:	6313      	str	r3, [r2, #48]	; 0x30
 80003b2:	e0c1      	b.n	8000538 <GPIO_PeriClockControl+0x298>
                case GPIOI_BASE_ADDR:       GPIOI_PCLK_EN() ;       break ;
 80003b4:	4b5a      	ldr	r3, [pc, #360]	; (8000520 <GPIO_PeriClockControl+0x280>)
 80003b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003b8:	4a59      	ldr	r2, [pc, #356]	; (8000520 <GPIO_PeriClockControl+0x280>)
 80003ba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80003be:	6313      	str	r3, [r2, #48]	; 0x30
 80003c0:	e0ba      	b.n	8000538 <GPIO_PeriClockControl+0x298>
                case GPIOJ_BASE_ADDR:       GPIOJ_PCLK_EN() ;       break ;
 80003c2:	4b57      	ldr	r3, [pc, #348]	; (8000520 <GPIO_PeriClockControl+0x280>)
 80003c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003c6:	4a56      	ldr	r2, [pc, #344]	; (8000520 <GPIO_PeriClockControl+0x280>)
 80003c8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80003cc:	6313      	str	r3, [r2, #48]	; 0x30
 80003ce:	e0b3      	b.n	8000538 <GPIO_PeriClockControl+0x298>
                case GPIOK_BASE_ADDR:       GPIOK_PCLK_EN() ;       break ;
 80003d0:	4b53      	ldr	r3, [pc, #332]	; (8000520 <GPIO_PeriClockControl+0x280>)
 80003d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003d4:	4a52      	ldr	r2, [pc, #328]	; (8000520 <GPIO_PeriClockControl+0x280>)
 80003d6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80003da:	6313      	str	r3, [r2, #48]	; 0x30
 80003dc:	e0ac      	b.n	8000538 <GPIO_PeriClockControl+0x298>
        }
    }
    else {
        // Disable the GPIO otherwise
        switch ((unsigned long int) pGPIOx) {
 80003de:	687b      	ldr	r3, [r7, #4]
 80003e0:	4a44      	ldr	r2, [pc, #272]	; (80004f4 <GPIO_PeriClockControl+0x254>)
 80003e2:	4293      	cmp	r3, r2
 80003e4:	f000 809e 	beq.w	8000524 <GPIO_PeriClockControl+0x284>
 80003e8:	4a42      	ldr	r2, [pc, #264]	; (80004f4 <GPIO_PeriClockControl+0x254>)
 80003ea:	4293      	cmp	r3, r2
 80003ec:	f200 80a3 	bhi.w	8000536 <GPIO_PeriClockControl+0x296>
 80003f0:	4a41      	ldr	r2, [pc, #260]	; (80004f8 <GPIO_PeriClockControl+0x258>)
 80003f2:	4293      	cmp	r3, r2
 80003f4:	d077      	beq.n	80004e6 <GPIO_PeriClockControl+0x246>
 80003f6:	4a40      	ldr	r2, [pc, #256]	; (80004f8 <GPIO_PeriClockControl+0x258>)
 80003f8:	4293      	cmp	r3, r2
 80003fa:	f200 809c 	bhi.w	8000536 <GPIO_PeriClockControl+0x296>
 80003fe:	4a3f      	ldr	r2, [pc, #252]	; (80004fc <GPIO_PeriClockControl+0x25c>)
 8000400:	4293      	cmp	r3, r2
 8000402:	d069      	beq.n	80004d8 <GPIO_PeriClockControl+0x238>
 8000404:	4a3d      	ldr	r2, [pc, #244]	; (80004fc <GPIO_PeriClockControl+0x25c>)
 8000406:	4293      	cmp	r3, r2
 8000408:	f200 8095 	bhi.w	8000536 <GPIO_PeriClockControl+0x296>
 800040c:	4a3c      	ldr	r2, [pc, #240]	; (8000500 <GPIO_PeriClockControl+0x260>)
 800040e:	4293      	cmp	r3, r2
 8000410:	d05b      	beq.n	80004ca <GPIO_PeriClockControl+0x22a>
 8000412:	4a3b      	ldr	r2, [pc, #236]	; (8000500 <GPIO_PeriClockControl+0x260>)
 8000414:	4293      	cmp	r3, r2
 8000416:	f200 808e 	bhi.w	8000536 <GPIO_PeriClockControl+0x296>
 800041a:	4a3a      	ldr	r2, [pc, #232]	; (8000504 <GPIO_PeriClockControl+0x264>)
 800041c:	4293      	cmp	r3, r2
 800041e:	d04d      	beq.n	80004bc <GPIO_PeriClockControl+0x21c>
 8000420:	4a38      	ldr	r2, [pc, #224]	; (8000504 <GPIO_PeriClockControl+0x264>)
 8000422:	4293      	cmp	r3, r2
 8000424:	f200 8087 	bhi.w	8000536 <GPIO_PeriClockControl+0x296>
 8000428:	4a37      	ldr	r2, [pc, #220]	; (8000508 <GPIO_PeriClockControl+0x268>)
 800042a:	4293      	cmp	r3, r2
 800042c:	d03f      	beq.n	80004ae <GPIO_PeriClockControl+0x20e>
 800042e:	4a36      	ldr	r2, [pc, #216]	; (8000508 <GPIO_PeriClockControl+0x268>)
 8000430:	4293      	cmp	r3, r2
 8000432:	f200 8080 	bhi.w	8000536 <GPIO_PeriClockControl+0x296>
 8000436:	4a35      	ldr	r2, [pc, #212]	; (800050c <GPIO_PeriClockControl+0x26c>)
 8000438:	4293      	cmp	r3, r2
 800043a:	d031      	beq.n	80004a0 <GPIO_PeriClockControl+0x200>
 800043c:	4a33      	ldr	r2, [pc, #204]	; (800050c <GPIO_PeriClockControl+0x26c>)
 800043e:	4293      	cmp	r3, r2
 8000440:	d879      	bhi.n	8000536 <GPIO_PeriClockControl+0x296>
 8000442:	4a33      	ldr	r2, [pc, #204]	; (8000510 <GPIO_PeriClockControl+0x270>)
 8000444:	4293      	cmp	r3, r2
 8000446:	d024      	beq.n	8000492 <GPIO_PeriClockControl+0x1f2>
 8000448:	4a31      	ldr	r2, [pc, #196]	; (8000510 <GPIO_PeriClockControl+0x270>)
 800044a:	4293      	cmp	r3, r2
 800044c:	d873      	bhi.n	8000536 <GPIO_PeriClockControl+0x296>
 800044e:	4a31      	ldr	r2, [pc, #196]	; (8000514 <GPIO_PeriClockControl+0x274>)
 8000450:	4293      	cmp	r3, r2
 8000452:	d017      	beq.n	8000484 <GPIO_PeriClockControl+0x1e4>
 8000454:	4a2f      	ldr	r2, [pc, #188]	; (8000514 <GPIO_PeriClockControl+0x274>)
 8000456:	4293      	cmp	r3, r2
 8000458:	d86d      	bhi.n	8000536 <GPIO_PeriClockControl+0x296>
 800045a:	4a2f      	ldr	r2, [pc, #188]	; (8000518 <GPIO_PeriClockControl+0x278>)
 800045c:	4293      	cmp	r3, r2
 800045e:	d003      	beq.n	8000468 <GPIO_PeriClockControl+0x1c8>
 8000460:	4a2e      	ldr	r2, [pc, #184]	; (800051c <GPIO_PeriClockControl+0x27c>)
 8000462:	4293      	cmp	r3, r2
 8000464:	d007      	beq.n	8000476 <GPIO_PeriClockControl+0x1d6>
                case GPIOG_BASE_ADDR:       GPIOG_PCLK_DI() ;       break ;
                case GPIOH_BASE_ADDR:       GPIOH_PCLK_DI() ;       break ;
                case GPIOI_BASE_ADDR:       GPIOI_PCLK_DI() ;       break ;
                case GPIOJ_BASE_ADDR:       GPIOJ_PCLK_DI() ;       break ;
                case GPIOK_BASE_ADDR:       GPIOK_PCLK_DI() ;       break ;
                default:                    return ;                break ;         // TODO: return error or cause a user fault
 8000466:	e066      	b.n	8000536 <GPIO_PeriClockControl+0x296>
                case GPIOA_BASE_ADDR:       GPIOA_PCLK_DI() ;       break ;
 8000468:	4b2d      	ldr	r3, [pc, #180]	; (8000520 <GPIO_PeriClockControl+0x280>)
 800046a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800046c:	4a2c      	ldr	r2, [pc, #176]	; (8000520 <GPIO_PeriClockControl+0x280>)
 800046e:	f023 0301 	bic.w	r3, r3, #1
 8000472:	6313      	str	r3, [r2, #48]	; 0x30
 8000474:	e060      	b.n	8000538 <GPIO_PeriClockControl+0x298>
                case GPIOB_BASE_ADDR:       GPIOB_PCLK_DI() ;       break ;
 8000476:	4b2a      	ldr	r3, [pc, #168]	; (8000520 <GPIO_PeriClockControl+0x280>)
 8000478:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800047a:	4a29      	ldr	r2, [pc, #164]	; (8000520 <GPIO_PeriClockControl+0x280>)
 800047c:	f023 0302 	bic.w	r3, r3, #2
 8000480:	6313      	str	r3, [r2, #48]	; 0x30
 8000482:	e059      	b.n	8000538 <GPIO_PeriClockControl+0x298>
                case GPIOC_BASE_ADDR:       GPIOC_PCLK_DI() ;       break ;
 8000484:	4b26      	ldr	r3, [pc, #152]	; (8000520 <GPIO_PeriClockControl+0x280>)
 8000486:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000488:	4a25      	ldr	r2, [pc, #148]	; (8000520 <GPIO_PeriClockControl+0x280>)
 800048a:	f023 0304 	bic.w	r3, r3, #4
 800048e:	6313      	str	r3, [r2, #48]	; 0x30
 8000490:	e052      	b.n	8000538 <GPIO_PeriClockControl+0x298>
                case GPIOD_BASE_ADDR:       GPIOD_PCLK_DI() ;       break ;
 8000492:	4b23      	ldr	r3, [pc, #140]	; (8000520 <GPIO_PeriClockControl+0x280>)
 8000494:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000496:	4a22      	ldr	r2, [pc, #136]	; (8000520 <GPIO_PeriClockControl+0x280>)
 8000498:	f023 0308 	bic.w	r3, r3, #8
 800049c:	6313      	str	r3, [r2, #48]	; 0x30
 800049e:	e04b      	b.n	8000538 <GPIO_PeriClockControl+0x298>
                case GPIOE_BASE_ADDR:       GPIOE_PCLK_DI() ;       break ;
 80004a0:	4b1f      	ldr	r3, [pc, #124]	; (8000520 <GPIO_PeriClockControl+0x280>)
 80004a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004a4:	4a1e      	ldr	r2, [pc, #120]	; (8000520 <GPIO_PeriClockControl+0x280>)
 80004a6:	f023 0310 	bic.w	r3, r3, #16
 80004aa:	6313      	str	r3, [r2, #48]	; 0x30
 80004ac:	e044      	b.n	8000538 <GPIO_PeriClockControl+0x298>
                case GPIOF_BASE_ADDR:       GPIOF_PCLK_DI() ;       break ;
 80004ae:	4b1c      	ldr	r3, [pc, #112]	; (8000520 <GPIO_PeriClockControl+0x280>)
 80004b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004b2:	4a1b      	ldr	r2, [pc, #108]	; (8000520 <GPIO_PeriClockControl+0x280>)
 80004b4:	f023 0320 	bic.w	r3, r3, #32
 80004b8:	6313      	str	r3, [r2, #48]	; 0x30
 80004ba:	e03d      	b.n	8000538 <GPIO_PeriClockControl+0x298>
                case GPIOG_BASE_ADDR:       GPIOG_PCLK_DI() ;       break ;
 80004bc:	4b18      	ldr	r3, [pc, #96]	; (8000520 <GPIO_PeriClockControl+0x280>)
 80004be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004c0:	4a17      	ldr	r2, [pc, #92]	; (8000520 <GPIO_PeriClockControl+0x280>)
 80004c2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80004c6:	6313      	str	r3, [r2, #48]	; 0x30
 80004c8:	e036      	b.n	8000538 <GPIO_PeriClockControl+0x298>
                case GPIOH_BASE_ADDR:       GPIOH_PCLK_DI() ;       break ;
 80004ca:	4b15      	ldr	r3, [pc, #84]	; (8000520 <GPIO_PeriClockControl+0x280>)
 80004cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004ce:	4a14      	ldr	r2, [pc, #80]	; (8000520 <GPIO_PeriClockControl+0x280>)
 80004d0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80004d4:	6313      	str	r3, [r2, #48]	; 0x30
 80004d6:	e02f      	b.n	8000538 <GPIO_PeriClockControl+0x298>
                case GPIOI_BASE_ADDR:       GPIOI_PCLK_DI() ;       break ;
 80004d8:	4b11      	ldr	r3, [pc, #68]	; (8000520 <GPIO_PeriClockControl+0x280>)
 80004da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004dc:	4a10      	ldr	r2, [pc, #64]	; (8000520 <GPIO_PeriClockControl+0x280>)
 80004de:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80004e2:	6313      	str	r3, [r2, #48]	; 0x30
 80004e4:	e028      	b.n	8000538 <GPIO_PeriClockControl+0x298>
                case GPIOJ_BASE_ADDR:       GPIOJ_PCLK_DI() ;       break ;
 80004e6:	4b0e      	ldr	r3, [pc, #56]	; (8000520 <GPIO_PeriClockControl+0x280>)
 80004e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004ea:	4a0d      	ldr	r2, [pc, #52]	; (8000520 <GPIO_PeriClockControl+0x280>)
 80004ec:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80004f0:	6313      	str	r3, [r2, #48]	; 0x30
 80004f2:	e021      	b.n	8000538 <GPIO_PeriClockControl+0x298>
 80004f4:	40022800 	.word	0x40022800
 80004f8:	40022400 	.word	0x40022400
 80004fc:	40022000 	.word	0x40022000
 8000500:	40021c00 	.word	0x40021c00
 8000504:	40021800 	.word	0x40021800
 8000508:	40021400 	.word	0x40021400
 800050c:	40021000 	.word	0x40021000
 8000510:	40020c00 	.word	0x40020c00
 8000514:	40020800 	.word	0x40020800
 8000518:	40020000 	.word	0x40020000
 800051c:	40020400 	.word	0x40020400
 8000520:	40023800 	.word	0x40023800
                case GPIOK_BASE_ADDR:       GPIOK_PCLK_DI() ;       break ;
 8000524:	4b06      	ldr	r3, [pc, #24]	; (8000540 <GPIO_PeriClockControl+0x2a0>)
 8000526:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000528:	4a05      	ldr	r2, [pc, #20]	; (8000540 <GPIO_PeriClockControl+0x2a0>)
 800052a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800052e:	6313      	str	r3, [r2, #48]	; 0x30
 8000530:	e002      	b.n	8000538 <GPIO_PeriClockControl+0x298>
                default:                    return ;                break ;         // TODO: return error or cause a user fault
 8000532:	bf00      	nop
 8000534:	e000      	b.n	8000538 <GPIO_PeriClockControl+0x298>
                default:                    return ;                break ;         // TODO: return error or cause a user fault
 8000536:	bf00      	nop
        }
    }
}
 8000538:	370c      	adds	r7, #12
 800053a:	46bd      	mov	sp, r7
 800053c:	bc80      	pop	{r7}
 800053e:	4770      	bx	lr
 8000540:	40023800 	.word	0x40023800

08000544 <GPIO_Init>:
 *                                          by that amount. This gives us a left shift of 8, landing us
 *                                          on bit 8 of the high reg, which is the lsb of pin 10's four
 *                                          bit fields!
 *                                      
 */
void GPIO_Init(GPIO_Handle_t *pGPIO_Handle) {
 8000544:	b580      	push	{r7, lr}
 8000546:	b086      	sub	sp, #24
 8000548:	af00      	add	r7, sp, #0
 800054a:	6078      	str	r0, [r7, #4]
    // 0. Enable the GPIO peripheral clock
    GPIO_PeriClockControl(pGPIO_Handle->pGPIOx, ENABLE) ;
 800054c:	687b      	ldr	r3, [r7, #4]
 800054e:	681b      	ldr	r3, [r3, #0]
 8000550:	2101      	movs	r1, #1
 8000552:	4618      	mov	r0, r3
 8000554:	f7ff fea4 	bl	80002a0 <GPIO_PeriClockControl>
    
    // 1. Configure the mode of GPIO pin
    uint32_t temp = 0 ;                                                                                             // Temporary register
 8000558:	2300      	movs	r3, #0
 800055a:	617b      	str	r3, [r7, #20]
    if (pGPIO_Handle->GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_ANALOG) {
 800055c:	687b      	ldr	r3, [r7, #4]
 800055e:	795b      	ldrb	r3, [r3, #5]
 8000560:	2b03      	cmp	r3, #3
 8000562:	d820      	bhi.n	80005a6 <GPIO_Init+0x62>
        // The non-interrupt mode
        temp = (pGPIO_Handle->GPIO_PinConfig.GPIO_PinMode << (2 * pGPIO_Handle->GPIO_PinConfig.GPIO_PinNumber)) ;
 8000564:	687b      	ldr	r3, [r7, #4]
 8000566:	795b      	ldrb	r3, [r3, #5]
 8000568:	461a      	mov	r2, r3
 800056a:	687b      	ldr	r3, [r7, #4]
 800056c:	791b      	ldrb	r3, [r3, #4]
 800056e:	005b      	lsls	r3, r3, #1
 8000570:	fa02 f303 	lsl.w	r3, r2, r3
 8000574:	617b      	str	r3, [r7, #20]
        pGPIO_Handle->pGPIOx->MODER &= ~(0x3 << 2 * (pGPIO_Handle->GPIO_PinConfig.GPIO_PinNumber)) ;                // Clear 2 bit fields
 8000576:	687b      	ldr	r3, [r7, #4]
 8000578:	681b      	ldr	r3, [r3, #0]
 800057a:	681a      	ldr	r2, [r3, #0]
 800057c:	687b      	ldr	r3, [r7, #4]
 800057e:	791b      	ldrb	r3, [r3, #4]
 8000580:	005b      	lsls	r3, r3, #1
 8000582:	2103      	movs	r1, #3
 8000584:	fa01 f303 	lsl.w	r3, r1, r3
 8000588:	43db      	mvns	r3, r3
 800058a:	4619      	mov	r1, r3
 800058c:	687b      	ldr	r3, [r7, #4]
 800058e:	681b      	ldr	r3, [r3, #0]
 8000590:	400a      	ands	r2, r1
 8000592:	601a      	str	r2, [r3, #0]
        pGPIO_Handle->pGPIOx->MODER |= temp ;                                                                       // Set
 8000594:	687b      	ldr	r3, [r7, #4]
 8000596:	681b      	ldr	r3, [r3, #0]
 8000598:	6819      	ldr	r1, [r3, #0]
 800059a:	687b      	ldr	r3, [r7, #4]
 800059c:	681b      	ldr	r3, [r3, #0]
 800059e:	697a      	ldr	r2, [r7, #20]
 80005a0:	430a      	orrs	r2, r1
 80005a2:	601a      	str	r2, [r3, #0]
 80005a4:	e0f1      	b.n	800078a <GPIO_Init+0x246>
    }
    else {
        // Interrupt mode
        uint8_t bitFieldOffset = pGPIO_Handle->GPIO_PinConfig.GPIO_PinNumber ;
 80005a6:	687b      	ldr	r3, [r7, #4]
 80005a8:	791b      	ldrb	r3, [r3, #4]
 80005aa:	74fb      	strb	r3, [r7, #19]
        switch (pGPIO_Handle->GPIO_PinConfig.GPIO_PinMode) {
 80005ac:	687b      	ldr	r3, [r7, #4]
 80005ae:	795b      	ldrb	r3, [r3, #5]
 80005b0:	2b06      	cmp	r3, #6
 80005b2:	d033      	beq.n	800061c <GPIO_Init+0xd8>
 80005b4:	2b06      	cmp	r3, #6
 80005b6:	f300 8184 	bgt.w	80008c2 <GPIO_Init+0x37e>
 80005ba:	2b04      	cmp	r3, #4
 80005bc:	d002      	beq.n	80005c4 <GPIO_Init+0x80>
 80005be:	2b05      	cmp	r3, #5
 80005c0:	d016      	beq.n	80005f0 <GPIO_Init+0xac>
                // 1. Configure the FTSR and RTSR
                EXTI->FTSR |= (1 << bitFieldOffset) ;
                EXTI->RTSR |= (1 << bitFieldOffset) ;
                break ;
            default:
                return ;
 80005c2:	e17e      	b.n	80008c2 <GPIO_Init+0x37e>
                EXTI->FTSR |= (1 << bitFieldOffset) ;
 80005c4:	4b4a      	ldr	r3, [pc, #296]	; (80006f0 <GPIO_Init+0x1ac>)
 80005c6:	68db      	ldr	r3, [r3, #12]
 80005c8:	7cfa      	ldrb	r2, [r7, #19]
 80005ca:	2101      	movs	r1, #1
 80005cc:	fa01 f202 	lsl.w	r2, r1, r2
 80005d0:	4611      	mov	r1, r2
 80005d2:	4a47      	ldr	r2, [pc, #284]	; (80006f0 <GPIO_Init+0x1ac>)
 80005d4:	430b      	orrs	r3, r1
 80005d6:	60d3      	str	r3, [r2, #12]
                EXTI->RTSR &= ~(1 << bitFieldOffset) ;
 80005d8:	4b45      	ldr	r3, [pc, #276]	; (80006f0 <GPIO_Init+0x1ac>)
 80005da:	689b      	ldr	r3, [r3, #8]
 80005dc:	7cfa      	ldrb	r2, [r7, #19]
 80005de:	2101      	movs	r1, #1
 80005e0:	fa01 f202 	lsl.w	r2, r1, r2
 80005e4:	43d2      	mvns	r2, r2
 80005e6:	4611      	mov	r1, r2
 80005e8:	4a41      	ldr	r2, [pc, #260]	; (80006f0 <GPIO_Init+0x1ac>)
 80005ea:	400b      	ands	r3, r1
 80005ec:	6093      	str	r3, [r2, #8]
                break ;
 80005ee:	e02a      	b.n	8000646 <GPIO_Init+0x102>
                EXTI->RTSR |= (1 << bitFieldOffset) ;
 80005f0:	4b3f      	ldr	r3, [pc, #252]	; (80006f0 <GPIO_Init+0x1ac>)
 80005f2:	689b      	ldr	r3, [r3, #8]
 80005f4:	7cfa      	ldrb	r2, [r7, #19]
 80005f6:	2101      	movs	r1, #1
 80005f8:	fa01 f202 	lsl.w	r2, r1, r2
 80005fc:	4611      	mov	r1, r2
 80005fe:	4a3c      	ldr	r2, [pc, #240]	; (80006f0 <GPIO_Init+0x1ac>)
 8000600:	430b      	orrs	r3, r1
 8000602:	6093      	str	r3, [r2, #8]
                EXTI->FTSR &= ~(1 << bitFieldOffset) ;
 8000604:	4b3a      	ldr	r3, [pc, #232]	; (80006f0 <GPIO_Init+0x1ac>)
 8000606:	68db      	ldr	r3, [r3, #12]
 8000608:	7cfa      	ldrb	r2, [r7, #19]
 800060a:	2101      	movs	r1, #1
 800060c:	fa01 f202 	lsl.w	r2, r1, r2
 8000610:	43d2      	mvns	r2, r2
 8000612:	4611      	mov	r1, r2
 8000614:	4a36      	ldr	r2, [pc, #216]	; (80006f0 <GPIO_Init+0x1ac>)
 8000616:	400b      	ands	r3, r1
 8000618:	60d3      	str	r3, [r2, #12]
                break ;
 800061a:	e014      	b.n	8000646 <GPIO_Init+0x102>
                EXTI->FTSR |= (1 << bitFieldOffset) ;
 800061c:	4b34      	ldr	r3, [pc, #208]	; (80006f0 <GPIO_Init+0x1ac>)
 800061e:	68db      	ldr	r3, [r3, #12]
 8000620:	7cfa      	ldrb	r2, [r7, #19]
 8000622:	2101      	movs	r1, #1
 8000624:	fa01 f202 	lsl.w	r2, r1, r2
 8000628:	4611      	mov	r1, r2
 800062a:	4a31      	ldr	r2, [pc, #196]	; (80006f0 <GPIO_Init+0x1ac>)
 800062c:	430b      	orrs	r3, r1
 800062e:	60d3      	str	r3, [r2, #12]
                EXTI->RTSR |= (1 << bitFieldOffset) ;
 8000630:	4b2f      	ldr	r3, [pc, #188]	; (80006f0 <GPIO_Init+0x1ac>)
 8000632:	689b      	ldr	r3, [r3, #8]
 8000634:	7cfa      	ldrb	r2, [r7, #19]
 8000636:	2101      	movs	r1, #1
 8000638:	fa01 f202 	lsl.w	r2, r1, r2
 800063c:	4611      	mov	r1, r2
 800063e:	4a2c      	ldr	r2, [pc, #176]	; (80006f0 <GPIO_Init+0x1ac>)
 8000640:	430b      	orrs	r3, r1
 8000642:	6093      	str	r3, [r2, #8]
                break ;
 8000644:	bf00      	nop
        }

        // 2. Configure the GPIO port selection in SYSCFG_EXTICR
        uint8_t temp1 = bitFieldOffset / 4 ;
 8000646:	7cfb      	ldrb	r3, [r7, #19]
 8000648:	089b      	lsrs	r3, r3, #2
 800064a:	74bb      	strb	r3, [r7, #18]
        uint8_t temp2 = bitFieldOffset % 4 ;
 800064c:	7cfb      	ldrb	r3, [r7, #19]
 800064e:	f003 0303 	and.w	r3, r3, #3
 8000652:	747b      	strb	r3, [r7, #17]
        uint8_t portCode = GPIO_BASE_ADDR_TO_CODE(pGPIO_Handle->pGPIOx) ;
 8000654:	687b      	ldr	r3, [r7, #4]
 8000656:	681b      	ldr	r3, [r3, #0]
 8000658:	4a26      	ldr	r2, [pc, #152]	; (80006f4 <GPIO_Init+0x1b0>)
 800065a:	4293      	cmp	r3, r2
 800065c:	d060      	beq.n	8000720 <GPIO_Init+0x1dc>
 800065e:	687b      	ldr	r3, [r7, #4]
 8000660:	681b      	ldr	r3, [r3, #0]
 8000662:	4a25      	ldr	r2, [pc, #148]	; (80006f8 <GPIO_Init+0x1b4>)
 8000664:	4293      	cmp	r3, r2
 8000666:	d040      	beq.n	80006ea <GPIO_Init+0x1a6>
 8000668:	687b      	ldr	r3, [r7, #4]
 800066a:	681b      	ldr	r3, [r3, #0]
 800066c:	4a23      	ldr	r2, [pc, #140]	; (80006fc <GPIO_Init+0x1b8>)
 800066e:	4293      	cmp	r3, r2
 8000670:	d039      	beq.n	80006e6 <GPIO_Init+0x1a2>
 8000672:	687b      	ldr	r3, [r7, #4]
 8000674:	681b      	ldr	r3, [r3, #0]
 8000676:	4a22      	ldr	r2, [pc, #136]	; (8000700 <GPIO_Init+0x1bc>)
 8000678:	4293      	cmp	r3, r2
 800067a:	d032      	beq.n	80006e2 <GPIO_Init+0x19e>
 800067c:	687b      	ldr	r3, [r7, #4]
 800067e:	681b      	ldr	r3, [r3, #0]
 8000680:	4a20      	ldr	r2, [pc, #128]	; (8000704 <GPIO_Init+0x1c0>)
 8000682:	4293      	cmp	r3, r2
 8000684:	d02b      	beq.n	80006de <GPIO_Init+0x19a>
 8000686:	687b      	ldr	r3, [r7, #4]
 8000688:	681b      	ldr	r3, [r3, #0]
 800068a:	4a1f      	ldr	r2, [pc, #124]	; (8000708 <GPIO_Init+0x1c4>)
 800068c:	4293      	cmp	r3, r2
 800068e:	d024      	beq.n	80006da <GPIO_Init+0x196>
 8000690:	687b      	ldr	r3, [r7, #4]
 8000692:	681b      	ldr	r3, [r3, #0]
 8000694:	4a1d      	ldr	r2, [pc, #116]	; (800070c <GPIO_Init+0x1c8>)
 8000696:	4293      	cmp	r3, r2
 8000698:	d01d      	beq.n	80006d6 <GPIO_Init+0x192>
 800069a:	687b      	ldr	r3, [r7, #4]
 800069c:	681b      	ldr	r3, [r3, #0]
 800069e:	4a1c      	ldr	r2, [pc, #112]	; (8000710 <GPIO_Init+0x1cc>)
 80006a0:	4293      	cmp	r3, r2
 80006a2:	d016      	beq.n	80006d2 <GPIO_Init+0x18e>
 80006a4:	687b      	ldr	r3, [r7, #4]
 80006a6:	681b      	ldr	r3, [r3, #0]
 80006a8:	4a1a      	ldr	r2, [pc, #104]	; (8000714 <GPIO_Init+0x1d0>)
 80006aa:	4293      	cmp	r3, r2
 80006ac:	d00f      	beq.n	80006ce <GPIO_Init+0x18a>
 80006ae:	687b      	ldr	r3, [r7, #4]
 80006b0:	681b      	ldr	r3, [r3, #0]
 80006b2:	4a19      	ldr	r2, [pc, #100]	; (8000718 <GPIO_Init+0x1d4>)
 80006b4:	4293      	cmp	r3, r2
 80006b6:	d008      	beq.n	80006ca <GPIO_Init+0x186>
 80006b8:	687b      	ldr	r3, [r7, #4]
 80006ba:	681b      	ldr	r3, [r3, #0]
 80006bc:	4a17      	ldr	r2, [pc, #92]	; (800071c <GPIO_Init+0x1d8>)
 80006be:	4293      	cmp	r3, r2
 80006c0:	d101      	bne.n	80006c6 <GPIO_Init+0x182>
 80006c2:	230a      	movs	r3, #10
 80006c4:	e02d      	b.n	8000722 <GPIO_Init+0x1de>
 80006c6:	2300      	movs	r3, #0
 80006c8:	e02b      	b.n	8000722 <GPIO_Init+0x1de>
 80006ca:	2309      	movs	r3, #9
 80006cc:	e029      	b.n	8000722 <GPIO_Init+0x1de>
 80006ce:	2308      	movs	r3, #8
 80006d0:	e027      	b.n	8000722 <GPIO_Init+0x1de>
 80006d2:	2307      	movs	r3, #7
 80006d4:	e025      	b.n	8000722 <GPIO_Init+0x1de>
 80006d6:	2306      	movs	r3, #6
 80006d8:	e023      	b.n	8000722 <GPIO_Init+0x1de>
 80006da:	2305      	movs	r3, #5
 80006dc:	e021      	b.n	8000722 <GPIO_Init+0x1de>
 80006de:	2304      	movs	r3, #4
 80006e0:	e01f      	b.n	8000722 <GPIO_Init+0x1de>
 80006e2:	2303      	movs	r3, #3
 80006e4:	e01d      	b.n	8000722 <GPIO_Init+0x1de>
 80006e6:	2302      	movs	r3, #2
 80006e8:	e01b      	b.n	8000722 <GPIO_Init+0x1de>
 80006ea:	2301      	movs	r3, #1
 80006ec:	e019      	b.n	8000722 <GPIO_Init+0x1de>
 80006ee:	bf00      	nop
 80006f0:	40013c00 	.word	0x40013c00
 80006f4:	40020000 	.word	0x40020000
 80006f8:	40020400 	.word	0x40020400
 80006fc:	40020800 	.word	0x40020800
 8000700:	40020c00 	.word	0x40020c00
 8000704:	40021000 	.word	0x40021000
 8000708:	40021400 	.word	0x40021400
 800070c:	40021800 	.word	0x40021800
 8000710:	40021c00 	.word	0x40021c00
 8000714:	40022000 	.word	0x40022000
 8000718:	40022400 	.word	0x40022400
 800071c:	40022800 	.word	0x40022800
 8000720:	2300      	movs	r3, #0
 8000722:	743b      	strb	r3, [r7, #16]
        SYSCFG_PCLK_EN() ;                                                                                          // Enable SYSCFG peripheral clock
 8000724:	4b69      	ldr	r3, [pc, #420]	; (80008cc <GPIO_Init+0x388>)
 8000726:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000728:	4a68      	ldr	r2, [pc, #416]	; (80008cc <GPIO_Init+0x388>)
 800072a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800072e:	6453      	str	r3, [r2, #68]	; 0x44
        SYSCFG->EXTICR[temp1] &= ~(0xF << (temp2 * 4)) ;                                                            // Clear 4 bits
 8000730:	4a67      	ldr	r2, [pc, #412]	; (80008d0 <GPIO_Init+0x38c>)
 8000732:	7cbb      	ldrb	r3, [r7, #18]
 8000734:	3302      	adds	r3, #2
 8000736:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800073a:	7c7b      	ldrb	r3, [r7, #17]
 800073c:	009b      	lsls	r3, r3, #2
 800073e:	210f      	movs	r1, #15
 8000740:	fa01 f303 	lsl.w	r3, r1, r3
 8000744:	43db      	mvns	r3, r3
 8000746:	4618      	mov	r0, r3
 8000748:	4961      	ldr	r1, [pc, #388]	; (80008d0 <GPIO_Init+0x38c>)
 800074a:	7cbb      	ldrb	r3, [r7, #18]
 800074c:	4002      	ands	r2, r0
 800074e:	3302      	adds	r3, #2
 8000750:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        SYSCFG->EXTICR[temp1] |= (portCode << (temp2 * 4)) ;                                                        // Set 4 bits
 8000754:	4a5e      	ldr	r2, [pc, #376]	; (80008d0 <GPIO_Init+0x38c>)
 8000756:	7cbb      	ldrb	r3, [r7, #18]
 8000758:	3302      	adds	r3, #2
 800075a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800075e:	7c39      	ldrb	r1, [r7, #16]
 8000760:	7c7b      	ldrb	r3, [r7, #17]
 8000762:	009b      	lsls	r3, r3, #2
 8000764:	fa01 f303 	lsl.w	r3, r1, r3
 8000768:	4618      	mov	r0, r3
 800076a:	4959      	ldr	r1, [pc, #356]	; (80008d0 <GPIO_Init+0x38c>)
 800076c:	7cbb      	ldrb	r3, [r7, #18]
 800076e:	4302      	orrs	r2, r0
 8000770:	3302      	adds	r3, #2
 8000772:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        // 3. Enable the EXTI interrupt delivery using IMR
        EXTI->IMR |= (1 << bitFieldOffset) ;
 8000776:	4b57      	ldr	r3, [pc, #348]	; (80008d4 <GPIO_Init+0x390>)
 8000778:	681b      	ldr	r3, [r3, #0]
 800077a:	7cfa      	ldrb	r2, [r7, #19]
 800077c:	2101      	movs	r1, #1
 800077e:	fa01 f202 	lsl.w	r2, r1, r2
 8000782:	4611      	mov	r1, r2
 8000784:	4a53      	ldr	r2, [pc, #332]	; (80008d4 <GPIO_Init+0x390>)
 8000786:	430b      	orrs	r3, r1
 8000788:	6013      	str	r3, [r2, #0]
    }

    // 2. Configure the speed
    temp = 0 ;
 800078a:	2300      	movs	r3, #0
 800078c:	617b      	str	r3, [r7, #20]
    temp = pGPIO_Handle->GPIO_PinConfig.GPIO_PinSpeed << (2 * pGPIO_Handle->GPIO_PinConfig.GPIO_PinNumber) ;
 800078e:	687b      	ldr	r3, [r7, #4]
 8000790:	799b      	ldrb	r3, [r3, #6]
 8000792:	461a      	mov	r2, r3
 8000794:	687b      	ldr	r3, [r7, #4]
 8000796:	791b      	ldrb	r3, [r3, #4]
 8000798:	005b      	lsls	r3, r3, #1
 800079a:	fa02 f303 	lsl.w	r3, r2, r3
 800079e:	617b      	str	r3, [r7, #20]
    pGPIO_Handle->pGPIOx->OSPEEDR &= ~(0x3 << (2 * pGPIO_Handle->GPIO_PinConfig.GPIO_PinNumber)) ;                  // Clear
 80007a0:	687b      	ldr	r3, [r7, #4]
 80007a2:	681b      	ldr	r3, [r3, #0]
 80007a4:	689a      	ldr	r2, [r3, #8]
 80007a6:	687b      	ldr	r3, [r7, #4]
 80007a8:	791b      	ldrb	r3, [r3, #4]
 80007aa:	005b      	lsls	r3, r3, #1
 80007ac:	2103      	movs	r1, #3
 80007ae:	fa01 f303 	lsl.w	r3, r1, r3
 80007b2:	43db      	mvns	r3, r3
 80007b4:	4619      	mov	r1, r3
 80007b6:	687b      	ldr	r3, [r7, #4]
 80007b8:	681b      	ldr	r3, [r3, #0]
 80007ba:	400a      	ands	r2, r1
 80007bc:	609a      	str	r2, [r3, #8]
    pGPIO_Handle->pGPIOx->OSPEEDR |= temp ;                                                                         // Set
 80007be:	687b      	ldr	r3, [r7, #4]
 80007c0:	681b      	ldr	r3, [r3, #0]
 80007c2:	6899      	ldr	r1, [r3, #8]
 80007c4:	687b      	ldr	r3, [r7, #4]
 80007c6:	681b      	ldr	r3, [r3, #0]
 80007c8:	697a      	ldr	r2, [r7, #20]
 80007ca:	430a      	orrs	r2, r1
 80007cc:	609a      	str	r2, [r3, #8]

    // 3. Configure the PUPD settings
    temp = 0 ;
 80007ce:	2300      	movs	r3, #0
 80007d0:	617b      	str	r3, [r7, #20]
    temp = pGPIO_Handle->GPIO_PinConfig.GPIO_PinPuPdCtrl << (2 * pGPIO_Handle->GPIO_PinConfig.GPIO_PinNumber) ;
 80007d2:	687b      	ldr	r3, [r7, #4]
 80007d4:	79db      	ldrb	r3, [r3, #7]
 80007d6:	461a      	mov	r2, r3
 80007d8:	687b      	ldr	r3, [r7, #4]
 80007da:	791b      	ldrb	r3, [r3, #4]
 80007dc:	005b      	lsls	r3, r3, #1
 80007de:	fa02 f303 	lsl.w	r3, r2, r3
 80007e2:	617b      	str	r3, [r7, #20]
    pGPIO_Handle->pGPIOx->PUPDR &= ~(0x3 << (2 *pGPIO_Handle->GPIO_PinConfig.GPIO_PinNumber)) ;                     // Clear
 80007e4:	687b      	ldr	r3, [r7, #4]
 80007e6:	681b      	ldr	r3, [r3, #0]
 80007e8:	68da      	ldr	r2, [r3, #12]
 80007ea:	687b      	ldr	r3, [r7, #4]
 80007ec:	791b      	ldrb	r3, [r3, #4]
 80007ee:	005b      	lsls	r3, r3, #1
 80007f0:	2103      	movs	r1, #3
 80007f2:	fa01 f303 	lsl.w	r3, r1, r3
 80007f6:	43db      	mvns	r3, r3
 80007f8:	4619      	mov	r1, r3
 80007fa:	687b      	ldr	r3, [r7, #4]
 80007fc:	681b      	ldr	r3, [r3, #0]
 80007fe:	400a      	ands	r2, r1
 8000800:	60da      	str	r2, [r3, #12]
    pGPIO_Handle->pGPIOx->PUPDR |= temp ;                                                                           // Set
 8000802:	687b      	ldr	r3, [r7, #4]
 8000804:	681b      	ldr	r3, [r3, #0]
 8000806:	68d9      	ldr	r1, [r3, #12]
 8000808:	687b      	ldr	r3, [r7, #4]
 800080a:	681b      	ldr	r3, [r3, #0]
 800080c:	697a      	ldr	r2, [r7, #20]
 800080e:	430a      	orrs	r2, r1
 8000810:	60da      	str	r2, [r3, #12]

    // 4. Configure the op type
    temp = 0 ;
 8000812:	2300      	movs	r3, #0
 8000814:	617b      	str	r3, [r7, #20]
    temp = pGPIO_Handle->GPIO_PinConfig.GPIO_PinOPType << pGPIO_Handle->GPIO_PinConfig.GPIO_PinNumber ;
 8000816:	687b      	ldr	r3, [r7, #4]
 8000818:	7a1b      	ldrb	r3, [r3, #8]
 800081a:	461a      	mov	r2, r3
 800081c:	687b      	ldr	r3, [r7, #4]
 800081e:	791b      	ldrb	r3, [r3, #4]
 8000820:	fa02 f303 	lsl.w	r3, r2, r3
 8000824:	617b      	str	r3, [r7, #20]
    pGPIO_Handle->pGPIOx->OTYPER &= ~(0x1 << pGPIO_Handle->GPIO_PinConfig.GPIO_PinNumber) ;                         // Clear
 8000826:	687b      	ldr	r3, [r7, #4]
 8000828:	681b      	ldr	r3, [r3, #0]
 800082a:	685a      	ldr	r2, [r3, #4]
 800082c:	687b      	ldr	r3, [r7, #4]
 800082e:	791b      	ldrb	r3, [r3, #4]
 8000830:	4619      	mov	r1, r3
 8000832:	2301      	movs	r3, #1
 8000834:	408b      	lsls	r3, r1
 8000836:	43db      	mvns	r3, r3
 8000838:	4619      	mov	r1, r3
 800083a:	687b      	ldr	r3, [r7, #4]
 800083c:	681b      	ldr	r3, [r3, #0]
 800083e:	400a      	ands	r2, r1
 8000840:	605a      	str	r2, [r3, #4]
    pGPIO_Handle->pGPIOx->OTYPER |= temp ;                                                                          // Set
 8000842:	687b      	ldr	r3, [r7, #4]
 8000844:	681b      	ldr	r3, [r3, #0]
 8000846:	6859      	ldr	r1, [r3, #4]
 8000848:	687b      	ldr	r3, [r7, #4]
 800084a:	681b      	ldr	r3, [r3, #0]
 800084c:	697a      	ldr	r2, [r7, #20]
 800084e:	430a      	orrs	r2, r1
 8000850:	605a      	str	r2, [r3, #4]

    // 5. Configure the alt functionality
    if (pGPIO_Handle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_ALT_FUN) {
 8000852:	687b      	ldr	r3, [r7, #4]
 8000854:	795b      	ldrb	r3, [r3, #5]
 8000856:	2b02      	cmp	r3, #2
 8000858:	d134      	bne.n	80008c4 <GPIO_Init+0x380>
        // Configure the alt function registers
        uint32_t temp1 ;
        uint32_t temp2 ;

        temp1 = pGPIO_Handle->GPIO_PinConfig.GPIO_PinNumber / 8 ;
 800085a:	687b      	ldr	r3, [r7, #4]
 800085c:	791b      	ldrb	r3, [r3, #4]
 800085e:	08db      	lsrs	r3, r3, #3
 8000860:	b2db      	uxtb	r3, r3
 8000862:	60fb      	str	r3, [r7, #12]
        temp2 = pGPIO_Handle->GPIO_PinConfig.GPIO_PinNumber % 8 ;
 8000864:	687b      	ldr	r3, [r7, #4]
 8000866:	791b      	ldrb	r3, [r3, #4]
 8000868:	f003 0307 	and.w	r3, r3, #7
 800086c:	60bb      	str	r3, [r7, #8]

        pGPIO_Handle->pGPIOx->AFR[temp1] &= ~(0xF << (4 * temp2));                                               // Clear 4 bit fields
 800086e:	687b      	ldr	r3, [r7, #4]
 8000870:	681b      	ldr	r3, [r3, #0]
 8000872:	68fa      	ldr	r2, [r7, #12]
 8000874:	3208      	adds	r2, #8
 8000876:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800087a:	68bb      	ldr	r3, [r7, #8]
 800087c:	009b      	lsls	r3, r3, #2
 800087e:	210f      	movs	r1, #15
 8000880:	fa01 f303 	lsl.w	r3, r1, r3
 8000884:	43db      	mvns	r3, r3
 8000886:	4619      	mov	r1, r3
 8000888:	687b      	ldr	r3, [r7, #4]
 800088a:	681b      	ldr	r3, [r3, #0]
 800088c:	4011      	ands	r1, r2
 800088e:	68fa      	ldr	r2, [r7, #12]
 8000890:	3208      	adds	r2, #8
 8000892:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        pGPIO_Handle->pGPIOx->AFR[temp1] |= (pGPIO_Handle->GPIO_PinConfig.GPIO_PinAltFunMode << (4 * temp2));       // Set
 8000896:	687b      	ldr	r3, [r7, #4]
 8000898:	681b      	ldr	r3, [r3, #0]
 800089a:	68fa      	ldr	r2, [r7, #12]
 800089c:	3208      	adds	r2, #8
 800089e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80008a2:	687b      	ldr	r3, [r7, #4]
 80008a4:	7a5b      	ldrb	r3, [r3, #9]
 80008a6:	4619      	mov	r1, r3
 80008a8:	68bb      	ldr	r3, [r7, #8]
 80008aa:	009b      	lsls	r3, r3, #2
 80008ac:	fa01 f303 	lsl.w	r3, r1, r3
 80008b0:	4619      	mov	r1, r3
 80008b2:	687b      	ldr	r3, [r7, #4]
 80008b4:	681b      	ldr	r3, [r3, #0]
 80008b6:	4311      	orrs	r1, r2
 80008b8:	68fa      	ldr	r2, [r7, #12]
 80008ba:	3208      	adds	r2, #8
 80008bc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 80008c0:	e000      	b.n	80008c4 <GPIO_Init+0x380>
                return ;
 80008c2:	bf00      	nop
    }
}
 80008c4:	3718      	adds	r7, #24
 80008c6:	46bd      	mov	sp, r7
 80008c8:	bd80      	pop	{r7, pc}
 80008ca:	bf00      	nop
 80008cc:	40023800 	.word	0x40023800
 80008d0:	40013800 	.word	0x40013800
 80008d4:	40013c00 	.word	0x40013c00

080008d8 <GPIO_ReadFromInputPin>:
 * 
 * @note                        To read, the function right-shifts the IDR value over by pinNumber
 *                              amount of times to the lsb. We then mask with 0x1 and typecast
 *                              to get the value in the IDR
 */
uint8_t GPIO_ReadFromInputPin(GPIO_RegDef_t *pGPIOx, uint8_t pinNumber) {
 80008d8:	b480      	push	{r7}
 80008da:	b085      	sub	sp, #20
 80008dc:	af00      	add	r7, sp, #0
 80008de:	6078      	str	r0, [r7, #4]
 80008e0:	460b      	mov	r3, r1
 80008e2:	70fb      	strb	r3, [r7, #3]
    uint8_t value ;
    value = (uint8_t) ((pGPIOx->IDR >> pinNumber) & 0x00000001 ) ;
 80008e4:	687b      	ldr	r3, [r7, #4]
 80008e6:	691a      	ldr	r2, [r3, #16]
 80008e8:	78fb      	ldrb	r3, [r7, #3]
 80008ea:	fa22 f303 	lsr.w	r3, r2, r3
 80008ee:	b2db      	uxtb	r3, r3
 80008f0:	f003 0301 	and.w	r3, r3, #1
 80008f4:	73fb      	strb	r3, [r7, #15]
    return  value ;
 80008f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80008f8:	4618      	mov	r0, r3
 80008fa:	3714      	adds	r7, #20
 80008fc:	46bd      	mov	sp, r7
 80008fe:	bc80      	pop	{r7}
 8000900:	4770      	bx	lr
	...

08000904 <SPI_PeriClockControl>:
 * @return              none
 * 
 * @note                none
 * 
 */
void SPI_PeriClockControl(SPI_RegDef_t *pSPIx, uint8_t EnorDi) {
 8000904:	b480      	push	{r7}
 8000906:	b083      	sub	sp, #12
 8000908:	af00      	add	r7, sp, #0
 800090a:	6078      	str	r0, [r7, #4]
 800090c:	460b      	mov	r3, r1
 800090e:	70fb      	strb	r3, [r7, #3]
    // If enabling,
    if (EnorDi == ENABLE) {
 8000910:	78fb      	ldrb	r3, [r7, #3]
 8000912:	2b01      	cmp	r3, #1
 8000914:	d14c      	bne.n	80009b0 <SPI_PeriClockControl+0xac>
        // Select which SPI peripheral and enable
        switch ((unsigned long int) pSPIx) {
 8000916:	687b      	ldr	r3, [r7, #4]
 8000918:	4a4e      	ldr	r2, [pc, #312]	; (8000a54 <SPI_PeriClockControl+0x150>)
 800091a:	4293      	cmp	r3, r2
 800091c:	d041      	beq.n	80009a2 <SPI_PeriClockControl+0x9e>
 800091e:	4a4d      	ldr	r2, [pc, #308]	; (8000a54 <SPI_PeriClockControl+0x150>)
 8000920:	4293      	cmp	r3, r2
 8000922:	f200 808f 	bhi.w	8000a44 <SPI_PeriClockControl+0x140>
 8000926:	4a4c      	ldr	r2, [pc, #304]	; (8000a58 <SPI_PeriClockControl+0x154>)
 8000928:	4293      	cmp	r3, r2
 800092a:	d033      	beq.n	8000994 <SPI_PeriClockControl+0x90>
 800092c:	4a4a      	ldr	r2, [pc, #296]	; (8000a58 <SPI_PeriClockControl+0x154>)
 800092e:	4293      	cmp	r3, r2
 8000930:	f200 8088 	bhi.w	8000a44 <SPI_PeriClockControl+0x140>
 8000934:	4a49      	ldr	r2, [pc, #292]	; (8000a5c <SPI_PeriClockControl+0x158>)
 8000936:	4293      	cmp	r3, r2
 8000938:	d025      	beq.n	8000986 <SPI_PeriClockControl+0x82>
 800093a:	4a48      	ldr	r2, [pc, #288]	; (8000a5c <SPI_PeriClockControl+0x158>)
 800093c:	4293      	cmp	r3, r2
 800093e:	f200 8081 	bhi.w	8000a44 <SPI_PeriClockControl+0x140>
 8000942:	4a47      	ldr	r2, [pc, #284]	; (8000a60 <SPI_PeriClockControl+0x15c>)
 8000944:	4293      	cmp	r3, r2
 8000946:	d009      	beq.n	800095c <SPI_PeriClockControl+0x58>
 8000948:	4a45      	ldr	r2, [pc, #276]	; (8000a60 <SPI_PeriClockControl+0x15c>)
 800094a:	4293      	cmp	r3, r2
 800094c:	d87a      	bhi.n	8000a44 <SPI_PeriClockControl+0x140>
 800094e:	4a45      	ldr	r2, [pc, #276]	; (8000a64 <SPI_PeriClockControl+0x160>)
 8000950:	4293      	cmp	r3, r2
 8000952:	d00a      	beq.n	800096a <SPI_PeriClockControl+0x66>
 8000954:	4a44      	ldr	r2, [pc, #272]	; (8000a68 <SPI_PeriClockControl+0x164>)
 8000956:	4293      	cmp	r3, r2
 8000958:	d00e      	beq.n	8000978 <SPI_PeriClockControl+0x74>
                case SPI2_BASE_ADDR:        SPI2_PCLK_EN() ;        break ;
                case SPI3_BASE_ADDR:        SPI3_PCLK_EN() ;        break ;
                case SPI4_BASE_ADDR:        SPI4_PCLK_EN() ;        break ;
                case SPI5_BASE_ADDR:        SPI5_PCLK_EN() ;        break ;
                case SPI6_BASE_ADDR:        SPI6_PCLK_EN() ;        break ;
                default:                    return ;                break ;         // TODO: return error or cause a user fault
 800095a:	e073      	b.n	8000a44 <SPI_PeriClockControl+0x140>
                case SPI1_BASE_ADDR:        SPI1_PCLK_EN() ;        break ;
 800095c:	4b43      	ldr	r3, [pc, #268]	; (8000a6c <SPI_PeriClockControl+0x168>)
 800095e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000960:	4a42      	ldr	r2, [pc, #264]	; (8000a6c <SPI_PeriClockControl+0x168>)
 8000962:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000966:	6453      	str	r3, [r2, #68]	; 0x44
 8000968:	e06f      	b.n	8000a4a <SPI_PeriClockControl+0x146>
                case SPI2_BASE_ADDR:        SPI2_PCLK_EN() ;        break ;
 800096a:	4b40      	ldr	r3, [pc, #256]	; (8000a6c <SPI_PeriClockControl+0x168>)
 800096c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800096e:	4a3f      	ldr	r2, [pc, #252]	; (8000a6c <SPI_PeriClockControl+0x168>)
 8000970:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000974:	6413      	str	r3, [r2, #64]	; 0x40
 8000976:	e068      	b.n	8000a4a <SPI_PeriClockControl+0x146>
                case SPI3_BASE_ADDR:        SPI3_PCLK_EN() ;        break ;
 8000978:	4b3c      	ldr	r3, [pc, #240]	; (8000a6c <SPI_PeriClockControl+0x168>)
 800097a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800097c:	4a3b      	ldr	r2, [pc, #236]	; (8000a6c <SPI_PeriClockControl+0x168>)
 800097e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000982:	6413      	str	r3, [r2, #64]	; 0x40
 8000984:	e061      	b.n	8000a4a <SPI_PeriClockControl+0x146>
                case SPI4_BASE_ADDR:        SPI4_PCLK_EN() ;        break ;
 8000986:	4b39      	ldr	r3, [pc, #228]	; (8000a6c <SPI_PeriClockControl+0x168>)
 8000988:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800098a:	4a38      	ldr	r2, [pc, #224]	; (8000a6c <SPI_PeriClockControl+0x168>)
 800098c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000990:	6453      	str	r3, [r2, #68]	; 0x44
 8000992:	e05a      	b.n	8000a4a <SPI_PeriClockControl+0x146>
                case SPI5_BASE_ADDR:        SPI5_PCLK_EN() ;        break ;
 8000994:	4b35      	ldr	r3, [pc, #212]	; (8000a6c <SPI_PeriClockControl+0x168>)
 8000996:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000998:	4a34      	ldr	r2, [pc, #208]	; (8000a6c <SPI_PeriClockControl+0x168>)
 800099a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800099e:	6453      	str	r3, [r2, #68]	; 0x44
 80009a0:	e053      	b.n	8000a4a <SPI_PeriClockControl+0x146>
                case SPI6_BASE_ADDR:        SPI6_PCLK_EN() ;        break ;
 80009a2:	4b32      	ldr	r3, [pc, #200]	; (8000a6c <SPI_PeriClockControl+0x168>)
 80009a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009a6:	4a31      	ldr	r2, [pc, #196]	; (8000a6c <SPI_PeriClockControl+0x168>)
 80009a8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80009ac:	6453      	str	r3, [r2, #68]	; 0x44
 80009ae:	e04c      	b.n	8000a4a <SPI_PeriClockControl+0x146>
        }
    }
    else {
        // Disable the corresponding SPI peripheral otherwise
        switch ((unsigned long int) pSPIx) {
 80009b0:	687b      	ldr	r3, [r7, #4]
 80009b2:	4a28      	ldr	r2, [pc, #160]	; (8000a54 <SPI_PeriClockControl+0x150>)
 80009b4:	4293      	cmp	r3, r2
 80009b6:	d03e      	beq.n	8000a36 <SPI_PeriClockControl+0x132>
 80009b8:	4a26      	ldr	r2, [pc, #152]	; (8000a54 <SPI_PeriClockControl+0x150>)
 80009ba:	4293      	cmp	r3, r2
 80009bc:	d844      	bhi.n	8000a48 <SPI_PeriClockControl+0x144>
 80009be:	4a26      	ldr	r2, [pc, #152]	; (8000a58 <SPI_PeriClockControl+0x154>)
 80009c0:	4293      	cmp	r3, r2
 80009c2:	d031      	beq.n	8000a28 <SPI_PeriClockControl+0x124>
 80009c4:	4a24      	ldr	r2, [pc, #144]	; (8000a58 <SPI_PeriClockControl+0x154>)
 80009c6:	4293      	cmp	r3, r2
 80009c8:	d83e      	bhi.n	8000a48 <SPI_PeriClockControl+0x144>
 80009ca:	4a24      	ldr	r2, [pc, #144]	; (8000a5c <SPI_PeriClockControl+0x158>)
 80009cc:	4293      	cmp	r3, r2
 80009ce:	d024      	beq.n	8000a1a <SPI_PeriClockControl+0x116>
 80009d0:	4a22      	ldr	r2, [pc, #136]	; (8000a5c <SPI_PeriClockControl+0x158>)
 80009d2:	4293      	cmp	r3, r2
 80009d4:	d838      	bhi.n	8000a48 <SPI_PeriClockControl+0x144>
 80009d6:	4a22      	ldr	r2, [pc, #136]	; (8000a60 <SPI_PeriClockControl+0x15c>)
 80009d8:	4293      	cmp	r3, r2
 80009da:	d009      	beq.n	80009f0 <SPI_PeriClockControl+0xec>
 80009dc:	4a20      	ldr	r2, [pc, #128]	; (8000a60 <SPI_PeriClockControl+0x15c>)
 80009de:	4293      	cmp	r3, r2
 80009e0:	d832      	bhi.n	8000a48 <SPI_PeriClockControl+0x144>
 80009e2:	4a20      	ldr	r2, [pc, #128]	; (8000a64 <SPI_PeriClockControl+0x160>)
 80009e4:	4293      	cmp	r3, r2
 80009e6:	d00a      	beq.n	80009fe <SPI_PeriClockControl+0xfa>
 80009e8:	4a1f      	ldr	r2, [pc, #124]	; (8000a68 <SPI_PeriClockControl+0x164>)
 80009ea:	4293      	cmp	r3, r2
 80009ec:	d00e      	beq.n	8000a0c <SPI_PeriClockControl+0x108>
                case SPI2_BASE_ADDR:        SPI2_PCLK_DI() ;        break ;
                case SPI3_BASE_ADDR:        SPI3_PCLK_DI() ;        break ;
                case SPI4_BASE_ADDR:        SPI4_PCLK_DI() ;        break ;
                case SPI5_BASE_ADDR:        SPI5_PCLK_DI() ;        break ;
                case SPI6_BASE_ADDR:        SPI6_PCLK_DI() ;        break ;
                default:                    return ;                break ;         // TODO: return error or cause a user fault
 80009ee:	e02b      	b.n	8000a48 <SPI_PeriClockControl+0x144>
                case SPI1_BASE_ADDR:        SPI1_PCLK_DI() ;        break ;
 80009f0:	4b1e      	ldr	r3, [pc, #120]	; (8000a6c <SPI_PeriClockControl+0x168>)
 80009f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009f4:	4a1d      	ldr	r2, [pc, #116]	; (8000a6c <SPI_PeriClockControl+0x168>)
 80009f6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80009fa:	6453      	str	r3, [r2, #68]	; 0x44
 80009fc:	e025      	b.n	8000a4a <SPI_PeriClockControl+0x146>
                case SPI2_BASE_ADDR:        SPI2_PCLK_DI() ;        break ;
 80009fe:	4b1b      	ldr	r3, [pc, #108]	; (8000a6c <SPI_PeriClockControl+0x168>)
 8000a00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a02:	4a1a      	ldr	r2, [pc, #104]	; (8000a6c <SPI_PeriClockControl+0x168>)
 8000a04:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8000a08:	6413      	str	r3, [r2, #64]	; 0x40
 8000a0a:	e01e      	b.n	8000a4a <SPI_PeriClockControl+0x146>
                case SPI3_BASE_ADDR:        SPI3_PCLK_DI() ;        break ;
 8000a0c:	4b17      	ldr	r3, [pc, #92]	; (8000a6c <SPI_PeriClockControl+0x168>)
 8000a0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a10:	4a16      	ldr	r2, [pc, #88]	; (8000a6c <SPI_PeriClockControl+0x168>)
 8000a12:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8000a16:	6413      	str	r3, [r2, #64]	; 0x40
 8000a18:	e017      	b.n	8000a4a <SPI_PeriClockControl+0x146>
                case SPI4_BASE_ADDR:        SPI4_PCLK_DI() ;        break ;
 8000a1a:	4b14      	ldr	r3, [pc, #80]	; (8000a6c <SPI_PeriClockControl+0x168>)
 8000a1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a1e:	4a13      	ldr	r2, [pc, #76]	; (8000a6c <SPI_PeriClockControl+0x168>)
 8000a20:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8000a24:	6453      	str	r3, [r2, #68]	; 0x44
 8000a26:	e010      	b.n	8000a4a <SPI_PeriClockControl+0x146>
                case SPI5_BASE_ADDR:        SPI5_PCLK_DI() ;        break ;
 8000a28:	4b10      	ldr	r3, [pc, #64]	; (8000a6c <SPI_PeriClockControl+0x168>)
 8000a2a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a2c:	4a0f      	ldr	r2, [pc, #60]	; (8000a6c <SPI_PeriClockControl+0x168>)
 8000a2e:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8000a32:	6453      	str	r3, [r2, #68]	; 0x44
 8000a34:	e009      	b.n	8000a4a <SPI_PeriClockControl+0x146>
                case SPI6_BASE_ADDR:        SPI6_PCLK_DI() ;        break ;
 8000a36:	4b0d      	ldr	r3, [pc, #52]	; (8000a6c <SPI_PeriClockControl+0x168>)
 8000a38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a3a:	4a0c      	ldr	r2, [pc, #48]	; (8000a6c <SPI_PeriClockControl+0x168>)
 8000a3c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8000a40:	6453      	str	r3, [r2, #68]	; 0x44
 8000a42:	e002      	b.n	8000a4a <SPI_PeriClockControl+0x146>
                default:                    return ;                break ;         // TODO: return error or cause a user fault
 8000a44:	bf00      	nop
 8000a46:	e000      	b.n	8000a4a <SPI_PeriClockControl+0x146>
                default:                    return ;                break ;         // TODO: return error or cause a user fault
 8000a48:	bf00      	nop
        }
    }

}
 8000a4a:	370c      	adds	r7, #12
 8000a4c:	46bd      	mov	sp, r7
 8000a4e:	bc80      	pop	{r7}
 8000a50:	4770      	bx	lr
 8000a52:	bf00      	nop
 8000a54:	40015400 	.word	0x40015400
 8000a58:	40015000 	.word	0x40015000
 8000a5c:	40013400 	.word	0x40013400
 8000a60:	40013000 	.word	0x40013000
 8000a64:	40003800 	.word	0x40003800
 8000a68:	40003c00 	.word	0x40003c00
 8000a6c:	40023800 	.word	0x40023800

08000a70 <SPI_Init>:
 * @return                  none
 * 
 * @note                    none
 * 
 */
void SPI_Init(SPI_Handle_t *pSPIHandle) {
 8000a70:	b580      	push	{r7, lr}
 8000a72:	b084      	sub	sp, #16
 8000a74:	af00      	add	r7, sp, #0
 8000a76:	6078      	str	r0, [r7, #4]
    // Enable the SPIx peripheral
    SPI_PeriClockControl(pSPIHandle->pSPIx, ENABLE) ;
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	681b      	ldr	r3, [r3, #0]
 8000a7c:	2101      	movs	r1, #1
 8000a7e:	4618      	mov	r0, r3
 8000a80:	f7ff ff40 	bl	8000904 <SPI_PeriClockControl>

    // Configure the SPI_CR1 register
    uint32_t tempReg = 0 ;
 8000a84:	2300      	movs	r3, #0
 8000a86:	60fb      	str	r3, [r7, #12]

    // 1. Configure the device mode
    tempReg |=  pSPIHandle->SPIConfig.SPI_DeviceMode << SPI_CR1_MSTR ;
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	791b      	ldrb	r3, [r3, #4]
 8000a8c:	009b      	lsls	r3, r3, #2
 8000a8e:	461a      	mov	r2, r3
 8000a90:	68fb      	ldr	r3, [r7, #12]
 8000a92:	4313      	orrs	r3, r2
 8000a94:	60fb      	str	r3, [r7, #12]

    // 2. Configure the bus mode
    switch (pSPIHandle->SPIConfig.SPI_BusConfig) {
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	795b      	ldrb	r3, [r3, #5]
 8000a9a:	2b04      	cmp	r3, #4
 8000a9c:	d010      	beq.n	8000ac0 <SPI_Init+0x50>
 8000a9e:	2b04      	cmp	r3, #4
 8000aa0:	dc17      	bgt.n	8000ad2 <SPI_Init+0x62>
 8000aa2:	2b01      	cmp	r3, #1
 8000aa4:	d002      	beq.n	8000aac <SPI_Init+0x3c>
 8000aa6:	2b02      	cmp	r3, #2
 8000aa8:	d005      	beq.n	8000ab6 <SPI_Init+0x46>
 8000aaa:	e012      	b.n	8000ad2 <SPI_Init+0x62>
        case SPI_BUS_CONFIG_FD:
            // BIDI mode should be cleared
            tempReg &= ~(1 << SPI_CR1_BIDIMODE) ;
 8000aac:	68fb      	ldr	r3, [r7, #12]
 8000aae:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8000ab2:	60fb      	str	r3, [r7, #12]
            break ;
 8000ab4:	e012      	b.n	8000adc <SPI_Init+0x6c>
        case SPI_BUS_CONFIG_HD:
            // BIDI mode should be set
            tempReg |= (1 << SPI_CR1_BIDIMODE) ;
 8000ab6:	68fb      	ldr	r3, [r7, #12]
 8000ab8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000abc:	60fb      	str	r3, [r7, #12]
            break ;
 8000abe:	e00d      	b.n	8000adc <SPI_Init+0x6c>
        case SPI_BUS_CONFIG_SIMPLEX_RXONLY:
            // BIDI mode should be cleared and RXONLY bit must be set
            tempReg &= ~(1 << SPI_CR1_BIDIMODE) ;
 8000ac0:	68fb      	ldr	r3, [r7, #12]
 8000ac2:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8000ac6:	60fb      	str	r3, [r7, #12]
            tempReg |= (1 << SPI_CR1_RXONLY) ;
 8000ac8:	68fb      	ldr	r3, [r7, #12]
 8000aca:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000ace:	60fb      	str	r3, [r7, #12]
            break ;
 8000ad0:	e004      	b.n	8000adc <SPI_Init+0x6c>
        default:
            // Set as Full Duplex by default otherwise
            tempReg &= ~(1 << SPI_CR1_BIDIMODE) ;
 8000ad2:	68fb      	ldr	r3, [r7, #12]
 8000ad4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8000ad8:	60fb      	str	r3, [r7, #12]
            break ;
 8000ada:	bf00      	nop
    }

    // 3. configure the SPI serial clock speed (baud rate)
    tempReg |= pSPIHandle->SPIConfig.SPI_SclkSpeed << SPI_CR1_BR ;
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	799b      	ldrb	r3, [r3, #6]
 8000ae0:	00db      	lsls	r3, r3, #3
 8000ae2:	461a      	mov	r2, r3
 8000ae4:	68fb      	ldr	r3, [r7, #12]
 8000ae6:	4313      	orrs	r3, r2
 8000ae8:	60fb      	str	r3, [r7, #12]

    // 4. Configure the DFF
    tempReg |= pSPIHandle->SPIConfig.SPI_DFF << SPI_CR1_DFF ;
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	79db      	ldrb	r3, [r3, #7]
 8000aee:	02db      	lsls	r3, r3, #11
 8000af0:	461a      	mov	r2, r3
 8000af2:	68fb      	ldr	r3, [r7, #12]
 8000af4:	4313      	orrs	r3, r2
 8000af6:	60fb      	str	r3, [r7, #12]

    // 5. Configure the CPOL
    tempReg |= pSPIHandle->SPIConfig.SPI_CPOL << SPI_CR1_CPOL ;
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	7a1b      	ldrb	r3, [r3, #8]
 8000afc:	005b      	lsls	r3, r3, #1
 8000afe:	461a      	mov	r2, r3
 8000b00:	68fb      	ldr	r3, [r7, #12]
 8000b02:	4313      	orrs	r3, r2
 8000b04:	60fb      	str	r3, [r7, #12]

    //6. Configure the CPHA
    tempReg |= pSPIHandle->SPIConfig.SPI_CPHA << SPI_CR1_CPHA ;
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	7a5b      	ldrb	r3, [r3, #9]
 8000b0a:	461a      	mov	r2, r3
 8000b0c:	68fb      	ldr	r3, [r7, #12]
 8000b0e:	4313      	orrs	r3, r2
 8000b10:	60fb      	str	r3, [r7, #12]

    // 7. Configure the SSM
    tempReg |= pSPIHandle->SPIConfig.SPI_SSM << SPI_CR1_SSM ;
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	7a9b      	ldrb	r3, [r3, #10]
 8000b16:	025b      	lsls	r3, r3, #9
 8000b18:	461a      	mov	r2, r3
 8000b1a:	68fb      	ldr	r3, [r7, #12]
 8000b1c:	4313      	orrs	r3, r2
 8000b1e:	60fb      	str	r3, [r7, #12]

    pSPIHandle->pSPIx->CR1 = tempReg ;
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	681b      	ldr	r3, [r3, #0]
 8000b24:	68fa      	ldr	r2, [r7, #12]
 8000b26:	601a      	str	r2, [r3, #0]
}
 8000b28:	bf00      	nop
 8000b2a:	3710      	adds	r7, #16
 8000b2c:	46bd      	mov	sp, r7
 8000b2e:	bd80      	pop	{r7, pc}

08000b30 <SPI_SendData>:
 * @return                  none
 * 
 * @note                    the 16-bit DFF has its length decremented twice  since it sends 2 bytes
 * 
 */
void SPI_SendData(SPI_RegDef_t *pSPIx, uint8_t *pTxBuffer, uint32_t len) {
 8000b30:	b580      	push	{r7, lr}
 8000b32:	b084      	sub	sp, #16
 8000b34:	af00      	add	r7, sp, #0
 8000b36:	60f8      	str	r0, [r7, #12]
 8000b38:	60b9      	str	r1, [r7, #8]
 8000b3a:	607a      	str	r2, [r7, #4]
    while (len > 0) {
 8000b3c:	e027      	b.n	8000b8e <SPI_SendData+0x5e>
        // 1. Wait for TXE bit to be set -> This will indicate the Tx buffer is empty
        while (SPI_GetFlagStatus(pSPIx, SPI_TXE_FLAG) == FLAG_RESET) ;
 8000b3e:	bf00      	nop
 8000b40:	2102      	movs	r1, #2
 8000b42:	68f8      	ldr	r0, [r7, #12]
 8000b44:	f000 f898 	bl	8000c78 <SPI_GetFlagStatus>
 8000b48:	4603      	mov	r3, r0
 8000b4a:	2b00      	cmp	r3, #0
 8000b4c:	d0f8      	beq.n	8000b40 <SPI_SendData+0x10>

        // Check if the DFF bit is set for 8 or 16-bits
        if (pSPIx->CR1 & (1 << SPI_CR1_DFF)) {
 8000b4e:	68fb      	ldr	r3, [r7, #12]
 8000b50:	681b      	ldr	r3, [r3, #0]
 8000b52:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000b56:	2b00      	cmp	r3, #0
 8000b58:	d00e      	beq.n	8000b78 <SPI_SendData+0x48>
            // 16-bit DFF
        	// 1. Load the data into the DR
            pSPIx->DR = *((uint16_t*) pTxBuffer) ;
 8000b5a:	68bb      	ldr	r3, [r7, #8]
 8000b5c:	881b      	ldrh	r3, [r3, #0]
 8000b5e:	461a      	mov	r2, r3
 8000b60:	68fb      	ldr	r3, [r7, #12]
 8000b62:	60da      	str	r2, [r3, #12]
            len-- ;
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	3b01      	subs	r3, #1
 8000b68:	607b      	str	r3, [r7, #4]
            len-- ;
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	3b01      	subs	r3, #1
 8000b6e:	607b      	str	r3, [r7, #4]
            (uint16_t*) pTxBuffer++ ;
 8000b70:	68bb      	ldr	r3, [r7, #8]
 8000b72:	3301      	adds	r3, #1
 8000b74:	60bb      	str	r3, [r7, #8]
 8000b76:	e00a      	b.n	8000b8e <SPI_SendData+0x5e>
        }
        else {
            // 8-bit DFF
            pSPIx->DR = *pTxBuffer ;
 8000b78:	68bb      	ldr	r3, [r7, #8]
 8000b7a:	781b      	ldrb	r3, [r3, #0]
 8000b7c:	461a      	mov	r2, r3
 8000b7e:	68fb      	ldr	r3, [r7, #12]
 8000b80:	60da      	str	r2, [r3, #12]
            len-- ;
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	3b01      	subs	r3, #1
 8000b86:	607b      	str	r3, [r7, #4]
            pTxBuffer++ ;
 8000b88:	68bb      	ldr	r3, [r7, #8]
 8000b8a:	3301      	adds	r3, #1
 8000b8c:	60bb      	str	r3, [r7, #8]
    while (len > 0) {
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	2b00      	cmp	r3, #0
 8000b92:	d1d4      	bne.n	8000b3e <SPI_SendData+0xe>
        }
    }
}
 8000b94:	bf00      	nop
 8000b96:	bf00      	nop
 8000b98:	3710      	adds	r7, #16
 8000b9a:	46bd      	mov	sp, r7
 8000b9c:	bd80      	pop	{r7, pc}

08000b9e <SPI_ReceiveData>:
 * @return                  none
 * 
 * @note                    none
 * 
 */
void SPI_ReceiveData(SPI_RegDef_t *pSPIx, uint8_t *pRxBuffer, uint32_t len) {
 8000b9e:	b580      	push	{r7, lr}
 8000ba0:	b084      	sub	sp, #16
 8000ba2:	af00      	add	r7, sp, #0
 8000ba4:	60f8      	str	r0, [r7, #12]
 8000ba6:	60b9      	str	r1, [r7, #8]
 8000ba8:	607a      	str	r2, [r7, #4]
    while (len > 0) {
 8000baa:	e027      	b.n	8000bfc <SPI_ReceiveData+0x5e>
        // 1. Wait for RXNE bit to be set
        while (SPI_GetFlagStatus(pSPIx, SPI_RXNE_FLAG) == (uint8_t)FLAG_RESET) ;
 8000bac:	bf00      	nop
 8000bae:	2101      	movs	r1, #1
 8000bb0:	68f8      	ldr	r0, [r7, #12]
 8000bb2:	f000 f861 	bl	8000c78 <SPI_GetFlagStatus>
 8000bb6:	4603      	mov	r3, r0
 8000bb8:	2b00      	cmp	r3, #0
 8000bba:	d0f8      	beq.n	8000bae <SPI_ReceiveData+0x10>

        // Check if the DFF bit is set for 8 or 16-bits
        if (pSPIx->CR1 & (1 << SPI_CR1_DFF)) {
 8000bbc:	68fb      	ldr	r3, [r7, #12]
 8000bbe:	681b      	ldr	r3, [r3, #0]
 8000bc0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000bc4:	2b00      	cmp	r3, #0
 8000bc6:	d00e      	beq.n	8000be6 <SPI_ReceiveData+0x48>
            // 16-bit DFF
        	// 1. Load the data from DR to RxBuffer address
            *((uint16_t*)pRxBuffer) = pSPIx->DR ;
 8000bc8:	68fb      	ldr	r3, [r7, #12]
 8000bca:	68db      	ldr	r3, [r3, #12]
 8000bcc:	b29a      	uxth	r2, r3
 8000bce:	68bb      	ldr	r3, [r7, #8]
 8000bd0:	801a      	strh	r2, [r3, #0]
            len-- ;
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	3b01      	subs	r3, #1
 8000bd6:	607b      	str	r3, [r7, #4]
            len-- ;
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	3b01      	subs	r3, #1
 8000bdc:	607b      	str	r3, [r7, #4]
            (uint16_t*)pRxBuffer++ ;
 8000bde:	68bb      	ldr	r3, [r7, #8]
 8000be0:	3301      	adds	r3, #1
 8000be2:	60bb      	str	r3, [r7, #8]
 8000be4:	e00a      	b.n	8000bfc <SPI_ReceiveData+0x5e>
        }
        else {
            // 8-bit DFF
        	// 1. Load the data from DR to RxBuffer address
            *(pRxBuffer) = pSPIx->DR ;
 8000be6:	68fb      	ldr	r3, [r7, #12]
 8000be8:	68db      	ldr	r3, [r3, #12]
 8000bea:	b2da      	uxtb	r2, r3
 8000bec:	68bb      	ldr	r3, [r7, #8]
 8000bee:	701a      	strb	r2, [r3, #0]
            len-- ;
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	3b01      	subs	r3, #1
 8000bf4:	607b      	str	r3, [r7, #4]
            pRxBuffer++ ;
 8000bf6:	68bb      	ldr	r3, [r7, #8]
 8000bf8:	3301      	adds	r3, #1
 8000bfa:	60bb      	str	r3, [r7, #8]
    while (len > 0) {
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	2b00      	cmp	r3, #0
 8000c00:	d1d4      	bne.n	8000bac <SPI_ReceiveData+0xe>
        }
    }

}
 8000c02:	bf00      	nop
 8000c04:	bf00      	nop
 8000c06:	3710      	adds	r7, #16
 8000c08:	46bd      	mov	sp, r7
 8000c0a:	bd80      	pop	{r7, pc}

08000c0c <SPI_PeripheralControl>:
 * @return                  none
 * 
 * @note                    none
 * 
 */
void SPI_PeripheralControl(SPI_RegDef_t *pSPIx, uint8_t EnorDi) {
 8000c0c:	b480      	push	{r7}
 8000c0e:	b083      	sub	sp, #12
 8000c10:	af00      	add	r7, sp, #0
 8000c12:	6078      	str	r0, [r7, #4]
 8000c14:	460b      	mov	r3, r1
 8000c16:	70fb      	strb	r3, [r7, #3]
    if (EnorDi) {
 8000c18:	78fb      	ldrb	r3, [r7, #3]
 8000c1a:	2b00      	cmp	r3, #0
 8000c1c:	d006      	beq.n	8000c2c <SPI_PeripheralControl+0x20>
        pSPIx->CR1 |= (1 << SPI_CR1_SPE) ;
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	681b      	ldr	r3, [r3, #0]
 8000c22:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	601a      	str	r2, [r3, #0]
    }
    else {
        pSPIx->CR1 &= ~(1 << SPI_CR1_SPE) ;
    }
}
 8000c2a:	e005      	b.n	8000c38 <SPI_PeripheralControl+0x2c>
        pSPIx->CR1 &= ~(1 << SPI_CR1_SPE) ;
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	681b      	ldr	r3, [r3, #0]
 8000c30:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	601a      	str	r2, [r3, #0]
}
 8000c38:	bf00      	nop
 8000c3a:	370c      	adds	r7, #12
 8000c3c:	46bd      	mov	sp, r7
 8000c3e:	bc80      	pop	{r7}
 8000c40:	4770      	bx	lr

08000c42 <SPI_SSOEConfig>:
 * @return                  none
 * 
 * @note                    none
 * 
 */
void SPI_SSOEConfig(SPI_RegDef_t *pSPIx, uint8_t EnorDi) {
 8000c42:	b480      	push	{r7}
 8000c44:	b083      	sub	sp, #12
 8000c46:	af00      	add	r7, sp, #0
 8000c48:	6078      	str	r0, [r7, #4]
 8000c4a:	460b      	mov	r3, r1
 8000c4c:	70fb      	strb	r3, [r7, #3]
    if (EnorDi == ENABLE) {
 8000c4e:	78fb      	ldrb	r3, [r7, #3]
 8000c50:	2b01      	cmp	r3, #1
 8000c52:	d106      	bne.n	8000c62 <SPI_SSOEConfig+0x20>
        pSPIx->CR2 |= (1 << SPI_CR2_SSOE) ;
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	685b      	ldr	r3, [r3, #4]
 8000c58:	f043 0204 	orr.w	r2, r3, #4
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	605a      	str	r2, [r3, #4]
    }
    else {
        pSPIx->CR2 &= ~(1 << SPI_CR2_SSOE) ;
    }
}
 8000c60:	e005      	b.n	8000c6e <SPI_SSOEConfig+0x2c>
        pSPIx->CR2 &= ~(1 << SPI_CR2_SSOE) ;
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	685b      	ldr	r3, [r3, #4]
 8000c66:	f023 0204 	bic.w	r2, r3, #4
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	605a      	str	r2, [r3, #4]
}
 8000c6e:	bf00      	nop
 8000c70:	370c      	adds	r7, #12
 8000c72:	46bd      	mov	sp, r7
 8000c74:	bc80      	pop	{r7}
 8000c76:	4770      	bx	lr

08000c78 <SPI_GetFlagStatus>:
 * 
 * @return uint8_t          0 or 1
 * 
 * @note                    none
 */
uint8_t SPI_GetFlagStatus(SPI_RegDef_t *pSPIx, uint32_t FlagName) {
 8000c78:	b480      	push	{r7}
 8000c7a:	b083      	sub	sp, #12
 8000c7c:	af00      	add	r7, sp, #0
 8000c7e:	6078      	str	r0, [r7, #4]
 8000c80:	6039      	str	r1, [r7, #0]
    if (pSPIx->SR & FlagName) {
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	689a      	ldr	r2, [r3, #8]
 8000c86:	683b      	ldr	r3, [r7, #0]
 8000c88:	4013      	ands	r3, r2
 8000c8a:	2b00      	cmp	r3, #0
 8000c8c:	d001      	beq.n	8000c92 <SPI_GetFlagStatus+0x1a>
        return FLAG_SET ;
 8000c8e:	2301      	movs	r3, #1
 8000c90:	e000      	b.n	8000c94 <SPI_GetFlagStatus+0x1c>
    }
    return FLAG_RESET ;
 8000c92:	2300      	movs	r3, #0
}
 8000c94:	4618      	mov	r0, r3
 8000c96:	370c      	adds	r7, #12
 8000c98:	46bd      	mov	sp, r7
 8000c9a:	bc80      	pop	{r7}
 8000c9c:	4770      	bx	lr
	...

08000ca0 <main>:
void SPI2_Inits(void) ;
void GPIO_ButtonInit(void) ;
void delay(void) ;
uint8_t SPI_VerifyResponse(uint8_t ackByte) ;

int main(void) {
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	b084      	sub	sp, #16
 8000ca4:	af00      	add	r7, sp, #0
	initialise_monitor_handles();
 8000ca6:	f001 fc07 	bl	80024b8 <initialise_monitor_handles>
	printf("Application is running\n") ;
 8000caa:	4862      	ldr	r0, [pc, #392]	; (8000e34 <main+0x194>)
 8000cac:	f000 fa4a 	bl	8001144 <puts>
	 * PC3  --> SPI2_MOSI
	 * PB10 --> SPI2_SCLK
	 * PB9  --> SPI2_NSS
	 * ALT function mode: 5
	 */
	uint8_t dummyWrite = 0xFF ;
 8000cb0:	23ff      	movs	r3, #255	; 0xff
 8000cb2:	737b      	strb	r3, [r7, #13]
	uint8_t dummyRead = 0xFF ;
 8000cb4:	23ff      	movs	r3, #255	; 0xff
 8000cb6:	733b      	strb	r3, [r7, #12]

    // Configure GPIO button
    GPIO_ButtonInit() ;
 8000cb8:	f000 f924 	bl	8000f04 <GPIO_ButtonInit>

    // Configure GPIO to behave as SPI2 pins
    SPI2_GPIOInits() ;
 8000cbc:	f000 f8c6 	bl	8000e4c <SPI2_GPIOInits>

    // Initialize SPI2 peripheral parameters
    SPI2_Inits() ;
 8000cc0:	f000 f8fc 	bl	8000ebc <SPI2_Inits>
	printf("SPI initialization done\n") ;
 8000cc4:	485c      	ldr	r0, [pc, #368]	; (8000e38 <main+0x198>)
 8000cc6:	f000 fa3d 	bl	8001144 <puts>
     * Setting SSOE does NSS output enable.
     * The NSS pin is automatically managed by the hardware.
     * I.e., when SPE = 1, NSS will be pulled LOW,
     * and NSS pin will be HIGH when SPE = 0.
     */
    SPI_SSOEConfig(SPI2, ENABLE) ;
 8000cca:	2101      	movs	r1, #1
 8000ccc:	485b      	ldr	r0, [pc, #364]	; (8000e3c <main+0x19c>)
 8000cce:	f7ff ffb8 	bl	8000c42 <SPI_SSOEConfig>

    while (1) {
        // Wait until a button press
        while (!GPIO_ReadFromInputPin(GPIOA, GPIO_PIN_NO_0)) ;
 8000cd2:	bf00      	nop
 8000cd4:	2100      	movs	r1, #0
 8000cd6:	485a      	ldr	r0, [pc, #360]	; (8000e40 <main+0x1a0>)
 8000cd8:	f7ff fdfe 	bl	80008d8 <GPIO_ReadFromInputPin>
 8000cdc:	4603      	mov	r3, r0
 8000cde:	2b00      	cmp	r3, #0
 8000ce0:	d0f8      	beq.n	8000cd4 <main+0x34>

        // Debounce button press with software delay for clean read
        delay() ;
 8000ce2:	f000 f92d 	bl	8000f40 <delay>

        // Enable the SPI2 peripheral
        SPI_PeripheralControl(SPI2, ENABLE) ;
 8000ce6:	2101      	movs	r1, #1
 8000ce8:	4854      	ldr	r0, [pc, #336]	; (8000e3c <main+0x19c>)
 8000cea:	f7ff ff8f 	bl	8000c0c <SPI_PeripheralControl>

        /**************************************************************/
        /*          * 1. CMD_LED_CTRL <pin_no_1>  	<value_1>         */
        /**************************************************************/

        uint8_t commandCode = COMMAND_LED_CTRL ;
 8000cee:	2350      	movs	r3, #80	; 0x50
 8000cf0:	72fb      	strb	r3, [r7, #11]
        uint8_t ackByte ;
        uint8_t args[2] ;

        // Send command
        SPI_SendData(SPI2, &commandCode, 1) ;
 8000cf2:	f107 030b 	add.w	r3, r7, #11
 8000cf6:	2201      	movs	r2, #1
 8000cf8:	4619      	mov	r1, r3
 8000cfa:	4850      	ldr	r0, [pc, #320]	; (8000e3c <main+0x19c>)
 8000cfc:	f7ff ff18 	bl	8000b30 <SPI_SendData>

        // Perform dummy read to clear RXNE
        SPI_ReceiveData(SPI2, &dummyRead, 1) ;
 8000d00:	f107 030c 	add.w	r3, r7, #12
 8000d04:	2201      	movs	r2, #1
 8000d06:	4619      	mov	r1, r3
 8000d08:	484c      	ldr	r0, [pc, #304]	; (8000e3c <main+0x19c>)
 8000d0a:	f7ff ff48 	bl	8000b9e <SPI_ReceiveData>

        // Send some dummy bits (1 byte) to fetch response from the peripheral
        SPI_SendData(SPI2, &dummyWrite, 1) ;
 8000d0e:	f107 030d 	add.w	r3, r7, #13
 8000d12:	2201      	movs	r2, #1
 8000d14:	4619      	mov	r1, r3
 8000d16:	4849      	ldr	r0, [pc, #292]	; (8000e3c <main+0x19c>)
 8000d18:	f7ff ff0a 	bl	8000b30 <SPI_SendData>

        // Receive the ack byte received
        SPI_ReceiveData(SPI2, &ackByte, 1) ;
 8000d1c:	f107 030a 	add.w	r3, r7, #10
 8000d20:	2201      	movs	r2, #1
 8000d22:	4619      	mov	r1, r3
 8000d24:	4845      	ldr	r0, [pc, #276]	; (8000e3c <main+0x19c>)
 8000d26:	f7ff ff3a 	bl	8000b9e <SPI_ReceiveData>

        // Verify ack or nack
        if (SPI_VerifyResponse(ackByte)) {
 8000d2a:	7abb      	ldrb	r3, [r7, #10]
 8000d2c:	4618      	mov	r0, r3
 8000d2e:	f000 f91d 	bl	8000f6c <SPI_VerifyResponse>
 8000d32:	4603      	mov	r3, r0
 8000d34:	2b00      	cmp	r3, #0
 8000d36:	d01b      	beq.n	8000d70 <main+0xd0>
        	args[0] = UNOR3_LED_PIN ;
 8000d38:	2309      	movs	r3, #9
 8000d3a:	723b      	strb	r3, [r7, #8]
        	args[1] = LED_ON ;
 8000d3c:	2301      	movs	r3, #1
 8000d3e:	727b      	strb	r3, [r7, #9]

        	// Send arguments
        	SPI_SendData(SPI2, args, 2) ; /* 2 bytes sent */
 8000d40:	f107 0308 	add.w	r3, r7, #8
 8000d44:	2202      	movs	r2, #2
 8000d46:	4619      	mov	r1, r3
 8000d48:	483c      	ldr	r0, [pc, #240]	; (8000e3c <main+0x19c>)
 8000d4a:	f7ff fef1 	bl	8000b30 <SPI_SendData>

			// Wait for BSY bit to reset  -> This will indicate that SPI is not busy in communication
			while (SPI_GetFlagStatus(SPI2, SPI_BSY_FLAG) == FLAG_SET) ;
 8000d4e:	bf00      	nop
 8000d50:	2180      	movs	r1, #128	; 0x80
 8000d52:	483a      	ldr	r0, [pc, #232]	; (8000e3c <main+0x19c>)
 8000d54:	f7ff ff90 	bl	8000c78 <SPI_GetFlagStatus>
 8000d58:	4603      	mov	r3, r0
 8000d5a:	2b01      	cmp	r3, #1
 8000d5c:	d0f8      	beq.n	8000d50 <main+0xb0>
			// Clear the OVR flag by reading DR and SR
			uint8_t temp __attribute__((unused)) = SPI2->DR ; /* temp is declared, but not referenced */
 8000d5e:	4b37      	ldr	r3, [pc, #220]	; (8000e3c <main+0x19c>)
 8000d60:	68db      	ldr	r3, [r3, #12]
 8000d62:	73fb      	strb	r3, [r7, #15]
			temp = SPI2->SR ;
 8000d64:	4b35      	ldr	r3, [pc, #212]	; (8000e3c <main+0x19c>)
 8000d66:	689b      	ldr	r3, [r3, #8]
 8000d68:	73fb      	strb	r3, [r7, #15]

			printf("COMMAND_LED_CTRL executed\n") ;
 8000d6a:	4836      	ldr	r0, [pc, #216]	; (8000e44 <main+0x1a4>)
 8000d6c:	f000 f9ea 	bl	8001144 <puts>
        /*          2. CMD_SENSOR_READ <analog_pin_no_1				  */
        /**************************************************************/
       /*  */

        // Wait until a button press
        while (!GPIO_ReadFromInputPin(GPIOA, GPIO_PIN_NO_0)) ;
 8000d70:	bf00      	nop
 8000d72:	2100      	movs	r1, #0
 8000d74:	4832      	ldr	r0, [pc, #200]	; (8000e40 <main+0x1a0>)
 8000d76:	f7ff fdaf 	bl	80008d8 <GPIO_ReadFromInputPin>
 8000d7a:	4603      	mov	r3, r0
 8000d7c:	2b00      	cmp	r3, #0
 8000d7e:	d0f8      	beq.n	8000d72 <main+0xd2>

        // Debounce button press with software delay for clean read
        delay() ;
 8000d80:	f000 f8de 	bl	8000f40 <delay>

        commandCode = COMMAND_SENSOR_READ ;
 8000d84:	2351      	movs	r3, #81	; 0x51
 8000d86:	72fb      	strb	r3, [r7, #11]

        // Send command
        SPI_SendData(SPI2, &commandCode, 1) ;
 8000d88:	f107 030b 	add.w	r3, r7, #11
 8000d8c:	2201      	movs	r2, #1
 8000d8e:	4619      	mov	r1, r3
 8000d90:	482a      	ldr	r0, [pc, #168]	; (8000e3c <main+0x19c>)
 8000d92:	f7ff fecd 	bl	8000b30 <SPI_SendData>

        // Perform dummy read to clear RXNE
        SPI_ReceiveData(SPI2, &dummyRead, 1) ;
 8000d96:	f107 030c 	add.w	r3, r7, #12
 8000d9a:	2201      	movs	r2, #1
 8000d9c:	4619      	mov	r1, r3
 8000d9e:	4827      	ldr	r0, [pc, #156]	; (8000e3c <main+0x19c>)
 8000da0:	f7ff fefd 	bl	8000b9e <SPI_ReceiveData>

        // Send some dummy bits (1 byte) to fetch response from the peripheral
        SPI_SendData(SPI2, &dummyWrite, 1) ;
 8000da4:	f107 030d 	add.w	r3, r7, #13
 8000da8:	2201      	movs	r2, #1
 8000daa:	4619      	mov	r1, r3
 8000dac:	4823      	ldr	r0, [pc, #140]	; (8000e3c <main+0x19c>)
 8000dae:	f7ff febf 	bl	8000b30 <SPI_SendData>

        // Receive the ack byte received
        SPI_ReceiveData(SPI2, &ackByte, 1) ;
 8000db2:	f107 030a 	add.w	r3, r7, #10
 8000db6:	2201      	movs	r2, #1
 8000db8:	4619      	mov	r1, r3
 8000dba:	4820      	ldr	r0, [pc, #128]	; (8000e3c <main+0x19c>)
 8000dbc:	f7ff feef 	bl	8000b9e <SPI_ReceiveData>

        // Verify ack or nack
        if (SPI_VerifyResponse(ackByte)) {
 8000dc0:	7abb      	ldrb	r3, [r7, #10]
 8000dc2:	4618      	mov	r0, r3
 8000dc4:	f000 f8d2 	bl	8000f6c <SPI_VerifyResponse>
 8000dc8:	4603      	mov	r3, r0
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	d081      	beq.n	8000cd2 <main+0x32>
        	// Send arguments
        	args[0] = UNOR3_ANALOG_PIN_NO_0 ;
 8000dce:	2300      	movs	r3, #0
 8000dd0:	723b      	strb	r3, [r7, #8]

        	// Send arguments
        	SPI_SendData(SPI2, args, 1) ; /* 1 byte sent */
 8000dd2:	f107 0308 	add.w	r3, r7, #8
 8000dd6:	2201      	movs	r2, #1
 8000dd8:	4619      	mov	r1, r3
 8000dda:	4818      	ldr	r0, [pc, #96]	; (8000e3c <main+0x19c>)
 8000ddc:	f7ff fea8 	bl	8000b30 <SPI_SendData>

			// Do a dummy read to clear off the RXNE
			SPI_ReceiveData(SPI2, &dummyRead, 1) ;
 8000de0:	f107 030c 	add.w	r3, r7, #12
 8000de4:	2201      	movs	r2, #1
 8000de6:	4619      	mov	r1, r3
 8000de8:	4814      	ldr	r0, [pc, #80]	; (8000e3c <main+0x19c>)
 8000dea:	f7ff fed8 	bl	8000b9e <SPI_ReceiveData>

			// Insert delay so peripheral can have data ready
			delay();
 8000dee:	f000 f8a7 	bl	8000f40 <delay>

			// Send some dummy bits (1 byte) to fetch response from the peripheral
			SPI_SendData(SPI2, &dummyWrite, 1) ;
 8000df2:	f107 030d 	add.w	r3, r7, #13
 8000df6:	2201      	movs	r2, #1
 8000df8:	4619      	mov	r1, r3
 8000dfa:	4810      	ldr	r0, [pc, #64]	; (8000e3c <main+0x19c>)
 8000dfc:	f7ff fe98 	bl	8000b30 <SPI_SendData>

			uint8_t analogRead ;
			SPI_ReceiveData(SPI2, &analogRead, 1) ;
 8000e00:	1dfb      	adds	r3, r7, #7
 8000e02:	2201      	movs	r2, #1
 8000e04:	4619      	mov	r1, r3
 8000e06:	480d      	ldr	r0, [pc, #52]	; (8000e3c <main+0x19c>)
 8000e08:	f7ff fec9 	bl	8000b9e <SPI_ReceiveData>

			// Wait for BSY bit to reset  -> This will indicate that SPI is not busy in communication
			while (SPI_GetFlagStatus(SPI2, SPI_BSY_FLAG) == FLAG_SET) ;
 8000e0c:	bf00      	nop
 8000e0e:	2180      	movs	r1, #128	; 0x80
 8000e10:	480a      	ldr	r0, [pc, #40]	; (8000e3c <main+0x19c>)
 8000e12:	f7ff ff31 	bl	8000c78 <SPI_GetFlagStatus>
 8000e16:	4603      	mov	r3, r0
 8000e18:	2b01      	cmp	r3, #1
 8000e1a:	d0f8      	beq.n	8000e0e <main+0x16e>
			// Clear the OVR flag by reading DR and SR
			uint8_t temp __attribute__((unused)) = SPI2->DR ; /* temp is declared, but not referenced */
 8000e1c:	4b07      	ldr	r3, [pc, #28]	; (8000e3c <main+0x19c>)
 8000e1e:	68db      	ldr	r3, [r3, #12]
 8000e20:	73bb      	strb	r3, [r7, #14]
			temp = SPI2->SR ;
 8000e22:	4b06      	ldr	r3, [pc, #24]	; (8000e3c <main+0x19c>)
 8000e24:	689b      	ldr	r3, [r3, #8]
 8000e26:	73bb      	strb	r3, [r7, #14]

			printf("CMD_SENSOR_READ %d\n", analogRead) ;
 8000e28:	79fb      	ldrb	r3, [r7, #7]
 8000e2a:	4619      	mov	r1, r3
 8000e2c:	4806      	ldr	r0, [pc, #24]	; (8000e48 <main+0x1a8>)
 8000e2e:	f000 f903 	bl	8001038 <iprintf>
    while (1) {
 8000e32:	e74e      	b.n	8000cd2 <main+0x32>
 8000e34:	080025d4 	.word	0x080025d4
 8000e38:	080025ec 	.word	0x080025ec
 8000e3c:	40003800 	.word	0x40003800
 8000e40:	40020000 	.word	0x40020000
 8000e44:	08002604 	.word	0x08002604
 8000e48:	08002620 	.word	0x08002620

08000e4c <SPI2_GPIOInits>:
 * @return              none
 *
 * @note                none
 *
 */
void SPI2_GPIOInits(void) {
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	b084      	sub	sp, #16
 8000e50:	af00      	add	r7, sp, #0
    /*
     * Configure the SPI pins
     */

    GPIO_Handle_t SPIPins ;
    memset(&SPIPins, 0, sizeof(SPIPins)) ;
 8000e52:	1d3b      	adds	r3, r7, #4
 8000e54:	220c      	movs	r2, #12
 8000e56:	2100      	movs	r1, #0
 8000e58:	4618      	mov	r0, r3
 8000e5a:	f000 f8e5 	bl	8001028 <memset>

    SPIPins.pGPIOx = GPIOB ;
 8000e5e:	4b15      	ldr	r3, [pc, #84]	; (8000eb4 <SPI2_GPIOInits+0x68>)
 8000e60:	607b      	str	r3, [r7, #4]
    SPIPins.GPIO_PinConfig.GPIO_PinMode         = GPIO_MODE_ALT_FUN ;
 8000e62:	2302      	movs	r3, #2
 8000e64:	727b      	strb	r3, [r7, #9]
    SPIPins.GPIO_PinConfig.GPIO_PinSpeed        = GPIO_SPEED_FAST ;
 8000e66:	2302      	movs	r3, #2
 8000e68:	72bb      	strb	r3, [r7, #10]
    SPIPins.GPIO_PinConfig.GPIO_PinPuPdCtrl     = GPIO_NO_PUPD ;
 8000e6a:	2300      	movs	r3, #0
 8000e6c:	72fb      	strb	r3, [r7, #11]
    SPIPins.GPIO_PinConfig.GPIO_PinOPType       = GPIO_OP_TYPE_PP ;
 8000e6e:	2300      	movs	r3, #0
 8000e70:	733b      	strb	r3, [r7, #12]
    SPIPins.GPIO_PinConfig.GPIO_PinAltFunMode   = 5 ;
 8000e72:	2305      	movs	r3, #5
 8000e74:	737b      	strb	r3, [r7, #13]
    /*
     * Configure the SPI2 pins
     */

    // NSS / NPS
    SPIPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_9 ;
 8000e76:	2309      	movs	r3, #9
 8000e78:	723b      	strb	r3, [r7, #8]
    GPIO_Init(&SPIPins) ;
 8000e7a:	1d3b      	adds	r3, r7, #4
 8000e7c:	4618      	mov	r0, r3
 8000e7e:	f7ff fb61 	bl	8000544 <GPIO_Init>

    // SCK
    SPIPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_10 ; /* PB13 did not work */
 8000e82:	230a      	movs	r3, #10
 8000e84:	723b      	strb	r3, [r7, #8]
    GPIO_Init(&SPIPins) ;
 8000e86:	1d3b      	adds	r3, r7, #4
 8000e88:	4618      	mov	r0, r3
 8000e8a:	f7ff fb5b 	bl	8000544 <GPIO_Init>

    // MOSI / COPI
    SPIPins.pGPIOx = GPIOC ;
 8000e8e:	4b0a      	ldr	r3, [pc, #40]	; (8000eb8 <SPI2_GPIOInits+0x6c>)
 8000e90:	607b      	str	r3, [r7, #4]
    SPIPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_3 ; /* PB15 did not work */
 8000e92:	2303      	movs	r3, #3
 8000e94:	723b      	strb	r3, [r7, #8]
    GPIO_Init(&SPIPins) ;
 8000e96:	1d3b      	adds	r3, r7, #4
 8000e98:	4618      	mov	r0, r3
 8000e9a:	f7ff fb53 	bl	8000544 <GPIO_Init>

    // MISO / CIPO
    SPIPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_2 ; /* PB15 did not work */
 8000e9e:	2302      	movs	r3, #2
 8000ea0:	723b      	strb	r3, [r7, #8]
    GPIO_Init(&SPIPins) ;
 8000ea2:	1d3b      	adds	r3, r7, #4
 8000ea4:	4618      	mov	r0, r3
 8000ea6:	f7ff fb4d 	bl	8000544 <GPIO_Init>
}
 8000eaa:	bf00      	nop
 8000eac:	3710      	adds	r7, #16
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	bd80      	pop	{r7, pc}
 8000eb2:	bf00      	nop
 8000eb4:	40020400 	.word	0x40020400
 8000eb8:	40020800 	.word	0x40020800

08000ebc <SPI2_Inits>:
 * @return              none
 *
 * @note                none
 *
 */
void SPI2_Inits(void) {
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	b084      	sub	sp, #16
 8000ec0:	af00      	add	r7, sp, #0
    SPI_Handle_t SPI2Handle ;
    memset(&SPI2Handle, 0, sizeof(SPI2Handle)) ;
 8000ec2:	1d3b      	adds	r3, r7, #4
 8000ec4:	220c      	movs	r2, #12
 8000ec6:	2100      	movs	r1, #0
 8000ec8:	4618      	mov	r0, r3
 8000eca:	f000 f8ad 	bl	8001028 <memset>

    SPI2Handle.pSPIx = SPI2 ;
 8000ece:	4b0c      	ldr	r3, [pc, #48]	; (8000f00 <SPI2_Inits+0x44>)
 8000ed0:	607b      	str	r3, [r7, #4]
    SPI2Handle.SPIConfig.SPI_DeviceMode     = SPI_DEVICE_MODE_CONTROLLER ;
 8000ed2:	2301      	movs	r3, #1
 8000ed4:	723b      	strb	r3, [r7, #8]
    SPI2Handle.SPIConfig.SPI_BusConfig      = SPI_BUS_CONFIG_FD ;
 8000ed6:	2301      	movs	r3, #1
 8000ed8:	727b      	strb	r3, [r7, #9]
    SPI2Handle.SPIConfig.SPI_SclkSpeed      = SPI_SCLK_SPEED_DIV8 ;                     /* Generates SCK of 2 MHz */
 8000eda:	2302      	movs	r3, #2
 8000edc:	72bb      	strb	r3, [r7, #10]
    SPI2Handle.SPIConfig.SPI_DFF            = SPI_DFF_8BITS ;
 8000ede:	2300      	movs	r3, #0
 8000ee0:	72fb      	strb	r3, [r7, #11]
    SPI2Handle.SPIConfig.SPI_CPOL           = SPI_CPOL_LOW ;
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	733b      	strb	r3, [r7, #12]
    SPI2Handle.SPIConfig.SPI_CPHA           = SPI_CPHA_LOW ;
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	737b      	strb	r3, [r7, #13]
    SPI2Handle.SPIConfig.SPI_SSM            = SPI_SSM_DI ;                              /* Hardware slave management enabled for NSS pin */
 8000eea:	2300      	movs	r3, #0
 8000eec:	73bb      	strb	r3, [r7, #14]

    SPI_Init(&SPI2Handle) ;
 8000eee:	1d3b      	adds	r3, r7, #4
 8000ef0:	4618      	mov	r0, r3
 8000ef2:	f7ff fdbd 	bl	8000a70 <SPI_Init>
}
 8000ef6:	bf00      	nop
 8000ef8:	3710      	adds	r7, #16
 8000efa:	46bd      	mov	sp, r7
 8000efc:	bd80      	pop	{r7, pc}
 8000efe:	bf00      	nop
 8000f00:	40003800 	.word	0x40003800

08000f04 <GPIO_ButtonInit>:
 * @return              none
 *
 * @note                none
 *
 */
void GPIO_ButtonInit(void) {
 8000f04:	b580      	push	{r7, lr}
 8000f06:	b084      	sub	sp, #16
 8000f08:	af00      	add	r7, sp, #0
    GPIO_Handle_t GPIOHandle ;
    memset(&GPIOHandle, 0, sizeof(GPIOHandle)) ;
 8000f0a:	1d3b      	adds	r3, r7, #4
 8000f0c:	220c      	movs	r2, #12
 8000f0e:	2100      	movs	r1, #0
 8000f10:	4618      	mov	r0, r3
 8000f12:	f000 f889 	bl	8001028 <memset>

    GPIOHandle.pGPIOx = GPIOA ;
 8000f16:	4b09      	ldr	r3, [pc, #36]	; (8000f3c <GPIO_ButtonInit+0x38>)
 8000f18:	607b      	str	r3, [r7, #4]
    GPIOHandle.GPIO_PinConfig.GPIO_PinNumber    = GPIO_PIN_NO_0 ;
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	723b      	strb	r3, [r7, #8]
    GPIOHandle.GPIO_PinConfig.GPIO_PinMode      = GPIO_MODE_INPUT ;
 8000f1e:	2300      	movs	r3, #0
 8000f20:	727b      	strb	r3, [r7, #9]
    GPIOHandle.GPIO_PinConfig.GPIO_PinSpeed     = GPIO_SPEED_FAST ;
 8000f22:	2302      	movs	r3, #2
 8000f24:	72bb      	strb	r3, [r7, #10]
    GPIOHandle.GPIO_PinConfig.GPIO_PinPuPdCtrl  = GPIO_NO_PUPD ;
 8000f26:	2300      	movs	r3, #0
 8000f28:	72fb      	strb	r3, [r7, #11]

    GPIO_Init(&GPIOHandle) ;
 8000f2a:	1d3b      	adds	r3, r7, #4
 8000f2c:	4618      	mov	r0, r3
 8000f2e:	f7ff fb09 	bl	8000544 <GPIO_Init>
}
 8000f32:	bf00      	nop
 8000f34:	3710      	adds	r7, #16
 8000f36:	46bd      	mov	sp, r7
 8000f38:	bd80      	pop	{r7, pc}
 8000f3a:	bf00      	nop
 8000f3c:	40020000 	.word	0x40020000

08000f40 <delay>:
 * @return      		none
 *
 * @note        		none
 *
 */
void delay(void) {
 8000f40:	b480      	push	{r7}
 8000f42:	b083      	sub	sp, #12
 8000f44:	af00      	add	r7, sp, #0
    for (uint32_t i = 0 ; i < 500000/2 ; i++) ;
 8000f46:	2300      	movs	r3, #0
 8000f48:	607b      	str	r3, [r7, #4]
 8000f4a:	e002      	b.n	8000f52 <delay+0x12>
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	3301      	adds	r3, #1
 8000f50:	607b      	str	r3, [r7, #4]
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	4a04      	ldr	r2, [pc, #16]	; (8000f68 <delay+0x28>)
 8000f56:	4293      	cmp	r3, r2
 8000f58:	d9f8      	bls.n	8000f4c <delay+0xc>
}
 8000f5a:	bf00      	nop
 8000f5c:	bf00      	nop
 8000f5e:	370c      	adds	r7, #12
 8000f60:	46bd      	mov	sp, r7
 8000f62:	bc80      	pop	{r7}
 8000f64:	4770      	bx	lr
 8000f66:	bf00      	nop
 8000f68:	0003d08f 	.word	0x0003d08f

08000f6c <SPI_VerifyResponse>:
 *
 * @pre 				Controller sends message to peripheral
 * @post				Controller Receives message and gets either ack or nack
 * @param ackByte 		ack or nack
 */
uint8_t SPI_VerifyResponse(uint8_t ackByte) {
 8000f6c:	b480      	push	{r7}
 8000f6e:	b083      	sub	sp, #12
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	4603      	mov	r3, r0
 8000f74:	71fb      	strb	r3, [r7, #7]
	if (ackByte == 0xF5) {
 8000f76:	79fb      	ldrb	r3, [r7, #7]
 8000f78:	2bf5      	cmp	r3, #245	; 0xf5
 8000f7a:	d101      	bne.n	8000f80 <SPI_VerifyResponse+0x14>
		// ack
		return 1 ;
 8000f7c:	2301      	movs	r3, #1
 8000f7e:	e000      	b.n	8000f82 <SPI_VerifyResponse+0x16>
	}
	// nack
	return 0 ;
 8000f80:	2300      	movs	r3, #0
}
 8000f82:	4618      	mov	r0, r3
 8000f84:	370c      	adds	r7, #12
 8000f86:	46bd      	mov	sp, r7
 8000f88:	bc80      	pop	{r7}
 8000f8a:	4770      	bx	lr

08000f8c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000f8c:	480d      	ldr	r0, [pc, #52]	; (8000fc4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000f8e:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000f90:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000f94:	480c      	ldr	r0, [pc, #48]	; (8000fc8 <LoopForever+0x6>)
  ldr r1, =_edata
 8000f96:	490d      	ldr	r1, [pc, #52]	; (8000fcc <LoopForever+0xa>)
  ldr r2, =_sidata
 8000f98:	4a0d      	ldr	r2, [pc, #52]	; (8000fd0 <LoopForever+0xe>)
  movs r3, #0
 8000f9a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f9c:	e002      	b.n	8000fa4 <LoopCopyDataInit>

08000f9e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f9e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000fa0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000fa2:	3304      	adds	r3, #4

08000fa4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000fa4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000fa6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000fa8:	d3f9      	bcc.n	8000f9e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000faa:	4a0a      	ldr	r2, [pc, #40]	; (8000fd4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000fac:	4c0a      	ldr	r4, [pc, #40]	; (8000fd8 <LoopForever+0x16>)
  movs r3, #0
 8000fae:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000fb0:	e001      	b.n	8000fb6 <LoopFillZerobss>

08000fb2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000fb2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000fb4:	3204      	adds	r2, #4

08000fb6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000fb6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000fb8:	d3fb      	bcc.n	8000fb2 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000fba:	f000 f811 	bl	8000fe0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000fbe:	f7ff fe6f 	bl	8000ca0 <main>

08000fc2 <LoopForever>:

LoopForever:
  b LoopForever
 8000fc2:	e7fe      	b.n	8000fc2 <LoopForever>
  ldr   r0, =_estack
 8000fc4:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8000fc8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000fcc:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000fd0:	080026f0 	.word	0x080026f0
  ldr r2, =_sbss
 8000fd4:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000fd8:	2000014c 	.word	0x2000014c

08000fdc <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000fdc:	e7fe      	b.n	8000fdc <ADC_IRQHandler>
	...

08000fe0 <__libc_init_array>:
 8000fe0:	b570      	push	{r4, r5, r6, lr}
 8000fe2:	4d0d      	ldr	r5, [pc, #52]	; (8001018 <__libc_init_array+0x38>)
 8000fe4:	4c0d      	ldr	r4, [pc, #52]	; (800101c <__libc_init_array+0x3c>)
 8000fe6:	1b64      	subs	r4, r4, r5
 8000fe8:	10a4      	asrs	r4, r4, #2
 8000fea:	2600      	movs	r6, #0
 8000fec:	42a6      	cmp	r6, r4
 8000fee:	d109      	bne.n	8001004 <__libc_init_array+0x24>
 8000ff0:	4d0b      	ldr	r5, [pc, #44]	; (8001020 <__libc_init_array+0x40>)
 8000ff2:	4c0c      	ldr	r4, [pc, #48]	; (8001024 <__libc_init_array+0x44>)
 8000ff4:	f001 fae2 	bl	80025bc <_init>
 8000ff8:	1b64      	subs	r4, r4, r5
 8000ffa:	10a4      	asrs	r4, r4, #2
 8000ffc:	2600      	movs	r6, #0
 8000ffe:	42a6      	cmp	r6, r4
 8001000:	d105      	bne.n	800100e <__libc_init_array+0x2e>
 8001002:	bd70      	pop	{r4, r5, r6, pc}
 8001004:	f855 3b04 	ldr.w	r3, [r5], #4
 8001008:	4798      	blx	r3
 800100a:	3601      	adds	r6, #1
 800100c:	e7ee      	b.n	8000fec <__libc_init_array+0xc>
 800100e:	f855 3b04 	ldr.w	r3, [r5], #4
 8001012:	4798      	blx	r3
 8001014:	3601      	adds	r6, #1
 8001016:	e7f2      	b.n	8000ffe <__libc_init_array+0x1e>
 8001018:	080026e8 	.word	0x080026e8
 800101c:	080026e8 	.word	0x080026e8
 8001020:	080026e8 	.word	0x080026e8
 8001024:	080026ec 	.word	0x080026ec

08001028 <memset>:
 8001028:	4402      	add	r2, r0
 800102a:	4603      	mov	r3, r0
 800102c:	4293      	cmp	r3, r2
 800102e:	d100      	bne.n	8001032 <memset+0xa>
 8001030:	4770      	bx	lr
 8001032:	f803 1b01 	strb.w	r1, [r3], #1
 8001036:	e7f9      	b.n	800102c <memset+0x4>

08001038 <iprintf>:
 8001038:	b40f      	push	{r0, r1, r2, r3}
 800103a:	4b0a      	ldr	r3, [pc, #40]	; (8001064 <iprintf+0x2c>)
 800103c:	b513      	push	{r0, r1, r4, lr}
 800103e:	681c      	ldr	r4, [r3, #0]
 8001040:	b124      	cbz	r4, 800104c <iprintf+0x14>
 8001042:	69a3      	ldr	r3, [r4, #24]
 8001044:	b913      	cbnz	r3, 800104c <iprintf+0x14>
 8001046:	4620      	mov	r0, r4
 8001048:	f000 fa5a 	bl	8001500 <__sinit>
 800104c:	ab05      	add	r3, sp, #20
 800104e:	9a04      	ldr	r2, [sp, #16]
 8001050:	68a1      	ldr	r1, [r4, #8]
 8001052:	9301      	str	r3, [sp, #4]
 8001054:	4620      	mov	r0, r4
 8001056:	f000 fc5f 	bl	8001918 <_vfiprintf_r>
 800105a:	b002      	add	sp, #8
 800105c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001060:	b004      	add	sp, #16
 8001062:	4770      	bx	lr
 8001064:	20000000 	.word	0x20000000

08001068 <_puts_r>:
 8001068:	b570      	push	{r4, r5, r6, lr}
 800106a:	460e      	mov	r6, r1
 800106c:	4605      	mov	r5, r0
 800106e:	b118      	cbz	r0, 8001078 <_puts_r+0x10>
 8001070:	6983      	ldr	r3, [r0, #24]
 8001072:	b90b      	cbnz	r3, 8001078 <_puts_r+0x10>
 8001074:	f000 fa44 	bl	8001500 <__sinit>
 8001078:	69ab      	ldr	r3, [r5, #24]
 800107a:	68ac      	ldr	r4, [r5, #8]
 800107c:	b913      	cbnz	r3, 8001084 <_puts_r+0x1c>
 800107e:	4628      	mov	r0, r5
 8001080:	f000 fa3e 	bl	8001500 <__sinit>
 8001084:	4b2c      	ldr	r3, [pc, #176]	; (8001138 <_puts_r+0xd0>)
 8001086:	429c      	cmp	r4, r3
 8001088:	d120      	bne.n	80010cc <_puts_r+0x64>
 800108a:	686c      	ldr	r4, [r5, #4]
 800108c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800108e:	07db      	lsls	r3, r3, #31
 8001090:	d405      	bmi.n	800109e <_puts_r+0x36>
 8001092:	89a3      	ldrh	r3, [r4, #12]
 8001094:	0598      	lsls	r0, r3, #22
 8001096:	d402      	bmi.n	800109e <_puts_r+0x36>
 8001098:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800109a:	f000 facf 	bl	800163c <__retarget_lock_acquire_recursive>
 800109e:	89a3      	ldrh	r3, [r4, #12]
 80010a0:	0719      	lsls	r1, r3, #28
 80010a2:	d51d      	bpl.n	80010e0 <_puts_r+0x78>
 80010a4:	6923      	ldr	r3, [r4, #16]
 80010a6:	b1db      	cbz	r3, 80010e0 <_puts_r+0x78>
 80010a8:	3e01      	subs	r6, #1
 80010aa:	68a3      	ldr	r3, [r4, #8]
 80010ac:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80010b0:	3b01      	subs	r3, #1
 80010b2:	60a3      	str	r3, [r4, #8]
 80010b4:	bb39      	cbnz	r1, 8001106 <_puts_r+0x9e>
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	da38      	bge.n	800112c <_puts_r+0xc4>
 80010ba:	4622      	mov	r2, r4
 80010bc:	210a      	movs	r1, #10
 80010be:	4628      	mov	r0, r5
 80010c0:	f000 f848 	bl	8001154 <__swbuf_r>
 80010c4:	3001      	adds	r0, #1
 80010c6:	d011      	beq.n	80010ec <_puts_r+0x84>
 80010c8:	250a      	movs	r5, #10
 80010ca:	e011      	b.n	80010f0 <_puts_r+0x88>
 80010cc:	4b1b      	ldr	r3, [pc, #108]	; (800113c <_puts_r+0xd4>)
 80010ce:	429c      	cmp	r4, r3
 80010d0:	d101      	bne.n	80010d6 <_puts_r+0x6e>
 80010d2:	68ac      	ldr	r4, [r5, #8]
 80010d4:	e7da      	b.n	800108c <_puts_r+0x24>
 80010d6:	4b1a      	ldr	r3, [pc, #104]	; (8001140 <_puts_r+0xd8>)
 80010d8:	429c      	cmp	r4, r3
 80010da:	bf08      	it	eq
 80010dc:	68ec      	ldreq	r4, [r5, #12]
 80010de:	e7d5      	b.n	800108c <_puts_r+0x24>
 80010e0:	4621      	mov	r1, r4
 80010e2:	4628      	mov	r0, r5
 80010e4:	f000 f888 	bl	80011f8 <__swsetup_r>
 80010e8:	2800      	cmp	r0, #0
 80010ea:	d0dd      	beq.n	80010a8 <_puts_r+0x40>
 80010ec:	f04f 35ff 	mov.w	r5, #4294967295
 80010f0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80010f2:	07da      	lsls	r2, r3, #31
 80010f4:	d405      	bmi.n	8001102 <_puts_r+0x9a>
 80010f6:	89a3      	ldrh	r3, [r4, #12]
 80010f8:	059b      	lsls	r3, r3, #22
 80010fa:	d402      	bmi.n	8001102 <_puts_r+0x9a>
 80010fc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80010fe:	f000 fa9e 	bl	800163e <__retarget_lock_release_recursive>
 8001102:	4628      	mov	r0, r5
 8001104:	bd70      	pop	{r4, r5, r6, pc}
 8001106:	2b00      	cmp	r3, #0
 8001108:	da04      	bge.n	8001114 <_puts_r+0xac>
 800110a:	69a2      	ldr	r2, [r4, #24]
 800110c:	429a      	cmp	r2, r3
 800110e:	dc06      	bgt.n	800111e <_puts_r+0xb6>
 8001110:	290a      	cmp	r1, #10
 8001112:	d004      	beq.n	800111e <_puts_r+0xb6>
 8001114:	6823      	ldr	r3, [r4, #0]
 8001116:	1c5a      	adds	r2, r3, #1
 8001118:	6022      	str	r2, [r4, #0]
 800111a:	7019      	strb	r1, [r3, #0]
 800111c:	e7c5      	b.n	80010aa <_puts_r+0x42>
 800111e:	4622      	mov	r2, r4
 8001120:	4628      	mov	r0, r5
 8001122:	f000 f817 	bl	8001154 <__swbuf_r>
 8001126:	3001      	adds	r0, #1
 8001128:	d1bf      	bne.n	80010aa <_puts_r+0x42>
 800112a:	e7df      	b.n	80010ec <_puts_r+0x84>
 800112c:	6823      	ldr	r3, [r4, #0]
 800112e:	250a      	movs	r5, #10
 8001130:	1c5a      	adds	r2, r3, #1
 8001132:	6022      	str	r2, [r4, #0]
 8001134:	701d      	strb	r5, [r3, #0]
 8001136:	e7db      	b.n	80010f0 <_puts_r+0x88>
 8001138:	08002658 	.word	0x08002658
 800113c:	08002678 	.word	0x08002678
 8001140:	08002638 	.word	0x08002638

08001144 <puts>:
 8001144:	4b02      	ldr	r3, [pc, #8]	; (8001150 <puts+0xc>)
 8001146:	4601      	mov	r1, r0
 8001148:	6818      	ldr	r0, [r3, #0]
 800114a:	f7ff bf8d 	b.w	8001068 <_puts_r>
 800114e:	bf00      	nop
 8001150:	20000000 	.word	0x20000000

08001154 <__swbuf_r>:
 8001154:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001156:	460e      	mov	r6, r1
 8001158:	4614      	mov	r4, r2
 800115a:	4605      	mov	r5, r0
 800115c:	b118      	cbz	r0, 8001166 <__swbuf_r+0x12>
 800115e:	6983      	ldr	r3, [r0, #24]
 8001160:	b90b      	cbnz	r3, 8001166 <__swbuf_r+0x12>
 8001162:	f000 f9cd 	bl	8001500 <__sinit>
 8001166:	4b21      	ldr	r3, [pc, #132]	; (80011ec <__swbuf_r+0x98>)
 8001168:	429c      	cmp	r4, r3
 800116a:	d12b      	bne.n	80011c4 <__swbuf_r+0x70>
 800116c:	686c      	ldr	r4, [r5, #4]
 800116e:	69a3      	ldr	r3, [r4, #24]
 8001170:	60a3      	str	r3, [r4, #8]
 8001172:	89a3      	ldrh	r3, [r4, #12]
 8001174:	071a      	lsls	r2, r3, #28
 8001176:	d52f      	bpl.n	80011d8 <__swbuf_r+0x84>
 8001178:	6923      	ldr	r3, [r4, #16]
 800117a:	b36b      	cbz	r3, 80011d8 <__swbuf_r+0x84>
 800117c:	6923      	ldr	r3, [r4, #16]
 800117e:	6820      	ldr	r0, [r4, #0]
 8001180:	1ac0      	subs	r0, r0, r3
 8001182:	6963      	ldr	r3, [r4, #20]
 8001184:	b2f6      	uxtb	r6, r6
 8001186:	4283      	cmp	r3, r0
 8001188:	4637      	mov	r7, r6
 800118a:	dc04      	bgt.n	8001196 <__swbuf_r+0x42>
 800118c:	4621      	mov	r1, r4
 800118e:	4628      	mov	r0, r5
 8001190:	f000 f922 	bl	80013d8 <_fflush_r>
 8001194:	bb30      	cbnz	r0, 80011e4 <__swbuf_r+0x90>
 8001196:	68a3      	ldr	r3, [r4, #8]
 8001198:	3b01      	subs	r3, #1
 800119a:	60a3      	str	r3, [r4, #8]
 800119c:	6823      	ldr	r3, [r4, #0]
 800119e:	1c5a      	adds	r2, r3, #1
 80011a0:	6022      	str	r2, [r4, #0]
 80011a2:	701e      	strb	r6, [r3, #0]
 80011a4:	6963      	ldr	r3, [r4, #20]
 80011a6:	3001      	adds	r0, #1
 80011a8:	4283      	cmp	r3, r0
 80011aa:	d004      	beq.n	80011b6 <__swbuf_r+0x62>
 80011ac:	89a3      	ldrh	r3, [r4, #12]
 80011ae:	07db      	lsls	r3, r3, #31
 80011b0:	d506      	bpl.n	80011c0 <__swbuf_r+0x6c>
 80011b2:	2e0a      	cmp	r6, #10
 80011b4:	d104      	bne.n	80011c0 <__swbuf_r+0x6c>
 80011b6:	4621      	mov	r1, r4
 80011b8:	4628      	mov	r0, r5
 80011ba:	f000 f90d 	bl	80013d8 <_fflush_r>
 80011be:	b988      	cbnz	r0, 80011e4 <__swbuf_r+0x90>
 80011c0:	4638      	mov	r0, r7
 80011c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80011c4:	4b0a      	ldr	r3, [pc, #40]	; (80011f0 <__swbuf_r+0x9c>)
 80011c6:	429c      	cmp	r4, r3
 80011c8:	d101      	bne.n	80011ce <__swbuf_r+0x7a>
 80011ca:	68ac      	ldr	r4, [r5, #8]
 80011cc:	e7cf      	b.n	800116e <__swbuf_r+0x1a>
 80011ce:	4b09      	ldr	r3, [pc, #36]	; (80011f4 <__swbuf_r+0xa0>)
 80011d0:	429c      	cmp	r4, r3
 80011d2:	bf08      	it	eq
 80011d4:	68ec      	ldreq	r4, [r5, #12]
 80011d6:	e7ca      	b.n	800116e <__swbuf_r+0x1a>
 80011d8:	4621      	mov	r1, r4
 80011da:	4628      	mov	r0, r5
 80011dc:	f000 f80c 	bl	80011f8 <__swsetup_r>
 80011e0:	2800      	cmp	r0, #0
 80011e2:	d0cb      	beq.n	800117c <__swbuf_r+0x28>
 80011e4:	f04f 37ff 	mov.w	r7, #4294967295
 80011e8:	e7ea      	b.n	80011c0 <__swbuf_r+0x6c>
 80011ea:	bf00      	nop
 80011ec:	08002658 	.word	0x08002658
 80011f0:	08002678 	.word	0x08002678
 80011f4:	08002638 	.word	0x08002638

080011f8 <__swsetup_r>:
 80011f8:	4b32      	ldr	r3, [pc, #200]	; (80012c4 <__swsetup_r+0xcc>)
 80011fa:	b570      	push	{r4, r5, r6, lr}
 80011fc:	681d      	ldr	r5, [r3, #0]
 80011fe:	4606      	mov	r6, r0
 8001200:	460c      	mov	r4, r1
 8001202:	b125      	cbz	r5, 800120e <__swsetup_r+0x16>
 8001204:	69ab      	ldr	r3, [r5, #24]
 8001206:	b913      	cbnz	r3, 800120e <__swsetup_r+0x16>
 8001208:	4628      	mov	r0, r5
 800120a:	f000 f979 	bl	8001500 <__sinit>
 800120e:	4b2e      	ldr	r3, [pc, #184]	; (80012c8 <__swsetup_r+0xd0>)
 8001210:	429c      	cmp	r4, r3
 8001212:	d10f      	bne.n	8001234 <__swsetup_r+0x3c>
 8001214:	686c      	ldr	r4, [r5, #4]
 8001216:	89a3      	ldrh	r3, [r4, #12]
 8001218:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800121c:	0719      	lsls	r1, r3, #28
 800121e:	d42c      	bmi.n	800127a <__swsetup_r+0x82>
 8001220:	06dd      	lsls	r5, r3, #27
 8001222:	d411      	bmi.n	8001248 <__swsetup_r+0x50>
 8001224:	2309      	movs	r3, #9
 8001226:	6033      	str	r3, [r6, #0]
 8001228:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800122c:	81a3      	strh	r3, [r4, #12]
 800122e:	f04f 30ff 	mov.w	r0, #4294967295
 8001232:	e03e      	b.n	80012b2 <__swsetup_r+0xba>
 8001234:	4b25      	ldr	r3, [pc, #148]	; (80012cc <__swsetup_r+0xd4>)
 8001236:	429c      	cmp	r4, r3
 8001238:	d101      	bne.n	800123e <__swsetup_r+0x46>
 800123a:	68ac      	ldr	r4, [r5, #8]
 800123c:	e7eb      	b.n	8001216 <__swsetup_r+0x1e>
 800123e:	4b24      	ldr	r3, [pc, #144]	; (80012d0 <__swsetup_r+0xd8>)
 8001240:	429c      	cmp	r4, r3
 8001242:	bf08      	it	eq
 8001244:	68ec      	ldreq	r4, [r5, #12]
 8001246:	e7e6      	b.n	8001216 <__swsetup_r+0x1e>
 8001248:	0758      	lsls	r0, r3, #29
 800124a:	d512      	bpl.n	8001272 <__swsetup_r+0x7a>
 800124c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800124e:	b141      	cbz	r1, 8001262 <__swsetup_r+0x6a>
 8001250:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8001254:	4299      	cmp	r1, r3
 8001256:	d002      	beq.n	800125e <__swsetup_r+0x66>
 8001258:	4630      	mov	r0, r6
 800125a:	f000 fa57 	bl	800170c <_free_r>
 800125e:	2300      	movs	r3, #0
 8001260:	6363      	str	r3, [r4, #52]	; 0x34
 8001262:	89a3      	ldrh	r3, [r4, #12]
 8001264:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8001268:	81a3      	strh	r3, [r4, #12]
 800126a:	2300      	movs	r3, #0
 800126c:	6063      	str	r3, [r4, #4]
 800126e:	6923      	ldr	r3, [r4, #16]
 8001270:	6023      	str	r3, [r4, #0]
 8001272:	89a3      	ldrh	r3, [r4, #12]
 8001274:	f043 0308 	orr.w	r3, r3, #8
 8001278:	81a3      	strh	r3, [r4, #12]
 800127a:	6923      	ldr	r3, [r4, #16]
 800127c:	b94b      	cbnz	r3, 8001292 <__swsetup_r+0x9a>
 800127e:	89a3      	ldrh	r3, [r4, #12]
 8001280:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8001284:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001288:	d003      	beq.n	8001292 <__swsetup_r+0x9a>
 800128a:	4621      	mov	r1, r4
 800128c:	4630      	mov	r0, r6
 800128e:	f000 f9fd 	bl	800168c <__smakebuf_r>
 8001292:	89a0      	ldrh	r0, [r4, #12]
 8001294:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8001298:	f010 0301 	ands.w	r3, r0, #1
 800129c:	d00a      	beq.n	80012b4 <__swsetup_r+0xbc>
 800129e:	2300      	movs	r3, #0
 80012a0:	60a3      	str	r3, [r4, #8]
 80012a2:	6963      	ldr	r3, [r4, #20]
 80012a4:	425b      	negs	r3, r3
 80012a6:	61a3      	str	r3, [r4, #24]
 80012a8:	6923      	ldr	r3, [r4, #16]
 80012aa:	b943      	cbnz	r3, 80012be <__swsetup_r+0xc6>
 80012ac:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80012b0:	d1ba      	bne.n	8001228 <__swsetup_r+0x30>
 80012b2:	bd70      	pop	{r4, r5, r6, pc}
 80012b4:	0781      	lsls	r1, r0, #30
 80012b6:	bf58      	it	pl
 80012b8:	6963      	ldrpl	r3, [r4, #20]
 80012ba:	60a3      	str	r3, [r4, #8]
 80012bc:	e7f4      	b.n	80012a8 <__swsetup_r+0xb0>
 80012be:	2000      	movs	r0, #0
 80012c0:	e7f7      	b.n	80012b2 <__swsetup_r+0xba>
 80012c2:	bf00      	nop
 80012c4:	20000000 	.word	0x20000000
 80012c8:	08002658 	.word	0x08002658
 80012cc:	08002678 	.word	0x08002678
 80012d0:	08002638 	.word	0x08002638

080012d4 <__sflush_r>:
 80012d4:	898a      	ldrh	r2, [r1, #12]
 80012d6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80012d8:	4605      	mov	r5, r0
 80012da:	0710      	lsls	r0, r2, #28
 80012dc:	460c      	mov	r4, r1
 80012de:	d457      	bmi.n	8001390 <__sflush_r+0xbc>
 80012e0:	684b      	ldr	r3, [r1, #4]
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	dc04      	bgt.n	80012f0 <__sflush_r+0x1c>
 80012e6:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	dc01      	bgt.n	80012f0 <__sflush_r+0x1c>
 80012ec:	2000      	movs	r0, #0
 80012ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80012f0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80012f2:	2e00      	cmp	r6, #0
 80012f4:	d0fa      	beq.n	80012ec <__sflush_r+0x18>
 80012f6:	2300      	movs	r3, #0
 80012f8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80012fc:	682f      	ldr	r7, [r5, #0]
 80012fe:	602b      	str	r3, [r5, #0]
 8001300:	d032      	beq.n	8001368 <__sflush_r+0x94>
 8001302:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8001304:	89a3      	ldrh	r3, [r4, #12]
 8001306:	075a      	lsls	r2, r3, #29
 8001308:	d505      	bpl.n	8001316 <__sflush_r+0x42>
 800130a:	6863      	ldr	r3, [r4, #4]
 800130c:	1ac0      	subs	r0, r0, r3
 800130e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8001310:	b10b      	cbz	r3, 8001316 <__sflush_r+0x42>
 8001312:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001314:	1ac0      	subs	r0, r0, r3
 8001316:	2300      	movs	r3, #0
 8001318:	4602      	mov	r2, r0
 800131a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800131c:	6a21      	ldr	r1, [r4, #32]
 800131e:	4628      	mov	r0, r5
 8001320:	47b0      	blx	r6
 8001322:	1c43      	adds	r3, r0, #1
 8001324:	89a3      	ldrh	r3, [r4, #12]
 8001326:	d106      	bne.n	8001336 <__sflush_r+0x62>
 8001328:	6829      	ldr	r1, [r5, #0]
 800132a:	291d      	cmp	r1, #29
 800132c:	d82c      	bhi.n	8001388 <__sflush_r+0xb4>
 800132e:	4a29      	ldr	r2, [pc, #164]	; (80013d4 <__sflush_r+0x100>)
 8001330:	40ca      	lsrs	r2, r1
 8001332:	07d6      	lsls	r6, r2, #31
 8001334:	d528      	bpl.n	8001388 <__sflush_r+0xb4>
 8001336:	2200      	movs	r2, #0
 8001338:	6062      	str	r2, [r4, #4]
 800133a:	04d9      	lsls	r1, r3, #19
 800133c:	6922      	ldr	r2, [r4, #16]
 800133e:	6022      	str	r2, [r4, #0]
 8001340:	d504      	bpl.n	800134c <__sflush_r+0x78>
 8001342:	1c42      	adds	r2, r0, #1
 8001344:	d101      	bne.n	800134a <__sflush_r+0x76>
 8001346:	682b      	ldr	r3, [r5, #0]
 8001348:	b903      	cbnz	r3, 800134c <__sflush_r+0x78>
 800134a:	6560      	str	r0, [r4, #84]	; 0x54
 800134c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800134e:	602f      	str	r7, [r5, #0]
 8001350:	2900      	cmp	r1, #0
 8001352:	d0cb      	beq.n	80012ec <__sflush_r+0x18>
 8001354:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8001358:	4299      	cmp	r1, r3
 800135a:	d002      	beq.n	8001362 <__sflush_r+0x8e>
 800135c:	4628      	mov	r0, r5
 800135e:	f000 f9d5 	bl	800170c <_free_r>
 8001362:	2000      	movs	r0, #0
 8001364:	6360      	str	r0, [r4, #52]	; 0x34
 8001366:	e7c2      	b.n	80012ee <__sflush_r+0x1a>
 8001368:	6a21      	ldr	r1, [r4, #32]
 800136a:	2301      	movs	r3, #1
 800136c:	4628      	mov	r0, r5
 800136e:	47b0      	blx	r6
 8001370:	1c41      	adds	r1, r0, #1
 8001372:	d1c7      	bne.n	8001304 <__sflush_r+0x30>
 8001374:	682b      	ldr	r3, [r5, #0]
 8001376:	2b00      	cmp	r3, #0
 8001378:	d0c4      	beq.n	8001304 <__sflush_r+0x30>
 800137a:	2b1d      	cmp	r3, #29
 800137c:	d001      	beq.n	8001382 <__sflush_r+0xae>
 800137e:	2b16      	cmp	r3, #22
 8001380:	d101      	bne.n	8001386 <__sflush_r+0xb2>
 8001382:	602f      	str	r7, [r5, #0]
 8001384:	e7b2      	b.n	80012ec <__sflush_r+0x18>
 8001386:	89a3      	ldrh	r3, [r4, #12]
 8001388:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800138c:	81a3      	strh	r3, [r4, #12]
 800138e:	e7ae      	b.n	80012ee <__sflush_r+0x1a>
 8001390:	690f      	ldr	r7, [r1, #16]
 8001392:	2f00      	cmp	r7, #0
 8001394:	d0aa      	beq.n	80012ec <__sflush_r+0x18>
 8001396:	0793      	lsls	r3, r2, #30
 8001398:	680e      	ldr	r6, [r1, #0]
 800139a:	bf08      	it	eq
 800139c:	694b      	ldreq	r3, [r1, #20]
 800139e:	600f      	str	r7, [r1, #0]
 80013a0:	bf18      	it	ne
 80013a2:	2300      	movne	r3, #0
 80013a4:	1bf6      	subs	r6, r6, r7
 80013a6:	608b      	str	r3, [r1, #8]
 80013a8:	2e00      	cmp	r6, #0
 80013aa:	dd9f      	ble.n	80012ec <__sflush_r+0x18>
 80013ac:	6a21      	ldr	r1, [r4, #32]
 80013ae:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 80013b2:	4633      	mov	r3, r6
 80013b4:	463a      	mov	r2, r7
 80013b6:	4628      	mov	r0, r5
 80013b8:	47e0      	blx	ip
 80013ba:	2800      	cmp	r0, #0
 80013bc:	dc06      	bgt.n	80013cc <__sflush_r+0xf8>
 80013be:	89a3      	ldrh	r3, [r4, #12]
 80013c0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80013c4:	81a3      	strh	r3, [r4, #12]
 80013c6:	f04f 30ff 	mov.w	r0, #4294967295
 80013ca:	e790      	b.n	80012ee <__sflush_r+0x1a>
 80013cc:	4407      	add	r7, r0
 80013ce:	1a36      	subs	r6, r6, r0
 80013d0:	e7ea      	b.n	80013a8 <__sflush_r+0xd4>
 80013d2:	bf00      	nop
 80013d4:	20400001 	.word	0x20400001

080013d8 <_fflush_r>:
 80013d8:	b538      	push	{r3, r4, r5, lr}
 80013da:	690b      	ldr	r3, [r1, #16]
 80013dc:	4605      	mov	r5, r0
 80013de:	460c      	mov	r4, r1
 80013e0:	b913      	cbnz	r3, 80013e8 <_fflush_r+0x10>
 80013e2:	2500      	movs	r5, #0
 80013e4:	4628      	mov	r0, r5
 80013e6:	bd38      	pop	{r3, r4, r5, pc}
 80013e8:	b118      	cbz	r0, 80013f2 <_fflush_r+0x1a>
 80013ea:	6983      	ldr	r3, [r0, #24]
 80013ec:	b90b      	cbnz	r3, 80013f2 <_fflush_r+0x1a>
 80013ee:	f000 f887 	bl	8001500 <__sinit>
 80013f2:	4b14      	ldr	r3, [pc, #80]	; (8001444 <_fflush_r+0x6c>)
 80013f4:	429c      	cmp	r4, r3
 80013f6:	d11b      	bne.n	8001430 <_fflush_r+0x58>
 80013f8:	686c      	ldr	r4, [r5, #4]
 80013fa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d0ef      	beq.n	80013e2 <_fflush_r+0xa>
 8001402:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8001404:	07d0      	lsls	r0, r2, #31
 8001406:	d404      	bmi.n	8001412 <_fflush_r+0x3a>
 8001408:	0599      	lsls	r1, r3, #22
 800140a:	d402      	bmi.n	8001412 <_fflush_r+0x3a>
 800140c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800140e:	f000 f915 	bl	800163c <__retarget_lock_acquire_recursive>
 8001412:	4628      	mov	r0, r5
 8001414:	4621      	mov	r1, r4
 8001416:	f7ff ff5d 	bl	80012d4 <__sflush_r>
 800141a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800141c:	07da      	lsls	r2, r3, #31
 800141e:	4605      	mov	r5, r0
 8001420:	d4e0      	bmi.n	80013e4 <_fflush_r+0xc>
 8001422:	89a3      	ldrh	r3, [r4, #12]
 8001424:	059b      	lsls	r3, r3, #22
 8001426:	d4dd      	bmi.n	80013e4 <_fflush_r+0xc>
 8001428:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800142a:	f000 f908 	bl	800163e <__retarget_lock_release_recursive>
 800142e:	e7d9      	b.n	80013e4 <_fflush_r+0xc>
 8001430:	4b05      	ldr	r3, [pc, #20]	; (8001448 <_fflush_r+0x70>)
 8001432:	429c      	cmp	r4, r3
 8001434:	d101      	bne.n	800143a <_fflush_r+0x62>
 8001436:	68ac      	ldr	r4, [r5, #8]
 8001438:	e7df      	b.n	80013fa <_fflush_r+0x22>
 800143a:	4b04      	ldr	r3, [pc, #16]	; (800144c <_fflush_r+0x74>)
 800143c:	429c      	cmp	r4, r3
 800143e:	bf08      	it	eq
 8001440:	68ec      	ldreq	r4, [r5, #12]
 8001442:	e7da      	b.n	80013fa <_fflush_r+0x22>
 8001444:	08002658 	.word	0x08002658
 8001448:	08002678 	.word	0x08002678
 800144c:	08002638 	.word	0x08002638

08001450 <std>:
 8001450:	2300      	movs	r3, #0
 8001452:	b510      	push	{r4, lr}
 8001454:	4604      	mov	r4, r0
 8001456:	e9c0 3300 	strd	r3, r3, [r0]
 800145a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800145e:	6083      	str	r3, [r0, #8]
 8001460:	8181      	strh	r1, [r0, #12]
 8001462:	6643      	str	r3, [r0, #100]	; 0x64
 8001464:	81c2      	strh	r2, [r0, #14]
 8001466:	6183      	str	r3, [r0, #24]
 8001468:	4619      	mov	r1, r3
 800146a:	2208      	movs	r2, #8
 800146c:	305c      	adds	r0, #92	; 0x5c
 800146e:	f7ff fddb 	bl	8001028 <memset>
 8001472:	4b05      	ldr	r3, [pc, #20]	; (8001488 <std+0x38>)
 8001474:	6263      	str	r3, [r4, #36]	; 0x24
 8001476:	4b05      	ldr	r3, [pc, #20]	; (800148c <std+0x3c>)
 8001478:	62a3      	str	r3, [r4, #40]	; 0x28
 800147a:	4b05      	ldr	r3, [pc, #20]	; (8001490 <std+0x40>)
 800147c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800147e:	4b05      	ldr	r3, [pc, #20]	; (8001494 <std+0x44>)
 8001480:	6224      	str	r4, [r4, #32]
 8001482:	6323      	str	r3, [r4, #48]	; 0x30
 8001484:	bd10      	pop	{r4, pc}
 8001486:	bf00      	nop
 8001488:	08001ec1 	.word	0x08001ec1
 800148c:	08001ee3 	.word	0x08001ee3
 8001490:	08001f1b 	.word	0x08001f1b
 8001494:	08001f3f 	.word	0x08001f3f

08001498 <_cleanup_r>:
 8001498:	4901      	ldr	r1, [pc, #4]	; (80014a0 <_cleanup_r+0x8>)
 800149a:	f000 b8af 	b.w	80015fc <_fwalk_reent>
 800149e:	bf00      	nop
 80014a0:	080013d9 	.word	0x080013d9

080014a4 <__sfmoreglue>:
 80014a4:	b570      	push	{r4, r5, r6, lr}
 80014a6:	2268      	movs	r2, #104	; 0x68
 80014a8:	1e4d      	subs	r5, r1, #1
 80014aa:	4355      	muls	r5, r2
 80014ac:	460e      	mov	r6, r1
 80014ae:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80014b2:	f000 f995 	bl	80017e0 <_malloc_r>
 80014b6:	4604      	mov	r4, r0
 80014b8:	b140      	cbz	r0, 80014cc <__sfmoreglue+0x28>
 80014ba:	2100      	movs	r1, #0
 80014bc:	e9c0 1600 	strd	r1, r6, [r0]
 80014c0:	300c      	adds	r0, #12
 80014c2:	60a0      	str	r0, [r4, #8]
 80014c4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80014c8:	f7ff fdae 	bl	8001028 <memset>
 80014cc:	4620      	mov	r0, r4
 80014ce:	bd70      	pop	{r4, r5, r6, pc}

080014d0 <__sfp_lock_acquire>:
 80014d0:	4801      	ldr	r0, [pc, #4]	; (80014d8 <__sfp_lock_acquire+0x8>)
 80014d2:	f000 b8b3 	b.w	800163c <__retarget_lock_acquire_recursive>
 80014d6:	bf00      	nop
 80014d8:	2000008d 	.word	0x2000008d

080014dc <__sfp_lock_release>:
 80014dc:	4801      	ldr	r0, [pc, #4]	; (80014e4 <__sfp_lock_release+0x8>)
 80014de:	f000 b8ae 	b.w	800163e <__retarget_lock_release_recursive>
 80014e2:	bf00      	nop
 80014e4:	2000008d 	.word	0x2000008d

080014e8 <__sinit_lock_acquire>:
 80014e8:	4801      	ldr	r0, [pc, #4]	; (80014f0 <__sinit_lock_acquire+0x8>)
 80014ea:	f000 b8a7 	b.w	800163c <__retarget_lock_acquire_recursive>
 80014ee:	bf00      	nop
 80014f0:	2000008e 	.word	0x2000008e

080014f4 <__sinit_lock_release>:
 80014f4:	4801      	ldr	r0, [pc, #4]	; (80014fc <__sinit_lock_release+0x8>)
 80014f6:	f000 b8a2 	b.w	800163e <__retarget_lock_release_recursive>
 80014fa:	bf00      	nop
 80014fc:	2000008e 	.word	0x2000008e

08001500 <__sinit>:
 8001500:	b510      	push	{r4, lr}
 8001502:	4604      	mov	r4, r0
 8001504:	f7ff fff0 	bl	80014e8 <__sinit_lock_acquire>
 8001508:	69a3      	ldr	r3, [r4, #24]
 800150a:	b11b      	cbz	r3, 8001514 <__sinit+0x14>
 800150c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001510:	f7ff bff0 	b.w	80014f4 <__sinit_lock_release>
 8001514:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8001518:	6523      	str	r3, [r4, #80]	; 0x50
 800151a:	4b13      	ldr	r3, [pc, #76]	; (8001568 <__sinit+0x68>)
 800151c:	4a13      	ldr	r2, [pc, #76]	; (800156c <__sinit+0x6c>)
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	62a2      	str	r2, [r4, #40]	; 0x28
 8001522:	42a3      	cmp	r3, r4
 8001524:	bf04      	itt	eq
 8001526:	2301      	moveq	r3, #1
 8001528:	61a3      	streq	r3, [r4, #24]
 800152a:	4620      	mov	r0, r4
 800152c:	f000 f820 	bl	8001570 <__sfp>
 8001530:	6060      	str	r0, [r4, #4]
 8001532:	4620      	mov	r0, r4
 8001534:	f000 f81c 	bl	8001570 <__sfp>
 8001538:	60a0      	str	r0, [r4, #8]
 800153a:	4620      	mov	r0, r4
 800153c:	f000 f818 	bl	8001570 <__sfp>
 8001540:	2200      	movs	r2, #0
 8001542:	60e0      	str	r0, [r4, #12]
 8001544:	2104      	movs	r1, #4
 8001546:	6860      	ldr	r0, [r4, #4]
 8001548:	f7ff ff82 	bl	8001450 <std>
 800154c:	68a0      	ldr	r0, [r4, #8]
 800154e:	2201      	movs	r2, #1
 8001550:	2109      	movs	r1, #9
 8001552:	f7ff ff7d 	bl	8001450 <std>
 8001556:	68e0      	ldr	r0, [r4, #12]
 8001558:	2202      	movs	r2, #2
 800155a:	2112      	movs	r1, #18
 800155c:	f7ff ff78 	bl	8001450 <std>
 8001560:	2301      	movs	r3, #1
 8001562:	61a3      	str	r3, [r4, #24]
 8001564:	e7d2      	b.n	800150c <__sinit+0xc>
 8001566:	bf00      	nop
 8001568:	08002634 	.word	0x08002634
 800156c:	08001499 	.word	0x08001499

08001570 <__sfp>:
 8001570:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001572:	4607      	mov	r7, r0
 8001574:	f7ff ffac 	bl	80014d0 <__sfp_lock_acquire>
 8001578:	4b1e      	ldr	r3, [pc, #120]	; (80015f4 <__sfp+0x84>)
 800157a:	681e      	ldr	r6, [r3, #0]
 800157c:	69b3      	ldr	r3, [r6, #24]
 800157e:	b913      	cbnz	r3, 8001586 <__sfp+0x16>
 8001580:	4630      	mov	r0, r6
 8001582:	f7ff ffbd 	bl	8001500 <__sinit>
 8001586:	3648      	adds	r6, #72	; 0x48
 8001588:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800158c:	3b01      	subs	r3, #1
 800158e:	d503      	bpl.n	8001598 <__sfp+0x28>
 8001590:	6833      	ldr	r3, [r6, #0]
 8001592:	b30b      	cbz	r3, 80015d8 <__sfp+0x68>
 8001594:	6836      	ldr	r6, [r6, #0]
 8001596:	e7f7      	b.n	8001588 <__sfp+0x18>
 8001598:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800159c:	b9d5      	cbnz	r5, 80015d4 <__sfp+0x64>
 800159e:	4b16      	ldr	r3, [pc, #88]	; (80015f8 <__sfp+0x88>)
 80015a0:	60e3      	str	r3, [r4, #12]
 80015a2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80015a6:	6665      	str	r5, [r4, #100]	; 0x64
 80015a8:	f000 f847 	bl	800163a <__retarget_lock_init_recursive>
 80015ac:	f7ff ff96 	bl	80014dc <__sfp_lock_release>
 80015b0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80015b4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80015b8:	6025      	str	r5, [r4, #0]
 80015ba:	61a5      	str	r5, [r4, #24]
 80015bc:	2208      	movs	r2, #8
 80015be:	4629      	mov	r1, r5
 80015c0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80015c4:	f7ff fd30 	bl	8001028 <memset>
 80015c8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80015cc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80015d0:	4620      	mov	r0, r4
 80015d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80015d4:	3468      	adds	r4, #104	; 0x68
 80015d6:	e7d9      	b.n	800158c <__sfp+0x1c>
 80015d8:	2104      	movs	r1, #4
 80015da:	4638      	mov	r0, r7
 80015dc:	f7ff ff62 	bl	80014a4 <__sfmoreglue>
 80015e0:	4604      	mov	r4, r0
 80015e2:	6030      	str	r0, [r6, #0]
 80015e4:	2800      	cmp	r0, #0
 80015e6:	d1d5      	bne.n	8001594 <__sfp+0x24>
 80015e8:	f7ff ff78 	bl	80014dc <__sfp_lock_release>
 80015ec:	230c      	movs	r3, #12
 80015ee:	603b      	str	r3, [r7, #0]
 80015f0:	e7ee      	b.n	80015d0 <__sfp+0x60>
 80015f2:	bf00      	nop
 80015f4:	08002634 	.word	0x08002634
 80015f8:	ffff0001 	.word	0xffff0001

080015fc <_fwalk_reent>:
 80015fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001600:	4606      	mov	r6, r0
 8001602:	4688      	mov	r8, r1
 8001604:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8001608:	2700      	movs	r7, #0
 800160a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800160e:	f1b9 0901 	subs.w	r9, r9, #1
 8001612:	d505      	bpl.n	8001620 <_fwalk_reent+0x24>
 8001614:	6824      	ldr	r4, [r4, #0]
 8001616:	2c00      	cmp	r4, #0
 8001618:	d1f7      	bne.n	800160a <_fwalk_reent+0xe>
 800161a:	4638      	mov	r0, r7
 800161c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001620:	89ab      	ldrh	r3, [r5, #12]
 8001622:	2b01      	cmp	r3, #1
 8001624:	d907      	bls.n	8001636 <_fwalk_reent+0x3a>
 8001626:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800162a:	3301      	adds	r3, #1
 800162c:	d003      	beq.n	8001636 <_fwalk_reent+0x3a>
 800162e:	4629      	mov	r1, r5
 8001630:	4630      	mov	r0, r6
 8001632:	47c0      	blx	r8
 8001634:	4307      	orrs	r7, r0
 8001636:	3568      	adds	r5, #104	; 0x68
 8001638:	e7e9      	b.n	800160e <_fwalk_reent+0x12>

0800163a <__retarget_lock_init_recursive>:
 800163a:	4770      	bx	lr

0800163c <__retarget_lock_acquire_recursive>:
 800163c:	4770      	bx	lr

0800163e <__retarget_lock_release_recursive>:
 800163e:	4770      	bx	lr

08001640 <__swhatbuf_r>:
 8001640:	b570      	push	{r4, r5, r6, lr}
 8001642:	460e      	mov	r6, r1
 8001644:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001648:	2900      	cmp	r1, #0
 800164a:	b096      	sub	sp, #88	; 0x58
 800164c:	4614      	mov	r4, r2
 800164e:	461d      	mov	r5, r3
 8001650:	da08      	bge.n	8001664 <__swhatbuf_r+0x24>
 8001652:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8001656:	2200      	movs	r2, #0
 8001658:	602a      	str	r2, [r5, #0]
 800165a:	061a      	lsls	r2, r3, #24
 800165c:	d410      	bmi.n	8001680 <__swhatbuf_r+0x40>
 800165e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001662:	e00e      	b.n	8001682 <__swhatbuf_r+0x42>
 8001664:	466a      	mov	r2, sp
 8001666:	f000 fc91 	bl	8001f8c <_fstat_r>
 800166a:	2800      	cmp	r0, #0
 800166c:	dbf1      	blt.n	8001652 <__swhatbuf_r+0x12>
 800166e:	9a01      	ldr	r2, [sp, #4]
 8001670:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8001674:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8001678:	425a      	negs	r2, r3
 800167a:	415a      	adcs	r2, r3
 800167c:	602a      	str	r2, [r5, #0]
 800167e:	e7ee      	b.n	800165e <__swhatbuf_r+0x1e>
 8001680:	2340      	movs	r3, #64	; 0x40
 8001682:	2000      	movs	r0, #0
 8001684:	6023      	str	r3, [r4, #0]
 8001686:	b016      	add	sp, #88	; 0x58
 8001688:	bd70      	pop	{r4, r5, r6, pc}
	...

0800168c <__smakebuf_r>:
 800168c:	898b      	ldrh	r3, [r1, #12]
 800168e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8001690:	079d      	lsls	r5, r3, #30
 8001692:	4606      	mov	r6, r0
 8001694:	460c      	mov	r4, r1
 8001696:	d507      	bpl.n	80016a8 <__smakebuf_r+0x1c>
 8001698:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800169c:	6023      	str	r3, [r4, #0]
 800169e:	6123      	str	r3, [r4, #16]
 80016a0:	2301      	movs	r3, #1
 80016a2:	6163      	str	r3, [r4, #20]
 80016a4:	b002      	add	sp, #8
 80016a6:	bd70      	pop	{r4, r5, r6, pc}
 80016a8:	ab01      	add	r3, sp, #4
 80016aa:	466a      	mov	r2, sp
 80016ac:	f7ff ffc8 	bl	8001640 <__swhatbuf_r>
 80016b0:	9900      	ldr	r1, [sp, #0]
 80016b2:	4605      	mov	r5, r0
 80016b4:	4630      	mov	r0, r6
 80016b6:	f000 f893 	bl	80017e0 <_malloc_r>
 80016ba:	b948      	cbnz	r0, 80016d0 <__smakebuf_r+0x44>
 80016bc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80016c0:	059a      	lsls	r2, r3, #22
 80016c2:	d4ef      	bmi.n	80016a4 <__smakebuf_r+0x18>
 80016c4:	f023 0303 	bic.w	r3, r3, #3
 80016c8:	f043 0302 	orr.w	r3, r3, #2
 80016cc:	81a3      	strh	r3, [r4, #12]
 80016ce:	e7e3      	b.n	8001698 <__smakebuf_r+0xc>
 80016d0:	4b0d      	ldr	r3, [pc, #52]	; (8001708 <__smakebuf_r+0x7c>)
 80016d2:	62b3      	str	r3, [r6, #40]	; 0x28
 80016d4:	89a3      	ldrh	r3, [r4, #12]
 80016d6:	6020      	str	r0, [r4, #0]
 80016d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80016dc:	81a3      	strh	r3, [r4, #12]
 80016de:	9b00      	ldr	r3, [sp, #0]
 80016e0:	6163      	str	r3, [r4, #20]
 80016e2:	9b01      	ldr	r3, [sp, #4]
 80016e4:	6120      	str	r0, [r4, #16]
 80016e6:	b15b      	cbz	r3, 8001700 <__smakebuf_r+0x74>
 80016e8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80016ec:	4630      	mov	r0, r6
 80016ee:	f000 fc5f 	bl	8001fb0 <_isatty_r>
 80016f2:	b128      	cbz	r0, 8001700 <__smakebuf_r+0x74>
 80016f4:	89a3      	ldrh	r3, [r4, #12]
 80016f6:	f023 0303 	bic.w	r3, r3, #3
 80016fa:	f043 0301 	orr.w	r3, r3, #1
 80016fe:	81a3      	strh	r3, [r4, #12]
 8001700:	89a0      	ldrh	r0, [r4, #12]
 8001702:	4305      	orrs	r5, r0
 8001704:	81a5      	strh	r5, [r4, #12]
 8001706:	e7cd      	b.n	80016a4 <__smakebuf_r+0x18>
 8001708:	08001499 	.word	0x08001499

0800170c <_free_r>:
 800170c:	b538      	push	{r3, r4, r5, lr}
 800170e:	4605      	mov	r5, r0
 8001710:	2900      	cmp	r1, #0
 8001712:	d041      	beq.n	8001798 <_free_r+0x8c>
 8001714:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001718:	1f0c      	subs	r4, r1, #4
 800171a:	2b00      	cmp	r3, #0
 800171c:	bfb8      	it	lt
 800171e:	18e4      	addlt	r4, r4, r3
 8001720:	f000 fc68 	bl	8001ff4 <__malloc_lock>
 8001724:	4a1d      	ldr	r2, [pc, #116]	; (800179c <_free_r+0x90>)
 8001726:	6813      	ldr	r3, [r2, #0]
 8001728:	b933      	cbnz	r3, 8001738 <_free_r+0x2c>
 800172a:	6063      	str	r3, [r4, #4]
 800172c:	6014      	str	r4, [r2, #0]
 800172e:	4628      	mov	r0, r5
 8001730:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001734:	f000 bc64 	b.w	8002000 <__malloc_unlock>
 8001738:	42a3      	cmp	r3, r4
 800173a:	d908      	bls.n	800174e <_free_r+0x42>
 800173c:	6820      	ldr	r0, [r4, #0]
 800173e:	1821      	adds	r1, r4, r0
 8001740:	428b      	cmp	r3, r1
 8001742:	bf01      	itttt	eq
 8001744:	6819      	ldreq	r1, [r3, #0]
 8001746:	685b      	ldreq	r3, [r3, #4]
 8001748:	1809      	addeq	r1, r1, r0
 800174a:	6021      	streq	r1, [r4, #0]
 800174c:	e7ed      	b.n	800172a <_free_r+0x1e>
 800174e:	461a      	mov	r2, r3
 8001750:	685b      	ldr	r3, [r3, #4]
 8001752:	b10b      	cbz	r3, 8001758 <_free_r+0x4c>
 8001754:	42a3      	cmp	r3, r4
 8001756:	d9fa      	bls.n	800174e <_free_r+0x42>
 8001758:	6811      	ldr	r1, [r2, #0]
 800175a:	1850      	adds	r0, r2, r1
 800175c:	42a0      	cmp	r0, r4
 800175e:	d10b      	bne.n	8001778 <_free_r+0x6c>
 8001760:	6820      	ldr	r0, [r4, #0]
 8001762:	4401      	add	r1, r0
 8001764:	1850      	adds	r0, r2, r1
 8001766:	4283      	cmp	r3, r0
 8001768:	6011      	str	r1, [r2, #0]
 800176a:	d1e0      	bne.n	800172e <_free_r+0x22>
 800176c:	6818      	ldr	r0, [r3, #0]
 800176e:	685b      	ldr	r3, [r3, #4]
 8001770:	6053      	str	r3, [r2, #4]
 8001772:	4401      	add	r1, r0
 8001774:	6011      	str	r1, [r2, #0]
 8001776:	e7da      	b.n	800172e <_free_r+0x22>
 8001778:	d902      	bls.n	8001780 <_free_r+0x74>
 800177a:	230c      	movs	r3, #12
 800177c:	602b      	str	r3, [r5, #0]
 800177e:	e7d6      	b.n	800172e <_free_r+0x22>
 8001780:	6820      	ldr	r0, [r4, #0]
 8001782:	1821      	adds	r1, r4, r0
 8001784:	428b      	cmp	r3, r1
 8001786:	bf04      	itt	eq
 8001788:	6819      	ldreq	r1, [r3, #0]
 800178a:	685b      	ldreq	r3, [r3, #4]
 800178c:	6063      	str	r3, [r4, #4]
 800178e:	bf04      	itt	eq
 8001790:	1809      	addeq	r1, r1, r0
 8001792:	6021      	streq	r1, [r4, #0]
 8001794:	6054      	str	r4, [r2, #4]
 8001796:	e7ca      	b.n	800172e <_free_r+0x22>
 8001798:	bd38      	pop	{r3, r4, r5, pc}
 800179a:	bf00      	nop
 800179c:	20000090 	.word	0x20000090

080017a0 <sbrk_aligned>:
 80017a0:	b570      	push	{r4, r5, r6, lr}
 80017a2:	4e0e      	ldr	r6, [pc, #56]	; (80017dc <sbrk_aligned+0x3c>)
 80017a4:	460c      	mov	r4, r1
 80017a6:	6831      	ldr	r1, [r6, #0]
 80017a8:	4605      	mov	r5, r0
 80017aa:	b911      	cbnz	r1, 80017b2 <sbrk_aligned+0x12>
 80017ac:	f000 fb78 	bl	8001ea0 <_sbrk_r>
 80017b0:	6030      	str	r0, [r6, #0]
 80017b2:	4621      	mov	r1, r4
 80017b4:	4628      	mov	r0, r5
 80017b6:	f000 fb73 	bl	8001ea0 <_sbrk_r>
 80017ba:	1c43      	adds	r3, r0, #1
 80017bc:	d00a      	beq.n	80017d4 <sbrk_aligned+0x34>
 80017be:	1cc4      	adds	r4, r0, #3
 80017c0:	f024 0403 	bic.w	r4, r4, #3
 80017c4:	42a0      	cmp	r0, r4
 80017c6:	d007      	beq.n	80017d8 <sbrk_aligned+0x38>
 80017c8:	1a21      	subs	r1, r4, r0
 80017ca:	4628      	mov	r0, r5
 80017cc:	f000 fb68 	bl	8001ea0 <_sbrk_r>
 80017d0:	3001      	adds	r0, #1
 80017d2:	d101      	bne.n	80017d8 <sbrk_aligned+0x38>
 80017d4:	f04f 34ff 	mov.w	r4, #4294967295
 80017d8:	4620      	mov	r0, r4
 80017da:	bd70      	pop	{r4, r5, r6, pc}
 80017dc:	20000094 	.word	0x20000094

080017e0 <_malloc_r>:
 80017e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80017e4:	1ccd      	adds	r5, r1, #3
 80017e6:	f025 0503 	bic.w	r5, r5, #3
 80017ea:	3508      	adds	r5, #8
 80017ec:	2d0c      	cmp	r5, #12
 80017ee:	bf38      	it	cc
 80017f0:	250c      	movcc	r5, #12
 80017f2:	2d00      	cmp	r5, #0
 80017f4:	4607      	mov	r7, r0
 80017f6:	db01      	blt.n	80017fc <_malloc_r+0x1c>
 80017f8:	42a9      	cmp	r1, r5
 80017fa:	d905      	bls.n	8001808 <_malloc_r+0x28>
 80017fc:	230c      	movs	r3, #12
 80017fe:	603b      	str	r3, [r7, #0]
 8001800:	2600      	movs	r6, #0
 8001802:	4630      	mov	r0, r6
 8001804:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001808:	4e2e      	ldr	r6, [pc, #184]	; (80018c4 <_malloc_r+0xe4>)
 800180a:	f000 fbf3 	bl	8001ff4 <__malloc_lock>
 800180e:	6833      	ldr	r3, [r6, #0]
 8001810:	461c      	mov	r4, r3
 8001812:	bb34      	cbnz	r4, 8001862 <_malloc_r+0x82>
 8001814:	4629      	mov	r1, r5
 8001816:	4638      	mov	r0, r7
 8001818:	f7ff ffc2 	bl	80017a0 <sbrk_aligned>
 800181c:	1c43      	adds	r3, r0, #1
 800181e:	4604      	mov	r4, r0
 8001820:	d14d      	bne.n	80018be <_malloc_r+0xde>
 8001822:	6834      	ldr	r4, [r6, #0]
 8001824:	4626      	mov	r6, r4
 8001826:	2e00      	cmp	r6, #0
 8001828:	d140      	bne.n	80018ac <_malloc_r+0xcc>
 800182a:	6823      	ldr	r3, [r4, #0]
 800182c:	4631      	mov	r1, r6
 800182e:	4638      	mov	r0, r7
 8001830:	eb04 0803 	add.w	r8, r4, r3
 8001834:	f000 fb34 	bl	8001ea0 <_sbrk_r>
 8001838:	4580      	cmp	r8, r0
 800183a:	d13a      	bne.n	80018b2 <_malloc_r+0xd2>
 800183c:	6821      	ldr	r1, [r4, #0]
 800183e:	3503      	adds	r5, #3
 8001840:	1a6d      	subs	r5, r5, r1
 8001842:	f025 0503 	bic.w	r5, r5, #3
 8001846:	3508      	adds	r5, #8
 8001848:	2d0c      	cmp	r5, #12
 800184a:	bf38      	it	cc
 800184c:	250c      	movcc	r5, #12
 800184e:	4629      	mov	r1, r5
 8001850:	4638      	mov	r0, r7
 8001852:	f7ff ffa5 	bl	80017a0 <sbrk_aligned>
 8001856:	3001      	adds	r0, #1
 8001858:	d02b      	beq.n	80018b2 <_malloc_r+0xd2>
 800185a:	6823      	ldr	r3, [r4, #0]
 800185c:	442b      	add	r3, r5
 800185e:	6023      	str	r3, [r4, #0]
 8001860:	e00e      	b.n	8001880 <_malloc_r+0xa0>
 8001862:	6822      	ldr	r2, [r4, #0]
 8001864:	1b52      	subs	r2, r2, r5
 8001866:	d41e      	bmi.n	80018a6 <_malloc_r+0xc6>
 8001868:	2a0b      	cmp	r2, #11
 800186a:	d916      	bls.n	800189a <_malloc_r+0xba>
 800186c:	1961      	adds	r1, r4, r5
 800186e:	42a3      	cmp	r3, r4
 8001870:	6025      	str	r5, [r4, #0]
 8001872:	bf18      	it	ne
 8001874:	6059      	strne	r1, [r3, #4]
 8001876:	6863      	ldr	r3, [r4, #4]
 8001878:	bf08      	it	eq
 800187a:	6031      	streq	r1, [r6, #0]
 800187c:	5162      	str	r2, [r4, r5]
 800187e:	604b      	str	r3, [r1, #4]
 8001880:	4638      	mov	r0, r7
 8001882:	f104 060b 	add.w	r6, r4, #11
 8001886:	f000 fbbb 	bl	8002000 <__malloc_unlock>
 800188a:	f026 0607 	bic.w	r6, r6, #7
 800188e:	1d23      	adds	r3, r4, #4
 8001890:	1af2      	subs	r2, r6, r3
 8001892:	d0b6      	beq.n	8001802 <_malloc_r+0x22>
 8001894:	1b9b      	subs	r3, r3, r6
 8001896:	50a3      	str	r3, [r4, r2]
 8001898:	e7b3      	b.n	8001802 <_malloc_r+0x22>
 800189a:	6862      	ldr	r2, [r4, #4]
 800189c:	42a3      	cmp	r3, r4
 800189e:	bf0c      	ite	eq
 80018a0:	6032      	streq	r2, [r6, #0]
 80018a2:	605a      	strne	r2, [r3, #4]
 80018a4:	e7ec      	b.n	8001880 <_malloc_r+0xa0>
 80018a6:	4623      	mov	r3, r4
 80018a8:	6864      	ldr	r4, [r4, #4]
 80018aa:	e7b2      	b.n	8001812 <_malloc_r+0x32>
 80018ac:	4634      	mov	r4, r6
 80018ae:	6876      	ldr	r6, [r6, #4]
 80018b0:	e7b9      	b.n	8001826 <_malloc_r+0x46>
 80018b2:	230c      	movs	r3, #12
 80018b4:	603b      	str	r3, [r7, #0]
 80018b6:	4638      	mov	r0, r7
 80018b8:	f000 fba2 	bl	8002000 <__malloc_unlock>
 80018bc:	e7a1      	b.n	8001802 <_malloc_r+0x22>
 80018be:	6025      	str	r5, [r4, #0]
 80018c0:	e7de      	b.n	8001880 <_malloc_r+0xa0>
 80018c2:	bf00      	nop
 80018c4:	20000090 	.word	0x20000090

080018c8 <__sfputc_r>:
 80018c8:	6893      	ldr	r3, [r2, #8]
 80018ca:	3b01      	subs	r3, #1
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	b410      	push	{r4}
 80018d0:	6093      	str	r3, [r2, #8]
 80018d2:	da07      	bge.n	80018e4 <__sfputc_r+0x1c>
 80018d4:	6994      	ldr	r4, [r2, #24]
 80018d6:	42a3      	cmp	r3, r4
 80018d8:	db01      	blt.n	80018de <__sfputc_r+0x16>
 80018da:	290a      	cmp	r1, #10
 80018dc:	d102      	bne.n	80018e4 <__sfputc_r+0x1c>
 80018de:	bc10      	pop	{r4}
 80018e0:	f7ff bc38 	b.w	8001154 <__swbuf_r>
 80018e4:	6813      	ldr	r3, [r2, #0]
 80018e6:	1c58      	adds	r0, r3, #1
 80018e8:	6010      	str	r0, [r2, #0]
 80018ea:	7019      	strb	r1, [r3, #0]
 80018ec:	4608      	mov	r0, r1
 80018ee:	bc10      	pop	{r4}
 80018f0:	4770      	bx	lr

080018f2 <__sfputs_r>:
 80018f2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80018f4:	4606      	mov	r6, r0
 80018f6:	460f      	mov	r7, r1
 80018f8:	4614      	mov	r4, r2
 80018fa:	18d5      	adds	r5, r2, r3
 80018fc:	42ac      	cmp	r4, r5
 80018fe:	d101      	bne.n	8001904 <__sfputs_r+0x12>
 8001900:	2000      	movs	r0, #0
 8001902:	e007      	b.n	8001914 <__sfputs_r+0x22>
 8001904:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001908:	463a      	mov	r2, r7
 800190a:	4630      	mov	r0, r6
 800190c:	f7ff ffdc 	bl	80018c8 <__sfputc_r>
 8001910:	1c43      	adds	r3, r0, #1
 8001912:	d1f3      	bne.n	80018fc <__sfputs_r+0xa>
 8001914:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08001918 <_vfiprintf_r>:
 8001918:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800191c:	460d      	mov	r5, r1
 800191e:	b09d      	sub	sp, #116	; 0x74
 8001920:	4614      	mov	r4, r2
 8001922:	4698      	mov	r8, r3
 8001924:	4606      	mov	r6, r0
 8001926:	b118      	cbz	r0, 8001930 <_vfiprintf_r+0x18>
 8001928:	6983      	ldr	r3, [r0, #24]
 800192a:	b90b      	cbnz	r3, 8001930 <_vfiprintf_r+0x18>
 800192c:	f7ff fde8 	bl	8001500 <__sinit>
 8001930:	4b89      	ldr	r3, [pc, #548]	; (8001b58 <_vfiprintf_r+0x240>)
 8001932:	429d      	cmp	r5, r3
 8001934:	d11b      	bne.n	800196e <_vfiprintf_r+0x56>
 8001936:	6875      	ldr	r5, [r6, #4]
 8001938:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800193a:	07d9      	lsls	r1, r3, #31
 800193c:	d405      	bmi.n	800194a <_vfiprintf_r+0x32>
 800193e:	89ab      	ldrh	r3, [r5, #12]
 8001940:	059a      	lsls	r2, r3, #22
 8001942:	d402      	bmi.n	800194a <_vfiprintf_r+0x32>
 8001944:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8001946:	f7ff fe79 	bl	800163c <__retarget_lock_acquire_recursive>
 800194a:	89ab      	ldrh	r3, [r5, #12]
 800194c:	071b      	lsls	r3, r3, #28
 800194e:	d501      	bpl.n	8001954 <_vfiprintf_r+0x3c>
 8001950:	692b      	ldr	r3, [r5, #16]
 8001952:	b9eb      	cbnz	r3, 8001990 <_vfiprintf_r+0x78>
 8001954:	4629      	mov	r1, r5
 8001956:	4630      	mov	r0, r6
 8001958:	f7ff fc4e 	bl	80011f8 <__swsetup_r>
 800195c:	b1c0      	cbz	r0, 8001990 <_vfiprintf_r+0x78>
 800195e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8001960:	07dc      	lsls	r4, r3, #31
 8001962:	d50e      	bpl.n	8001982 <_vfiprintf_r+0x6a>
 8001964:	f04f 30ff 	mov.w	r0, #4294967295
 8001968:	b01d      	add	sp, #116	; 0x74
 800196a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800196e:	4b7b      	ldr	r3, [pc, #492]	; (8001b5c <_vfiprintf_r+0x244>)
 8001970:	429d      	cmp	r5, r3
 8001972:	d101      	bne.n	8001978 <_vfiprintf_r+0x60>
 8001974:	68b5      	ldr	r5, [r6, #8]
 8001976:	e7df      	b.n	8001938 <_vfiprintf_r+0x20>
 8001978:	4b79      	ldr	r3, [pc, #484]	; (8001b60 <_vfiprintf_r+0x248>)
 800197a:	429d      	cmp	r5, r3
 800197c:	bf08      	it	eq
 800197e:	68f5      	ldreq	r5, [r6, #12]
 8001980:	e7da      	b.n	8001938 <_vfiprintf_r+0x20>
 8001982:	89ab      	ldrh	r3, [r5, #12]
 8001984:	0598      	lsls	r0, r3, #22
 8001986:	d4ed      	bmi.n	8001964 <_vfiprintf_r+0x4c>
 8001988:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800198a:	f7ff fe58 	bl	800163e <__retarget_lock_release_recursive>
 800198e:	e7e9      	b.n	8001964 <_vfiprintf_r+0x4c>
 8001990:	2300      	movs	r3, #0
 8001992:	9309      	str	r3, [sp, #36]	; 0x24
 8001994:	2320      	movs	r3, #32
 8001996:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800199a:	f8cd 800c 	str.w	r8, [sp, #12]
 800199e:	2330      	movs	r3, #48	; 0x30
 80019a0:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8001b64 <_vfiprintf_r+0x24c>
 80019a4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80019a8:	f04f 0901 	mov.w	r9, #1
 80019ac:	4623      	mov	r3, r4
 80019ae:	469a      	mov	sl, r3
 80019b0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80019b4:	b10a      	cbz	r2, 80019ba <_vfiprintf_r+0xa2>
 80019b6:	2a25      	cmp	r2, #37	; 0x25
 80019b8:	d1f9      	bne.n	80019ae <_vfiprintf_r+0x96>
 80019ba:	ebba 0b04 	subs.w	fp, sl, r4
 80019be:	d00b      	beq.n	80019d8 <_vfiprintf_r+0xc0>
 80019c0:	465b      	mov	r3, fp
 80019c2:	4622      	mov	r2, r4
 80019c4:	4629      	mov	r1, r5
 80019c6:	4630      	mov	r0, r6
 80019c8:	f7ff ff93 	bl	80018f2 <__sfputs_r>
 80019cc:	3001      	adds	r0, #1
 80019ce:	f000 80aa 	beq.w	8001b26 <_vfiprintf_r+0x20e>
 80019d2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80019d4:	445a      	add	r2, fp
 80019d6:	9209      	str	r2, [sp, #36]	; 0x24
 80019d8:	f89a 3000 	ldrb.w	r3, [sl]
 80019dc:	2b00      	cmp	r3, #0
 80019de:	f000 80a2 	beq.w	8001b26 <_vfiprintf_r+0x20e>
 80019e2:	2300      	movs	r3, #0
 80019e4:	f04f 32ff 	mov.w	r2, #4294967295
 80019e8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80019ec:	f10a 0a01 	add.w	sl, sl, #1
 80019f0:	9304      	str	r3, [sp, #16]
 80019f2:	9307      	str	r3, [sp, #28]
 80019f4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80019f8:	931a      	str	r3, [sp, #104]	; 0x68
 80019fa:	4654      	mov	r4, sl
 80019fc:	2205      	movs	r2, #5
 80019fe:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001a02:	4858      	ldr	r0, [pc, #352]	; (8001b64 <_vfiprintf_r+0x24c>)
 8001a04:	f7fe fbf4 	bl	80001f0 <memchr>
 8001a08:	9a04      	ldr	r2, [sp, #16]
 8001a0a:	b9d8      	cbnz	r0, 8001a44 <_vfiprintf_r+0x12c>
 8001a0c:	06d1      	lsls	r1, r2, #27
 8001a0e:	bf44      	itt	mi
 8001a10:	2320      	movmi	r3, #32
 8001a12:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8001a16:	0713      	lsls	r3, r2, #28
 8001a18:	bf44      	itt	mi
 8001a1a:	232b      	movmi	r3, #43	; 0x2b
 8001a1c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8001a20:	f89a 3000 	ldrb.w	r3, [sl]
 8001a24:	2b2a      	cmp	r3, #42	; 0x2a
 8001a26:	d015      	beq.n	8001a54 <_vfiprintf_r+0x13c>
 8001a28:	9a07      	ldr	r2, [sp, #28]
 8001a2a:	4654      	mov	r4, sl
 8001a2c:	2000      	movs	r0, #0
 8001a2e:	f04f 0c0a 	mov.w	ip, #10
 8001a32:	4621      	mov	r1, r4
 8001a34:	f811 3b01 	ldrb.w	r3, [r1], #1
 8001a38:	3b30      	subs	r3, #48	; 0x30
 8001a3a:	2b09      	cmp	r3, #9
 8001a3c:	d94e      	bls.n	8001adc <_vfiprintf_r+0x1c4>
 8001a3e:	b1b0      	cbz	r0, 8001a6e <_vfiprintf_r+0x156>
 8001a40:	9207      	str	r2, [sp, #28]
 8001a42:	e014      	b.n	8001a6e <_vfiprintf_r+0x156>
 8001a44:	eba0 0308 	sub.w	r3, r0, r8
 8001a48:	fa09 f303 	lsl.w	r3, r9, r3
 8001a4c:	4313      	orrs	r3, r2
 8001a4e:	9304      	str	r3, [sp, #16]
 8001a50:	46a2      	mov	sl, r4
 8001a52:	e7d2      	b.n	80019fa <_vfiprintf_r+0xe2>
 8001a54:	9b03      	ldr	r3, [sp, #12]
 8001a56:	1d19      	adds	r1, r3, #4
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	9103      	str	r1, [sp, #12]
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	bfbb      	ittet	lt
 8001a60:	425b      	neglt	r3, r3
 8001a62:	f042 0202 	orrlt.w	r2, r2, #2
 8001a66:	9307      	strge	r3, [sp, #28]
 8001a68:	9307      	strlt	r3, [sp, #28]
 8001a6a:	bfb8      	it	lt
 8001a6c:	9204      	strlt	r2, [sp, #16]
 8001a6e:	7823      	ldrb	r3, [r4, #0]
 8001a70:	2b2e      	cmp	r3, #46	; 0x2e
 8001a72:	d10c      	bne.n	8001a8e <_vfiprintf_r+0x176>
 8001a74:	7863      	ldrb	r3, [r4, #1]
 8001a76:	2b2a      	cmp	r3, #42	; 0x2a
 8001a78:	d135      	bne.n	8001ae6 <_vfiprintf_r+0x1ce>
 8001a7a:	9b03      	ldr	r3, [sp, #12]
 8001a7c:	1d1a      	adds	r2, r3, #4
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	9203      	str	r2, [sp, #12]
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	bfb8      	it	lt
 8001a86:	f04f 33ff 	movlt.w	r3, #4294967295
 8001a8a:	3402      	adds	r4, #2
 8001a8c:	9305      	str	r3, [sp, #20]
 8001a8e:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 8001b68 <_vfiprintf_r+0x250>
 8001a92:	7821      	ldrb	r1, [r4, #0]
 8001a94:	2203      	movs	r2, #3
 8001a96:	4650      	mov	r0, sl
 8001a98:	f7fe fbaa 	bl	80001f0 <memchr>
 8001a9c:	b140      	cbz	r0, 8001ab0 <_vfiprintf_r+0x198>
 8001a9e:	2340      	movs	r3, #64	; 0x40
 8001aa0:	eba0 000a 	sub.w	r0, r0, sl
 8001aa4:	fa03 f000 	lsl.w	r0, r3, r0
 8001aa8:	9b04      	ldr	r3, [sp, #16]
 8001aaa:	4303      	orrs	r3, r0
 8001aac:	3401      	adds	r4, #1
 8001aae:	9304      	str	r3, [sp, #16]
 8001ab0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001ab4:	482d      	ldr	r0, [pc, #180]	; (8001b6c <_vfiprintf_r+0x254>)
 8001ab6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8001aba:	2206      	movs	r2, #6
 8001abc:	f7fe fb98 	bl	80001f0 <memchr>
 8001ac0:	2800      	cmp	r0, #0
 8001ac2:	d03f      	beq.n	8001b44 <_vfiprintf_r+0x22c>
 8001ac4:	4b2a      	ldr	r3, [pc, #168]	; (8001b70 <_vfiprintf_r+0x258>)
 8001ac6:	bb1b      	cbnz	r3, 8001b10 <_vfiprintf_r+0x1f8>
 8001ac8:	9b03      	ldr	r3, [sp, #12]
 8001aca:	3307      	adds	r3, #7
 8001acc:	f023 0307 	bic.w	r3, r3, #7
 8001ad0:	3308      	adds	r3, #8
 8001ad2:	9303      	str	r3, [sp, #12]
 8001ad4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001ad6:	443b      	add	r3, r7
 8001ad8:	9309      	str	r3, [sp, #36]	; 0x24
 8001ada:	e767      	b.n	80019ac <_vfiprintf_r+0x94>
 8001adc:	fb0c 3202 	mla	r2, ip, r2, r3
 8001ae0:	460c      	mov	r4, r1
 8001ae2:	2001      	movs	r0, #1
 8001ae4:	e7a5      	b.n	8001a32 <_vfiprintf_r+0x11a>
 8001ae6:	2300      	movs	r3, #0
 8001ae8:	3401      	adds	r4, #1
 8001aea:	9305      	str	r3, [sp, #20]
 8001aec:	4619      	mov	r1, r3
 8001aee:	f04f 0c0a 	mov.w	ip, #10
 8001af2:	4620      	mov	r0, r4
 8001af4:	f810 2b01 	ldrb.w	r2, [r0], #1
 8001af8:	3a30      	subs	r2, #48	; 0x30
 8001afa:	2a09      	cmp	r2, #9
 8001afc:	d903      	bls.n	8001b06 <_vfiprintf_r+0x1ee>
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d0c5      	beq.n	8001a8e <_vfiprintf_r+0x176>
 8001b02:	9105      	str	r1, [sp, #20]
 8001b04:	e7c3      	b.n	8001a8e <_vfiprintf_r+0x176>
 8001b06:	fb0c 2101 	mla	r1, ip, r1, r2
 8001b0a:	4604      	mov	r4, r0
 8001b0c:	2301      	movs	r3, #1
 8001b0e:	e7f0      	b.n	8001af2 <_vfiprintf_r+0x1da>
 8001b10:	ab03      	add	r3, sp, #12
 8001b12:	9300      	str	r3, [sp, #0]
 8001b14:	462a      	mov	r2, r5
 8001b16:	4b17      	ldr	r3, [pc, #92]	; (8001b74 <_vfiprintf_r+0x25c>)
 8001b18:	a904      	add	r1, sp, #16
 8001b1a:	4630      	mov	r0, r6
 8001b1c:	f3af 8000 	nop.w
 8001b20:	4607      	mov	r7, r0
 8001b22:	1c78      	adds	r0, r7, #1
 8001b24:	d1d6      	bne.n	8001ad4 <_vfiprintf_r+0x1bc>
 8001b26:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8001b28:	07d9      	lsls	r1, r3, #31
 8001b2a:	d405      	bmi.n	8001b38 <_vfiprintf_r+0x220>
 8001b2c:	89ab      	ldrh	r3, [r5, #12]
 8001b2e:	059a      	lsls	r2, r3, #22
 8001b30:	d402      	bmi.n	8001b38 <_vfiprintf_r+0x220>
 8001b32:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8001b34:	f7ff fd83 	bl	800163e <__retarget_lock_release_recursive>
 8001b38:	89ab      	ldrh	r3, [r5, #12]
 8001b3a:	065b      	lsls	r3, r3, #25
 8001b3c:	f53f af12 	bmi.w	8001964 <_vfiprintf_r+0x4c>
 8001b40:	9809      	ldr	r0, [sp, #36]	; 0x24
 8001b42:	e711      	b.n	8001968 <_vfiprintf_r+0x50>
 8001b44:	ab03      	add	r3, sp, #12
 8001b46:	9300      	str	r3, [sp, #0]
 8001b48:	462a      	mov	r2, r5
 8001b4a:	4b0a      	ldr	r3, [pc, #40]	; (8001b74 <_vfiprintf_r+0x25c>)
 8001b4c:	a904      	add	r1, sp, #16
 8001b4e:	4630      	mov	r0, r6
 8001b50:	f000 f880 	bl	8001c54 <_printf_i>
 8001b54:	e7e4      	b.n	8001b20 <_vfiprintf_r+0x208>
 8001b56:	bf00      	nop
 8001b58:	08002658 	.word	0x08002658
 8001b5c:	08002678 	.word	0x08002678
 8001b60:	08002638 	.word	0x08002638
 8001b64:	08002698 	.word	0x08002698
 8001b68:	0800269e 	.word	0x0800269e
 8001b6c:	080026a2 	.word	0x080026a2
 8001b70:	00000000 	.word	0x00000000
 8001b74:	080018f3 	.word	0x080018f3

08001b78 <_printf_common>:
 8001b78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001b7c:	4616      	mov	r6, r2
 8001b7e:	4699      	mov	r9, r3
 8001b80:	688a      	ldr	r2, [r1, #8]
 8001b82:	690b      	ldr	r3, [r1, #16]
 8001b84:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8001b88:	4293      	cmp	r3, r2
 8001b8a:	bfb8      	it	lt
 8001b8c:	4613      	movlt	r3, r2
 8001b8e:	6033      	str	r3, [r6, #0]
 8001b90:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8001b94:	4607      	mov	r7, r0
 8001b96:	460c      	mov	r4, r1
 8001b98:	b10a      	cbz	r2, 8001b9e <_printf_common+0x26>
 8001b9a:	3301      	adds	r3, #1
 8001b9c:	6033      	str	r3, [r6, #0]
 8001b9e:	6823      	ldr	r3, [r4, #0]
 8001ba0:	0699      	lsls	r1, r3, #26
 8001ba2:	bf42      	ittt	mi
 8001ba4:	6833      	ldrmi	r3, [r6, #0]
 8001ba6:	3302      	addmi	r3, #2
 8001ba8:	6033      	strmi	r3, [r6, #0]
 8001baa:	6825      	ldr	r5, [r4, #0]
 8001bac:	f015 0506 	ands.w	r5, r5, #6
 8001bb0:	d106      	bne.n	8001bc0 <_printf_common+0x48>
 8001bb2:	f104 0a19 	add.w	sl, r4, #25
 8001bb6:	68e3      	ldr	r3, [r4, #12]
 8001bb8:	6832      	ldr	r2, [r6, #0]
 8001bba:	1a9b      	subs	r3, r3, r2
 8001bbc:	42ab      	cmp	r3, r5
 8001bbe:	dc26      	bgt.n	8001c0e <_printf_common+0x96>
 8001bc0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8001bc4:	1e13      	subs	r3, r2, #0
 8001bc6:	6822      	ldr	r2, [r4, #0]
 8001bc8:	bf18      	it	ne
 8001bca:	2301      	movne	r3, #1
 8001bcc:	0692      	lsls	r2, r2, #26
 8001bce:	d42b      	bmi.n	8001c28 <_printf_common+0xb0>
 8001bd0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8001bd4:	4649      	mov	r1, r9
 8001bd6:	4638      	mov	r0, r7
 8001bd8:	47c0      	blx	r8
 8001bda:	3001      	adds	r0, #1
 8001bdc:	d01e      	beq.n	8001c1c <_printf_common+0xa4>
 8001bde:	6823      	ldr	r3, [r4, #0]
 8001be0:	68e5      	ldr	r5, [r4, #12]
 8001be2:	6832      	ldr	r2, [r6, #0]
 8001be4:	f003 0306 	and.w	r3, r3, #6
 8001be8:	2b04      	cmp	r3, #4
 8001bea:	bf08      	it	eq
 8001bec:	1aad      	subeq	r5, r5, r2
 8001bee:	68a3      	ldr	r3, [r4, #8]
 8001bf0:	6922      	ldr	r2, [r4, #16]
 8001bf2:	bf0c      	ite	eq
 8001bf4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8001bf8:	2500      	movne	r5, #0
 8001bfa:	4293      	cmp	r3, r2
 8001bfc:	bfc4      	itt	gt
 8001bfe:	1a9b      	subgt	r3, r3, r2
 8001c00:	18ed      	addgt	r5, r5, r3
 8001c02:	2600      	movs	r6, #0
 8001c04:	341a      	adds	r4, #26
 8001c06:	42b5      	cmp	r5, r6
 8001c08:	d11a      	bne.n	8001c40 <_printf_common+0xc8>
 8001c0a:	2000      	movs	r0, #0
 8001c0c:	e008      	b.n	8001c20 <_printf_common+0xa8>
 8001c0e:	2301      	movs	r3, #1
 8001c10:	4652      	mov	r2, sl
 8001c12:	4649      	mov	r1, r9
 8001c14:	4638      	mov	r0, r7
 8001c16:	47c0      	blx	r8
 8001c18:	3001      	adds	r0, #1
 8001c1a:	d103      	bne.n	8001c24 <_printf_common+0xac>
 8001c1c:	f04f 30ff 	mov.w	r0, #4294967295
 8001c20:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001c24:	3501      	adds	r5, #1
 8001c26:	e7c6      	b.n	8001bb6 <_printf_common+0x3e>
 8001c28:	18e1      	adds	r1, r4, r3
 8001c2a:	1c5a      	adds	r2, r3, #1
 8001c2c:	2030      	movs	r0, #48	; 0x30
 8001c2e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8001c32:	4422      	add	r2, r4
 8001c34:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8001c38:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8001c3c:	3302      	adds	r3, #2
 8001c3e:	e7c7      	b.n	8001bd0 <_printf_common+0x58>
 8001c40:	2301      	movs	r3, #1
 8001c42:	4622      	mov	r2, r4
 8001c44:	4649      	mov	r1, r9
 8001c46:	4638      	mov	r0, r7
 8001c48:	47c0      	blx	r8
 8001c4a:	3001      	adds	r0, #1
 8001c4c:	d0e6      	beq.n	8001c1c <_printf_common+0xa4>
 8001c4e:	3601      	adds	r6, #1
 8001c50:	e7d9      	b.n	8001c06 <_printf_common+0x8e>
	...

08001c54 <_printf_i>:
 8001c54:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8001c58:	7e0f      	ldrb	r7, [r1, #24]
 8001c5a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8001c5c:	2f78      	cmp	r7, #120	; 0x78
 8001c5e:	4691      	mov	r9, r2
 8001c60:	4680      	mov	r8, r0
 8001c62:	460c      	mov	r4, r1
 8001c64:	469a      	mov	sl, r3
 8001c66:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8001c6a:	d807      	bhi.n	8001c7c <_printf_i+0x28>
 8001c6c:	2f62      	cmp	r7, #98	; 0x62
 8001c6e:	d80a      	bhi.n	8001c86 <_printf_i+0x32>
 8001c70:	2f00      	cmp	r7, #0
 8001c72:	f000 80d8 	beq.w	8001e26 <_printf_i+0x1d2>
 8001c76:	2f58      	cmp	r7, #88	; 0x58
 8001c78:	f000 80a3 	beq.w	8001dc2 <_printf_i+0x16e>
 8001c7c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8001c80:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8001c84:	e03a      	b.n	8001cfc <_printf_i+0xa8>
 8001c86:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8001c8a:	2b15      	cmp	r3, #21
 8001c8c:	d8f6      	bhi.n	8001c7c <_printf_i+0x28>
 8001c8e:	a101      	add	r1, pc, #4	; (adr r1, 8001c94 <_printf_i+0x40>)
 8001c90:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8001c94:	08001ced 	.word	0x08001ced
 8001c98:	08001d01 	.word	0x08001d01
 8001c9c:	08001c7d 	.word	0x08001c7d
 8001ca0:	08001c7d 	.word	0x08001c7d
 8001ca4:	08001c7d 	.word	0x08001c7d
 8001ca8:	08001c7d 	.word	0x08001c7d
 8001cac:	08001d01 	.word	0x08001d01
 8001cb0:	08001c7d 	.word	0x08001c7d
 8001cb4:	08001c7d 	.word	0x08001c7d
 8001cb8:	08001c7d 	.word	0x08001c7d
 8001cbc:	08001c7d 	.word	0x08001c7d
 8001cc0:	08001e0d 	.word	0x08001e0d
 8001cc4:	08001d31 	.word	0x08001d31
 8001cc8:	08001def 	.word	0x08001def
 8001ccc:	08001c7d 	.word	0x08001c7d
 8001cd0:	08001c7d 	.word	0x08001c7d
 8001cd4:	08001e2f 	.word	0x08001e2f
 8001cd8:	08001c7d 	.word	0x08001c7d
 8001cdc:	08001d31 	.word	0x08001d31
 8001ce0:	08001c7d 	.word	0x08001c7d
 8001ce4:	08001c7d 	.word	0x08001c7d
 8001ce8:	08001df7 	.word	0x08001df7
 8001cec:	682b      	ldr	r3, [r5, #0]
 8001cee:	1d1a      	adds	r2, r3, #4
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	602a      	str	r2, [r5, #0]
 8001cf4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8001cf8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8001cfc:	2301      	movs	r3, #1
 8001cfe:	e0a3      	b.n	8001e48 <_printf_i+0x1f4>
 8001d00:	6820      	ldr	r0, [r4, #0]
 8001d02:	6829      	ldr	r1, [r5, #0]
 8001d04:	0606      	lsls	r6, r0, #24
 8001d06:	f101 0304 	add.w	r3, r1, #4
 8001d0a:	d50a      	bpl.n	8001d22 <_printf_i+0xce>
 8001d0c:	680e      	ldr	r6, [r1, #0]
 8001d0e:	602b      	str	r3, [r5, #0]
 8001d10:	2e00      	cmp	r6, #0
 8001d12:	da03      	bge.n	8001d1c <_printf_i+0xc8>
 8001d14:	232d      	movs	r3, #45	; 0x2d
 8001d16:	4276      	negs	r6, r6
 8001d18:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8001d1c:	485e      	ldr	r0, [pc, #376]	; (8001e98 <_printf_i+0x244>)
 8001d1e:	230a      	movs	r3, #10
 8001d20:	e019      	b.n	8001d56 <_printf_i+0x102>
 8001d22:	680e      	ldr	r6, [r1, #0]
 8001d24:	602b      	str	r3, [r5, #0]
 8001d26:	f010 0f40 	tst.w	r0, #64	; 0x40
 8001d2a:	bf18      	it	ne
 8001d2c:	b236      	sxthne	r6, r6
 8001d2e:	e7ef      	b.n	8001d10 <_printf_i+0xbc>
 8001d30:	682b      	ldr	r3, [r5, #0]
 8001d32:	6820      	ldr	r0, [r4, #0]
 8001d34:	1d19      	adds	r1, r3, #4
 8001d36:	6029      	str	r1, [r5, #0]
 8001d38:	0601      	lsls	r1, r0, #24
 8001d3a:	d501      	bpl.n	8001d40 <_printf_i+0xec>
 8001d3c:	681e      	ldr	r6, [r3, #0]
 8001d3e:	e002      	b.n	8001d46 <_printf_i+0xf2>
 8001d40:	0646      	lsls	r6, r0, #25
 8001d42:	d5fb      	bpl.n	8001d3c <_printf_i+0xe8>
 8001d44:	881e      	ldrh	r6, [r3, #0]
 8001d46:	4854      	ldr	r0, [pc, #336]	; (8001e98 <_printf_i+0x244>)
 8001d48:	2f6f      	cmp	r7, #111	; 0x6f
 8001d4a:	bf0c      	ite	eq
 8001d4c:	2308      	moveq	r3, #8
 8001d4e:	230a      	movne	r3, #10
 8001d50:	2100      	movs	r1, #0
 8001d52:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8001d56:	6865      	ldr	r5, [r4, #4]
 8001d58:	60a5      	str	r5, [r4, #8]
 8001d5a:	2d00      	cmp	r5, #0
 8001d5c:	bfa2      	ittt	ge
 8001d5e:	6821      	ldrge	r1, [r4, #0]
 8001d60:	f021 0104 	bicge.w	r1, r1, #4
 8001d64:	6021      	strge	r1, [r4, #0]
 8001d66:	b90e      	cbnz	r6, 8001d6c <_printf_i+0x118>
 8001d68:	2d00      	cmp	r5, #0
 8001d6a:	d04d      	beq.n	8001e08 <_printf_i+0x1b4>
 8001d6c:	4615      	mov	r5, r2
 8001d6e:	fbb6 f1f3 	udiv	r1, r6, r3
 8001d72:	fb03 6711 	mls	r7, r3, r1, r6
 8001d76:	5dc7      	ldrb	r7, [r0, r7]
 8001d78:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8001d7c:	4637      	mov	r7, r6
 8001d7e:	42bb      	cmp	r3, r7
 8001d80:	460e      	mov	r6, r1
 8001d82:	d9f4      	bls.n	8001d6e <_printf_i+0x11a>
 8001d84:	2b08      	cmp	r3, #8
 8001d86:	d10b      	bne.n	8001da0 <_printf_i+0x14c>
 8001d88:	6823      	ldr	r3, [r4, #0]
 8001d8a:	07de      	lsls	r6, r3, #31
 8001d8c:	d508      	bpl.n	8001da0 <_printf_i+0x14c>
 8001d8e:	6923      	ldr	r3, [r4, #16]
 8001d90:	6861      	ldr	r1, [r4, #4]
 8001d92:	4299      	cmp	r1, r3
 8001d94:	bfde      	ittt	le
 8001d96:	2330      	movle	r3, #48	; 0x30
 8001d98:	f805 3c01 	strble.w	r3, [r5, #-1]
 8001d9c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8001da0:	1b52      	subs	r2, r2, r5
 8001da2:	6122      	str	r2, [r4, #16]
 8001da4:	f8cd a000 	str.w	sl, [sp]
 8001da8:	464b      	mov	r3, r9
 8001daa:	aa03      	add	r2, sp, #12
 8001dac:	4621      	mov	r1, r4
 8001dae:	4640      	mov	r0, r8
 8001db0:	f7ff fee2 	bl	8001b78 <_printf_common>
 8001db4:	3001      	adds	r0, #1
 8001db6:	d14c      	bne.n	8001e52 <_printf_i+0x1fe>
 8001db8:	f04f 30ff 	mov.w	r0, #4294967295
 8001dbc:	b004      	add	sp, #16
 8001dbe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001dc2:	4835      	ldr	r0, [pc, #212]	; (8001e98 <_printf_i+0x244>)
 8001dc4:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8001dc8:	6829      	ldr	r1, [r5, #0]
 8001dca:	6823      	ldr	r3, [r4, #0]
 8001dcc:	f851 6b04 	ldr.w	r6, [r1], #4
 8001dd0:	6029      	str	r1, [r5, #0]
 8001dd2:	061d      	lsls	r5, r3, #24
 8001dd4:	d514      	bpl.n	8001e00 <_printf_i+0x1ac>
 8001dd6:	07df      	lsls	r7, r3, #31
 8001dd8:	bf44      	itt	mi
 8001dda:	f043 0320 	orrmi.w	r3, r3, #32
 8001dde:	6023      	strmi	r3, [r4, #0]
 8001de0:	b91e      	cbnz	r6, 8001dea <_printf_i+0x196>
 8001de2:	6823      	ldr	r3, [r4, #0]
 8001de4:	f023 0320 	bic.w	r3, r3, #32
 8001de8:	6023      	str	r3, [r4, #0]
 8001dea:	2310      	movs	r3, #16
 8001dec:	e7b0      	b.n	8001d50 <_printf_i+0xfc>
 8001dee:	6823      	ldr	r3, [r4, #0]
 8001df0:	f043 0320 	orr.w	r3, r3, #32
 8001df4:	6023      	str	r3, [r4, #0]
 8001df6:	2378      	movs	r3, #120	; 0x78
 8001df8:	4828      	ldr	r0, [pc, #160]	; (8001e9c <_printf_i+0x248>)
 8001dfa:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8001dfe:	e7e3      	b.n	8001dc8 <_printf_i+0x174>
 8001e00:	0659      	lsls	r1, r3, #25
 8001e02:	bf48      	it	mi
 8001e04:	b2b6      	uxthmi	r6, r6
 8001e06:	e7e6      	b.n	8001dd6 <_printf_i+0x182>
 8001e08:	4615      	mov	r5, r2
 8001e0a:	e7bb      	b.n	8001d84 <_printf_i+0x130>
 8001e0c:	682b      	ldr	r3, [r5, #0]
 8001e0e:	6826      	ldr	r6, [r4, #0]
 8001e10:	6961      	ldr	r1, [r4, #20]
 8001e12:	1d18      	adds	r0, r3, #4
 8001e14:	6028      	str	r0, [r5, #0]
 8001e16:	0635      	lsls	r5, r6, #24
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	d501      	bpl.n	8001e20 <_printf_i+0x1cc>
 8001e1c:	6019      	str	r1, [r3, #0]
 8001e1e:	e002      	b.n	8001e26 <_printf_i+0x1d2>
 8001e20:	0670      	lsls	r0, r6, #25
 8001e22:	d5fb      	bpl.n	8001e1c <_printf_i+0x1c8>
 8001e24:	8019      	strh	r1, [r3, #0]
 8001e26:	2300      	movs	r3, #0
 8001e28:	6123      	str	r3, [r4, #16]
 8001e2a:	4615      	mov	r5, r2
 8001e2c:	e7ba      	b.n	8001da4 <_printf_i+0x150>
 8001e2e:	682b      	ldr	r3, [r5, #0]
 8001e30:	1d1a      	adds	r2, r3, #4
 8001e32:	602a      	str	r2, [r5, #0]
 8001e34:	681d      	ldr	r5, [r3, #0]
 8001e36:	6862      	ldr	r2, [r4, #4]
 8001e38:	2100      	movs	r1, #0
 8001e3a:	4628      	mov	r0, r5
 8001e3c:	f7fe f9d8 	bl	80001f0 <memchr>
 8001e40:	b108      	cbz	r0, 8001e46 <_printf_i+0x1f2>
 8001e42:	1b40      	subs	r0, r0, r5
 8001e44:	6060      	str	r0, [r4, #4]
 8001e46:	6863      	ldr	r3, [r4, #4]
 8001e48:	6123      	str	r3, [r4, #16]
 8001e4a:	2300      	movs	r3, #0
 8001e4c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8001e50:	e7a8      	b.n	8001da4 <_printf_i+0x150>
 8001e52:	6923      	ldr	r3, [r4, #16]
 8001e54:	462a      	mov	r2, r5
 8001e56:	4649      	mov	r1, r9
 8001e58:	4640      	mov	r0, r8
 8001e5a:	47d0      	blx	sl
 8001e5c:	3001      	adds	r0, #1
 8001e5e:	d0ab      	beq.n	8001db8 <_printf_i+0x164>
 8001e60:	6823      	ldr	r3, [r4, #0]
 8001e62:	079b      	lsls	r3, r3, #30
 8001e64:	d413      	bmi.n	8001e8e <_printf_i+0x23a>
 8001e66:	68e0      	ldr	r0, [r4, #12]
 8001e68:	9b03      	ldr	r3, [sp, #12]
 8001e6a:	4298      	cmp	r0, r3
 8001e6c:	bfb8      	it	lt
 8001e6e:	4618      	movlt	r0, r3
 8001e70:	e7a4      	b.n	8001dbc <_printf_i+0x168>
 8001e72:	2301      	movs	r3, #1
 8001e74:	4632      	mov	r2, r6
 8001e76:	4649      	mov	r1, r9
 8001e78:	4640      	mov	r0, r8
 8001e7a:	47d0      	blx	sl
 8001e7c:	3001      	adds	r0, #1
 8001e7e:	d09b      	beq.n	8001db8 <_printf_i+0x164>
 8001e80:	3501      	adds	r5, #1
 8001e82:	68e3      	ldr	r3, [r4, #12]
 8001e84:	9903      	ldr	r1, [sp, #12]
 8001e86:	1a5b      	subs	r3, r3, r1
 8001e88:	42ab      	cmp	r3, r5
 8001e8a:	dcf2      	bgt.n	8001e72 <_printf_i+0x21e>
 8001e8c:	e7eb      	b.n	8001e66 <_printf_i+0x212>
 8001e8e:	2500      	movs	r5, #0
 8001e90:	f104 0619 	add.w	r6, r4, #25
 8001e94:	e7f5      	b.n	8001e82 <_printf_i+0x22e>
 8001e96:	bf00      	nop
 8001e98:	080026a9 	.word	0x080026a9
 8001e9c:	080026ba 	.word	0x080026ba

08001ea0 <_sbrk_r>:
 8001ea0:	b538      	push	{r3, r4, r5, lr}
 8001ea2:	4d06      	ldr	r5, [pc, #24]	; (8001ebc <_sbrk_r+0x1c>)
 8001ea4:	2300      	movs	r3, #0
 8001ea6:	4604      	mov	r4, r0
 8001ea8:	4608      	mov	r0, r1
 8001eaa:	602b      	str	r3, [r5, #0]
 8001eac:	f000 f9b8 	bl	8002220 <_sbrk>
 8001eb0:	1c43      	adds	r3, r0, #1
 8001eb2:	d102      	bne.n	8001eba <_sbrk_r+0x1a>
 8001eb4:	682b      	ldr	r3, [r5, #0]
 8001eb6:	b103      	cbz	r3, 8001eba <_sbrk_r+0x1a>
 8001eb8:	6023      	str	r3, [r4, #0]
 8001eba:	bd38      	pop	{r3, r4, r5, pc}
 8001ebc:	20000098 	.word	0x20000098

08001ec0 <__sread>:
 8001ec0:	b510      	push	{r4, lr}
 8001ec2:	460c      	mov	r4, r1
 8001ec4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001ec8:	f000 f8a0 	bl	800200c <_read_r>
 8001ecc:	2800      	cmp	r0, #0
 8001ece:	bfab      	itete	ge
 8001ed0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8001ed2:	89a3      	ldrhlt	r3, [r4, #12]
 8001ed4:	181b      	addge	r3, r3, r0
 8001ed6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8001eda:	bfac      	ite	ge
 8001edc:	6563      	strge	r3, [r4, #84]	; 0x54
 8001ede:	81a3      	strhlt	r3, [r4, #12]
 8001ee0:	bd10      	pop	{r4, pc}

08001ee2 <__swrite>:
 8001ee2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001ee6:	461f      	mov	r7, r3
 8001ee8:	898b      	ldrh	r3, [r1, #12]
 8001eea:	05db      	lsls	r3, r3, #23
 8001eec:	4605      	mov	r5, r0
 8001eee:	460c      	mov	r4, r1
 8001ef0:	4616      	mov	r6, r2
 8001ef2:	d505      	bpl.n	8001f00 <__swrite+0x1e>
 8001ef4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001ef8:	2302      	movs	r3, #2
 8001efa:	2200      	movs	r2, #0
 8001efc:	f000 f868 	bl	8001fd0 <_lseek_r>
 8001f00:	89a3      	ldrh	r3, [r4, #12]
 8001f02:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001f06:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001f0a:	81a3      	strh	r3, [r4, #12]
 8001f0c:	4632      	mov	r2, r6
 8001f0e:	463b      	mov	r3, r7
 8001f10:	4628      	mov	r0, r5
 8001f12:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8001f16:	f000 b817 	b.w	8001f48 <_write_r>

08001f1a <__sseek>:
 8001f1a:	b510      	push	{r4, lr}
 8001f1c:	460c      	mov	r4, r1
 8001f1e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001f22:	f000 f855 	bl	8001fd0 <_lseek_r>
 8001f26:	1c43      	adds	r3, r0, #1
 8001f28:	89a3      	ldrh	r3, [r4, #12]
 8001f2a:	bf15      	itete	ne
 8001f2c:	6560      	strne	r0, [r4, #84]	; 0x54
 8001f2e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8001f32:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8001f36:	81a3      	strheq	r3, [r4, #12]
 8001f38:	bf18      	it	ne
 8001f3a:	81a3      	strhne	r3, [r4, #12]
 8001f3c:	bd10      	pop	{r4, pc}

08001f3e <__sclose>:
 8001f3e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001f42:	f000 b813 	b.w	8001f6c <_close_r>
	...

08001f48 <_write_r>:
 8001f48:	b538      	push	{r3, r4, r5, lr}
 8001f4a:	4d07      	ldr	r5, [pc, #28]	; (8001f68 <_write_r+0x20>)
 8001f4c:	4604      	mov	r4, r0
 8001f4e:	4608      	mov	r0, r1
 8001f50:	4611      	mov	r1, r2
 8001f52:	2200      	movs	r2, #0
 8001f54:	602a      	str	r2, [r5, #0]
 8001f56:	461a      	mov	r2, r3
 8001f58:	f000 f90f 	bl	800217a <_write>
 8001f5c:	1c43      	adds	r3, r0, #1
 8001f5e:	d102      	bne.n	8001f66 <_write_r+0x1e>
 8001f60:	682b      	ldr	r3, [r5, #0]
 8001f62:	b103      	cbz	r3, 8001f66 <_write_r+0x1e>
 8001f64:	6023      	str	r3, [r4, #0]
 8001f66:	bd38      	pop	{r3, r4, r5, pc}
 8001f68:	20000098 	.word	0x20000098

08001f6c <_close_r>:
 8001f6c:	b538      	push	{r3, r4, r5, lr}
 8001f6e:	4d06      	ldr	r5, [pc, #24]	; (8001f88 <_close_r+0x1c>)
 8001f70:	2300      	movs	r3, #0
 8001f72:	4604      	mov	r4, r0
 8001f74:	4608      	mov	r0, r1
 8001f76:	602b      	str	r3, [r5, #0]
 8001f78:	f000 f92c 	bl	80021d4 <_close>
 8001f7c:	1c43      	adds	r3, r0, #1
 8001f7e:	d102      	bne.n	8001f86 <_close_r+0x1a>
 8001f80:	682b      	ldr	r3, [r5, #0]
 8001f82:	b103      	cbz	r3, 8001f86 <_close_r+0x1a>
 8001f84:	6023      	str	r3, [r4, #0]
 8001f86:	bd38      	pop	{r3, r4, r5, pc}
 8001f88:	20000098 	.word	0x20000098

08001f8c <_fstat_r>:
 8001f8c:	b538      	push	{r3, r4, r5, lr}
 8001f8e:	4d07      	ldr	r5, [pc, #28]	; (8001fac <_fstat_r+0x20>)
 8001f90:	2300      	movs	r3, #0
 8001f92:	4604      	mov	r4, r0
 8001f94:	4608      	mov	r0, r1
 8001f96:	4611      	mov	r1, r2
 8001f98:	602b      	str	r3, [r5, #0]
 8001f9a:	f000 f986 	bl	80022aa <_fstat>
 8001f9e:	1c43      	adds	r3, r0, #1
 8001fa0:	d102      	bne.n	8001fa8 <_fstat_r+0x1c>
 8001fa2:	682b      	ldr	r3, [r5, #0]
 8001fa4:	b103      	cbz	r3, 8001fa8 <_fstat_r+0x1c>
 8001fa6:	6023      	str	r3, [r4, #0]
 8001fa8:	bd38      	pop	{r3, r4, r5, pc}
 8001faa:	bf00      	nop
 8001fac:	20000098 	.word	0x20000098

08001fb0 <_isatty_r>:
 8001fb0:	b538      	push	{r3, r4, r5, lr}
 8001fb2:	4d06      	ldr	r5, [pc, #24]	; (8001fcc <_isatty_r+0x1c>)
 8001fb4:	2300      	movs	r3, #0
 8001fb6:	4604      	mov	r4, r0
 8001fb8:	4608      	mov	r0, r1
 8001fba:	602b      	str	r3, [r5, #0]
 8001fbc:	f000 fadc 	bl	8002578 <_isatty>
 8001fc0:	1c43      	adds	r3, r0, #1
 8001fc2:	d102      	bne.n	8001fca <_isatty_r+0x1a>
 8001fc4:	682b      	ldr	r3, [r5, #0]
 8001fc6:	b103      	cbz	r3, 8001fca <_isatty_r+0x1a>
 8001fc8:	6023      	str	r3, [r4, #0]
 8001fca:	bd38      	pop	{r3, r4, r5, pc}
 8001fcc:	20000098 	.word	0x20000098

08001fd0 <_lseek_r>:
 8001fd0:	b538      	push	{r3, r4, r5, lr}
 8001fd2:	4d07      	ldr	r5, [pc, #28]	; (8001ff0 <_lseek_r+0x20>)
 8001fd4:	4604      	mov	r4, r0
 8001fd6:	4608      	mov	r0, r1
 8001fd8:	4611      	mov	r1, r2
 8001fda:	2200      	movs	r2, #0
 8001fdc:	602a      	str	r2, [r5, #0]
 8001fde:	461a      	mov	r2, r3
 8001fe0:	f000 f8b9 	bl	8002156 <_lseek>
 8001fe4:	1c43      	adds	r3, r0, #1
 8001fe6:	d102      	bne.n	8001fee <_lseek_r+0x1e>
 8001fe8:	682b      	ldr	r3, [r5, #0]
 8001fea:	b103      	cbz	r3, 8001fee <_lseek_r+0x1e>
 8001fec:	6023      	str	r3, [r4, #0]
 8001fee:	bd38      	pop	{r3, r4, r5, pc}
 8001ff0:	20000098 	.word	0x20000098

08001ff4 <__malloc_lock>:
 8001ff4:	4801      	ldr	r0, [pc, #4]	; (8001ffc <__malloc_lock+0x8>)
 8001ff6:	f7ff bb21 	b.w	800163c <__retarget_lock_acquire_recursive>
 8001ffa:	bf00      	nop
 8001ffc:	2000008c 	.word	0x2000008c

08002000 <__malloc_unlock>:
 8002000:	4801      	ldr	r0, [pc, #4]	; (8002008 <__malloc_unlock+0x8>)
 8002002:	f7ff bb1c 	b.w	800163e <__retarget_lock_release_recursive>
 8002006:	bf00      	nop
 8002008:	2000008c 	.word	0x2000008c

0800200c <_read_r>:
 800200c:	b538      	push	{r3, r4, r5, lr}
 800200e:	4d07      	ldr	r5, [pc, #28]	; (800202c <_read_r+0x20>)
 8002010:	4604      	mov	r4, r0
 8002012:	4608      	mov	r0, r1
 8002014:	4611      	mov	r1, r2
 8002016:	2200      	movs	r2, #0
 8002018:	602a      	str	r2, [r5, #0]
 800201a:	461a      	mov	r2, r3
 800201c:	f000 f845 	bl	80020aa <_read>
 8002020:	1c43      	adds	r3, r0, #1
 8002022:	d102      	bne.n	800202a <_read_r+0x1e>
 8002024:	682b      	ldr	r3, [r5, #0]
 8002026:	b103      	cbz	r3, 800202a <_read_r+0x1e>
 8002028:	6023      	str	r3, [r4, #0]
 800202a:	bd38      	pop	{r3, r4, r5, pc}
 800202c:	20000098 	.word	0x20000098

08002030 <findslot>:
 8002030:	4b0a      	ldr	r3, [pc, #40]	; (800205c <findslot+0x2c>)
 8002032:	b510      	push	{r4, lr}
 8002034:	4604      	mov	r4, r0
 8002036:	6818      	ldr	r0, [r3, #0]
 8002038:	b118      	cbz	r0, 8002042 <findslot+0x12>
 800203a:	6983      	ldr	r3, [r0, #24]
 800203c:	b90b      	cbnz	r3, 8002042 <findslot+0x12>
 800203e:	f7ff fa5f 	bl	8001500 <__sinit>
 8002042:	2c13      	cmp	r4, #19
 8002044:	d807      	bhi.n	8002056 <findslot+0x26>
 8002046:	4806      	ldr	r0, [pc, #24]	; (8002060 <findslot+0x30>)
 8002048:	f850 2034 	ldr.w	r2, [r0, r4, lsl #3]
 800204c:	3201      	adds	r2, #1
 800204e:	d002      	beq.n	8002056 <findslot+0x26>
 8002050:	eb00 00c4 	add.w	r0, r0, r4, lsl #3
 8002054:	bd10      	pop	{r4, pc}
 8002056:	2000      	movs	r0, #0
 8002058:	e7fc      	b.n	8002054 <findslot+0x24>
 800205a:	bf00      	nop
 800205c:	20000000 	.word	0x20000000
 8002060:	200000ac 	.word	0x200000ac

08002064 <error>:
 8002064:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002066:	4604      	mov	r4, r0
 8002068:	f000 faa2 	bl	80025b0 <__errno>
 800206c:	2613      	movs	r6, #19
 800206e:	4605      	mov	r5, r0
 8002070:	2700      	movs	r7, #0
 8002072:	4630      	mov	r0, r6
 8002074:	4639      	mov	r1, r7
 8002076:	beab      	bkpt	0x00ab
 8002078:	4606      	mov	r6, r0
 800207a:	602e      	str	r6, [r5, #0]
 800207c:	4620      	mov	r0, r4
 800207e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08002080 <checkerror>:
 8002080:	1c43      	adds	r3, r0, #1
 8002082:	d101      	bne.n	8002088 <checkerror+0x8>
 8002084:	f7ff bfee 	b.w	8002064 <error>
 8002088:	4770      	bx	lr

0800208a <_swiread>:
 800208a:	b530      	push	{r4, r5, lr}
 800208c:	b085      	sub	sp, #20
 800208e:	e9cd 0101 	strd	r0, r1, [sp, #4]
 8002092:	9203      	str	r2, [sp, #12]
 8002094:	2406      	movs	r4, #6
 8002096:	ad01      	add	r5, sp, #4
 8002098:	4620      	mov	r0, r4
 800209a:	4629      	mov	r1, r5
 800209c:	beab      	bkpt	0x00ab
 800209e:	4604      	mov	r4, r0
 80020a0:	4620      	mov	r0, r4
 80020a2:	f7ff ffed 	bl	8002080 <checkerror>
 80020a6:	b005      	add	sp, #20
 80020a8:	bd30      	pop	{r4, r5, pc}

080020aa <_read>:
 80020aa:	b570      	push	{r4, r5, r6, lr}
 80020ac:	460e      	mov	r6, r1
 80020ae:	4615      	mov	r5, r2
 80020b0:	f7ff ffbe 	bl	8002030 <findslot>
 80020b4:	4604      	mov	r4, r0
 80020b6:	b930      	cbnz	r0, 80020c6 <_read+0x1c>
 80020b8:	f000 fa7a 	bl	80025b0 <__errno>
 80020bc:	2309      	movs	r3, #9
 80020be:	6003      	str	r3, [r0, #0]
 80020c0:	f04f 30ff 	mov.w	r0, #4294967295
 80020c4:	bd70      	pop	{r4, r5, r6, pc}
 80020c6:	6800      	ldr	r0, [r0, #0]
 80020c8:	462a      	mov	r2, r5
 80020ca:	4631      	mov	r1, r6
 80020cc:	f7ff ffdd 	bl	800208a <_swiread>
 80020d0:	1c43      	adds	r3, r0, #1
 80020d2:	bf1f      	itttt	ne
 80020d4:	6863      	ldrne	r3, [r4, #4]
 80020d6:	1a28      	subne	r0, r5, r0
 80020d8:	181b      	addne	r3, r3, r0
 80020da:	6063      	strne	r3, [r4, #4]
 80020dc:	e7f2      	b.n	80020c4 <_read+0x1a>

080020de <_swilseek>:
 80020de:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80020e0:	460c      	mov	r4, r1
 80020e2:	4616      	mov	r6, r2
 80020e4:	f7ff ffa4 	bl	8002030 <findslot>
 80020e8:	4605      	mov	r5, r0
 80020ea:	b940      	cbnz	r0, 80020fe <_swilseek+0x20>
 80020ec:	f000 fa60 	bl	80025b0 <__errno>
 80020f0:	2309      	movs	r3, #9
 80020f2:	6003      	str	r3, [r0, #0]
 80020f4:	f04f 34ff 	mov.w	r4, #4294967295
 80020f8:	4620      	mov	r0, r4
 80020fa:	b003      	add	sp, #12
 80020fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80020fe:	2e02      	cmp	r6, #2
 8002100:	d903      	bls.n	800210a <_swilseek+0x2c>
 8002102:	f000 fa55 	bl	80025b0 <__errno>
 8002106:	2316      	movs	r3, #22
 8002108:	e7f3      	b.n	80020f2 <_swilseek+0x14>
 800210a:	2e01      	cmp	r6, #1
 800210c:	d112      	bne.n	8002134 <_swilseek+0x56>
 800210e:	6843      	ldr	r3, [r0, #4]
 8002110:	18e4      	adds	r4, r4, r3
 8002112:	d4f6      	bmi.n	8002102 <_swilseek+0x24>
 8002114:	682b      	ldr	r3, [r5, #0]
 8002116:	260a      	movs	r6, #10
 8002118:	e9cd 3400 	strd	r3, r4, [sp]
 800211c:	466f      	mov	r7, sp
 800211e:	4630      	mov	r0, r6
 8002120:	4639      	mov	r1, r7
 8002122:	beab      	bkpt	0x00ab
 8002124:	4606      	mov	r6, r0
 8002126:	4630      	mov	r0, r6
 8002128:	f7ff ffaa 	bl	8002080 <checkerror>
 800212c:	2800      	cmp	r0, #0
 800212e:	dbe1      	blt.n	80020f4 <_swilseek+0x16>
 8002130:	606c      	str	r4, [r5, #4]
 8002132:	e7e1      	b.n	80020f8 <_swilseek+0x1a>
 8002134:	2e02      	cmp	r6, #2
 8002136:	d1ed      	bne.n	8002114 <_swilseek+0x36>
 8002138:	6803      	ldr	r3, [r0, #0]
 800213a:	9300      	str	r3, [sp, #0]
 800213c:	260c      	movs	r6, #12
 800213e:	466f      	mov	r7, sp
 8002140:	4630      	mov	r0, r6
 8002142:	4639      	mov	r1, r7
 8002144:	beab      	bkpt	0x00ab
 8002146:	4606      	mov	r6, r0
 8002148:	4630      	mov	r0, r6
 800214a:	f7ff ff99 	bl	8002080 <checkerror>
 800214e:	1c43      	adds	r3, r0, #1
 8002150:	d0d0      	beq.n	80020f4 <_swilseek+0x16>
 8002152:	4404      	add	r4, r0
 8002154:	e7de      	b.n	8002114 <_swilseek+0x36>

08002156 <_lseek>:
 8002156:	f7ff bfc2 	b.w	80020de <_swilseek>

0800215a <_swiwrite>:
 800215a:	b530      	push	{r4, r5, lr}
 800215c:	b085      	sub	sp, #20
 800215e:	e9cd 0101 	strd	r0, r1, [sp, #4]
 8002162:	9203      	str	r2, [sp, #12]
 8002164:	2405      	movs	r4, #5
 8002166:	ad01      	add	r5, sp, #4
 8002168:	4620      	mov	r0, r4
 800216a:	4629      	mov	r1, r5
 800216c:	beab      	bkpt	0x00ab
 800216e:	4604      	mov	r4, r0
 8002170:	4620      	mov	r0, r4
 8002172:	f7ff ff85 	bl	8002080 <checkerror>
 8002176:	b005      	add	sp, #20
 8002178:	bd30      	pop	{r4, r5, pc}

0800217a <_write>:
 800217a:	b570      	push	{r4, r5, r6, lr}
 800217c:	460e      	mov	r6, r1
 800217e:	4615      	mov	r5, r2
 8002180:	f7ff ff56 	bl	8002030 <findslot>
 8002184:	4604      	mov	r4, r0
 8002186:	b930      	cbnz	r0, 8002196 <_write+0x1c>
 8002188:	f000 fa12 	bl	80025b0 <__errno>
 800218c:	2309      	movs	r3, #9
 800218e:	6003      	str	r3, [r0, #0]
 8002190:	f04f 30ff 	mov.w	r0, #4294967295
 8002194:	bd70      	pop	{r4, r5, r6, pc}
 8002196:	6800      	ldr	r0, [r0, #0]
 8002198:	462a      	mov	r2, r5
 800219a:	4631      	mov	r1, r6
 800219c:	f7ff ffdd 	bl	800215a <_swiwrite>
 80021a0:	1e03      	subs	r3, r0, #0
 80021a2:	dbf5      	blt.n	8002190 <_write+0x16>
 80021a4:	6862      	ldr	r2, [r4, #4]
 80021a6:	1ae8      	subs	r0, r5, r3
 80021a8:	4402      	add	r2, r0
 80021aa:	42ab      	cmp	r3, r5
 80021ac:	6062      	str	r2, [r4, #4]
 80021ae:	d1f1      	bne.n	8002194 <_write+0x1a>
 80021b0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80021b4:	2000      	movs	r0, #0
 80021b6:	f7ff bf55 	b.w	8002064 <error>

080021ba <_swiclose>:
 80021ba:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80021bc:	2402      	movs	r4, #2
 80021be:	9001      	str	r0, [sp, #4]
 80021c0:	ad01      	add	r5, sp, #4
 80021c2:	4620      	mov	r0, r4
 80021c4:	4629      	mov	r1, r5
 80021c6:	beab      	bkpt	0x00ab
 80021c8:	4604      	mov	r4, r0
 80021ca:	4620      	mov	r0, r4
 80021cc:	f7ff ff58 	bl	8002080 <checkerror>
 80021d0:	b003      	add	sp, #12
 80021d2:	bd30      	pop	{r4, r5, pc}

080021d4 <_close>:
 80021d4:	b538      	push	{r3, r4, r5, lr}
 80021d6:	4605      	mov	r5, r0
 80021d8:	f7ff ff2a 	bl	8002030 <findslot>
 80021dc:	4604      	mov	r4, r0
 80021de:	b930      	cbnz	r0, 80021ee <_close+0x1a>
 80021e0:	f000 f9e6 	bl	80025b0 <__errno>
 80021e4:	2309      	movs	r3, #9
 80021e6:	6003      	str	r3, [r0, #0]
 80021e8:	f04f 30ff 	mov.w	r0, #4294967295
 80021ec:	bd38      	pop	{r3, r4, r5, pc}
 80021ee:	3d01      	subs	r5, #1
 80021f0:	2d01      	cmp	r5, #1
 80021f2:	d809      	bhi.n	8002208 <_close+0x34>
 80021f4:	4b09      	ldr	r3, [pc, #36]	; (800221c <_close+0x48>)
 80021f6:	689a      	ldr	r2, [r3, #8]
 80021f8:	691b      	ldr	r3, [r3, #16]
 80021fa:	429a      	cmp	r2, r3
 80021fc:	d104      	bne.n	8002208 <_close+0x34>
 80021fe:	f04f 33ff 	mov.w	r3, #4294967295
 8002202:	6003      	str	r3, [r0, #0]
 8002204:	2000      	movs	r0, #0
 8002206:	e7f1      	b.n	80021ec <_close+0x18>
 8002208:	6820      	ldr	r0, [r4, #0]
 800220a:	f7ff ffd6 	bl	80021ba <_swiclose>
 800220e:	2800      	cmp	r0, #0
 8002210:	d1ec      	bne.n	80021ec <_close+0x18>
 8002212:	f04f 33ff 	mov.w	r3, #4294967295
 8002216:	6023      	str	r3, [r4, #0]
 8002218:	e7e8      	b.n	80021ec <_close+0x18>
 800221a:	bf00      	nop
 800221c:	200000ac 	.word	0x200000ac

08002220 <_sbrk>:
 8002220:	4a0d      	ldr	r2, [pc, #52]	; (8002258 <_sbrk+0x38>)
 8002222:	6811      	ldr	r1, [r2, #0]
 8002224:	b510      	push	{r4, lr}
 8002226:	4603      	mov	r3, r0
 8002228:	b909      	cbnz	r1, 800222e <_sbrk+0xe>
 800222a:	490c      	ldr	r1, [pc, #48]	; (800225c <_sbrk+0x3c>)
 800222c:	6011      	str	r1, [r2, #0]
 800222e:	6810      	ldr	r0, [r2, #0]
 8002230:	4669      	mov	r1, sp
 8002232:	4403      	add	r3, r0
 8002234:	428b      	cmp	r3, r1
 8002236:	d806      	bhi.n	8002246 <_sbrk+0x26>
 8002238:	4909      	ldr	r1, [pc, #36]	; (8002260 <_sbrk+0x40>)
 800223a:	4c0a      	ldr	r4, [pc, #40]	; (8002264 <_sbrk+0x44>)
 800223c:	6809      	ldr	r1, [r1, #0]
 800223e:	42a1      	cmp	r1, r4
 8002240:	d008      	beq.n	8002254 <_sbrk+0x34>
 8002242:	428b      	cmp	r3, r1
 8002244:	d906      	bls.n	8002254 <_sbrk+0x34>
 8002246:	f000 f9b3 	bl	80025b0 <__errno>
 800224a:	230c      	movs	r3, #12
 800224c:	6003      	str	r3, [r0, #0]
 800224e:	f04f 30ff 	mov.w	r0, #4294967295
 8002252:	bd10      	pop	{r4, pc}
 8002254:	6013      	str	r3, [r2, #0]
 8002256:	e7fc      	b.n	8002252 <_sbrk+0x32>
 8002258:	2000009c 	.word	0x2000009c
 800225c:	20000150 	.word	0x20000150
 8002260:	20000064 	.word	0x20000064
 8002264:	cafedead 	.word	0xcafedead

08002268 <_swistat>:
 8002268:	b570      	push	{r4, r5, r6, lr}
 800226a:	460c      	mov	r4, r1
 800226c:	f7ff fee0 	bl	8002030 <findslot>
 8002270:	4605      	mov	r5, r0
 8002272:	b930      	cbnz	r0, 8002282 <_swistat+0x1a>
 8002274:	f000 f99c 	bl	80025b0 <__errno>
 8002278:	2309      	movs	r3, #9
 800227a:	6003      	str	r3, [r0, #0]
 800227c:	f04f 30ff 	mov.w	r0, #4294967295
 8002280:	bd70      	pop	{r4, r5, r6, pc}
 8002282:	6863      	ldr	r3, [r4, #4]
 8002284:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002288:	6063      	str	r3, [r4, #4]
 800228a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800228e:	64a3      	str	r3, [r4, #72]	; 0x48
 8002290:	260c      	movs	r6, #12
 8002292:	4630      	mov	r0, r6
 8002294:	4629      	mov	r1, r5
 8002296:	beab      	bkpt	0x00ab
 8002298:	4605      	mov	r5, r0
 800229a:	4628      	mov	r0, r5
 800229c:	f7ff fef0 	bl	8002080 <checkerror>
 80022a0:	1c43      	adds	r3, r0, #1
 80022a2:	bf1c      	itt	ne
 80022a4:	6120      	strne	r0, [r4, #16]
 80022a6:	2000      	movne	r0, #0
 80022a8:	e7ea      	b.n	8002280 <_swistat+0x18>

080022aa <_fstat>:
 80022aa:	460b      	mov	r3, r1
 80022ac:	b510      	push	{r4, lr}
 80022ae:	2100      	movs	r1, #0
 80022b0:	4604      	mov	r4, r0
 80022b2:	2258      	movs	r2, #88	; 0x58
 80022b4:	4618      	mov	r0, r3
 80022b6:	f7fe feb7 	bl	8001028 <memset>
 80022ba:	4601      	mov	r1, r0
 80022bc:	4620      	mov	r0, r4
 80022be:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80022c2:	f7ff bfd1 	b.w	8002268 <_swistat>

080022c6 <_stat>:
 80022c6:	b538      	push	{r3, r4, r5, lr}
 80022c8:	460d      	mov	r5, r1
 80022ca:	4604      	mov	r4, r0
 80022cc:	2258      	movs	r2, #88	; 0x58
 80022ce:	2100      	movs	r1, #0
 80022d0:	4628      	mov	r0, r5
 80022d2:	f7fe fea9 	bl	8001028 <memset>
 80022d6:	4620      	mov	r0, r4
 80022d8:	2100      	movs	r1, #0
 80022da:	f000 f811 	bl	8002300 <_swiopen>
 80022de:	1c43      	adds	r3, r0, #1
 80022e0:	4604      	mov	r4, r0
 80022e2:	d00b      	beq.n	80022fc <_stat+0x36>
 80022e4:	686b      	ldr	r3, [r5, #4]
 80022e6:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 80022ea:	606b      	str	r3, [r5, #4]
 80022ec:	4629      	mov	r1, r5
 80022ee:	f7ff ffbb 	bl	8002268 <_swistat>
 80022f2:	4605      	mov	r5, r0
 80022f4:	4620      	mov	r0, r4
 80022f6:	f7ff ff6d 	bl	80021d4 <_close>
 80022fa:	462c      	mov	r4, r5
 80022fc:	4620      	mov	r0, r4
 80022fe:	bd38      	pop	{r3, r4, r5, pc}

08002300 <_swiopen>:
 8002300:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002304:	f8df 80a8 	ldr.w	r8, [pc, #168]	; 80023b0 <_swiopen+0xb0>
 8002308:	b097      	sub	sp, #92	; 0x5c
 800230a:	4607      	mov	r7, r0
 800230c:	460e      	mov	r6, r1
 800230e:	2500      	movs	r5, #0
 8002310:	f858 4035 	ldr.w	r4, [r8, r5, lsl #3]
 8002314:	1c61      	adds	r1, r4, #1
 8002316:	d037      	beq.n	8002388 <_swiopen+0x88>
 8002318:	3501      	adds	r5, #1
 800231a:	2d14      	cmp	r5, #20
 800231c:	d1f8      	bne.n	8002310 <_swiopen+0x10>
 800231e:	f000 f947 	bl	80025b0 <__errno>
 8002322:	2318      	movs	r3, #24
 8002324:	6003      	str	r3, [r0, #0]
 8002326:	f04f 34ff 	mov.w	r4, #4294967295
 800232a:	e03d      	b.n	80023a8 <_swiopen+0xa8>
 800232c:	f3c6 4400 	ubfx	r4, r6, #16, #1
 8002330:	f240 6301 	movw	r3, #1537	; 0x601
 8002334:	07b2      	lsls	r2, r6, #30
 8002336:	bf48      	it	mi
 8002338:	f044 0402 	orrmi.w	r4, r4, #2
 800233c:	421e      	tst	r6, r3
 800233e:	bf18      	it	ne
 8002340:	f044 0404 	orrne.w	r4, r4, #4
 8002344:	0733      	lsls	r3, r6, #28
 8002346:	bf48      	it	mi
 8002348:	f024 0404 	bicmi.w	r4, r4, #4
 800234c:	4638      	mov	r0, r7
 800234e:	bf48      	it	mi
 8002350:	f044 0408 	orrmi.w	r4, r4, #8
 8002354:	9700      	str	r7, [sp, #0]
 8002356:	f7fd ff9b 	bl	8000290 <strlen>
 800235a:	e9cd 4001 	strd	r4, r0, [sp, #4]
 800235e:	2401      	movs	r4, #1
 8002360:	4620      	mov	r0, r4
 8002362:	4649      	mov	r1, r9
 8002364:	beab      	bkpt	0x00ab
 8002366:	4604      	mov	r4, r0
 8002368:	2c00      	cmp	r4, #0
 800236a:	db08      	blt.n	800237e <_swiopen+0x7e>
 800236c:	f848 4035 	str.w	r4, [r8, r5, lsl #3]
 8002370:	eb08 08c5 	add.w	r8, r8, r5, lsl #3
 8002374:	2300      	movs	r3, #0
 8002376:	f8c8 3004 	str.w	r3, [r8, #4]
 800237a:	462c      	mov	r4, r5
 800237c:	e014      	b.n	80023a8 <_swiopen+0xa8>
 800237e:	4620      	mov	r0, r4
 8002380:	f7ff fe70 	bl	8002064 <error>
 8002384:	4604      	mov	r4, r0
 8002386:	e00f      	b.n	80023a8 <_swiopen+0xa8>
 8002388:	f406 6320 	and.w	r3, r6, #2560	; 0xa00
 800238c:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 8002390:	46e9      	mov	r9, sp
 8002392:	d1cb      	bne.n	800232c <_swiopen+0x2c>
 8002394:	4649      	mov	r1, r9
 8002396:	4638      	mov	r0, r7
 8002398:	f7ff ff95 	bl	80022c6 <_stat>
 800239c:	3001      	adds	r0, #1
 800239e:	d0c5      	beq.n	800232c <_swiopen+0x2c>
 80023a0:	f000 f906 	bl	80025b0 <__errno>
 80023a4:	2311      	movs	r3, #17
 80023a6:	6003      	str	r3, [r0, #0]
 80023a8:	4620      	mov	r0, r4
 80023aa:	b017      	add	sp, #92	; 0x5c
 80023ac:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80023b0:	200000ac 	.word	0x200000ac

080023b4 <_get_semihosting_exts>:
 80023b4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80023b8:	4606      	mov	r6, r0
 80023ba:	460f      	mov	r7, r1
 80023bc:	482a      	ldr	r0, [pc, #168]	; (8002468 <_get_semihosting_exts+0xb4>)
 80023be:	2100      	movs	r1, #0
 80023c0:	4615      	mov	r5, r2
 80023c2:	f7ff ff9d 	bl	8002300 <_swiopen>
 80023c6:	462a      	mov	r2, r5
 80023c8:	4604      	mov	r4, r0
 80023ca:	2100      	movs	r1, #0
 80023cc:	4630      	mov	r0, r6
 80023ce:	f7fe fe2b 	bl	8001028 <memset>
 80023d2:	1c63      	adds	r3, r4, #1
 80023d4:	d016      	beq.n	8002404 <_get_semihosting_exts+0x50>
 80023d6:	4620      	mov	r0, r4
 80023d8:	f7ff fe2a 	bl	8002030 <findslot>
 80023dc:	f04f 080c 	mov.w	r8, #12
 80023e0:	4681      	mov	r9, r0
 80023e2:	4640      	mov	r0, r8
 80023e4:	4649      	mov	r1, r9
 80023e6:	beab      	bkpt	0x00ab
 80023e8:	4680      	mov	r8, r0
 80023ea:	4640      	mov	r0, r8
 80023ec:	f7ff fe48 	bl	8002080 <checkerror>
 80023f0:	2803      	cmp	r0, #3
 80023f2:	dd02      	ble.n	80023fa <_get_semihosting_exts+0x46>
 80023f4:	1ec3      	subs	r3, r0, #3
 80023f6:	42ab      	cmp	r3, r5
 80023f8:	dc08      	bgt.n	800240c <_get_semihosting_exts+0x58>
 80023fa:	4620      	mov	r0, r4
 80023fc:	f7ff feea 	bl	80021d4 <_close>
 8002400:	f04f 34ff 	mov.w	r4, #4294967295
 8002404:	4620      	mov	r0, r4
 8002406:	b003      	add	sp, #12
 8002408:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800240c:	2204      	movs	r2, #4
 800240e:	eb0d 0102 	add.w	r1, sp, r2
 8002412:	4620      	mov	r0, r4
 8002414:	f7ff fe49 	bl	80020aa <_read>
 8002418:	2803      	cmp	r0, #3
 800241a:	ddee      	ble.n	80023fa <_get_semihosting_exts+0x46>
 800241c:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8002420:	2b53      	cmp	r3, #83	; 0x53
 8002422:	d1ea      	bne.n	80023fa <_get_semihosting_exts+0x46>
 8002424:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8002428:	2b48      	cmp	r3, #72	; 0x48
 800242a:	d1e6      	bne.n	80023fa <_get_semihosting_exts+0x46>
 800242c:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8002430:	2b46      	cmp	r3, #70	; 0x46
 8002432:	d1e2      	bne.n	80023fa <_get_semihosting_exts+0x46>
 8002434:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8002438:	2b42      	cmp	r3, #66	; 0x42
 800243a:	d1de      	bne.n	80023fa <_get_semihosting_exts+0x46>
 800243c:	2201      	movs	r2, #1
 800243e:	4639      	mov	r1, r7
 8002440:	4620      	mov	r0, r4
 8002442:	f7ff fe4c 	bl	80020de <_swilseek>
 8002446:	2800      	cmp	r0, #0
 8002448:	dbd7      	blt.n	80023fa <_get_semihosting_exts+0x46>
 800244a:	462a      	mov	r2, r5
 800244c:	4631      	mov	r1, r6
 800244e:	4620      	mov	r0, r4
 8002450:	f7ff fe2b 	bl	80020aa <_read>
 8002454:	4605      	mov	r5, r0
 8002456:	4620      	mov	r0, r4
 8002458:	f7ff febc 	bl	80021d4 <_close>
 800245c:	4628      	mov	r0, r5
 800245e:	f7ff fe0f 	bl	8002080 <checkerror>
 8002462:	4604      	mov	r4, r0
 8002464:	e7ce      	b.n	8002404 <_get_semihosting_exts+0x50>
 8002466:	bf00      	nop
 8002468:	080026cb 	.word	0x080026cb

0800246c <initialise_semihosting_exts>:
 800246c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800246e:	4d0a      	ldr	r5, [pc, #40]	; (8002498 <initialise_semihosting_exts+0x2c>)
 8002470:	4c0a      	ldr	r4, [pc, #40]	; (800249c <initialise_semihosting_exts+0x30>)
 8002472:	2100      	movs	r1, #0
 8002474:	2201      	movs	r2, #1
 8002476:	a801      	add	r0, sp, #4
 8002478:	6029      	str	r1, [r5, #0]
 800247a:	6022      	str	r2, [r4, #0]
 800247c:	f7ff ff9a 	bl	80023b4 <_get_semihosting_exts>
 8002480:	2800      	cmp	r0, #0
 8002482:	dd07      	ble.n	8002494 <initialise_semihosting_exts+0x28>
 8002484:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8002488:	f003 0201 	and.w	r2, r3, #1
 800248c:	f003 0302 	and.w	r3, r3, #2
 8002490:	602a      	str	r2, [r5, #0]
 8002492:	6023      	str	r3, [r4, #0]
 8002494:	b003      	add	sp, #12
 8002496:	bd30      	pop	{r4, r5, pc}
 8002498:	20000068 	.word	0x20000068
 800249c:	2000006c 	.word	0x2000006c

080024a0 <_has_ext_stdout_stderr>:
 80024a0:	b510      	push	{r4, lr}
 80024a2:	4c04      	ldr	r4, [pc, #16]	; (80024b4 <_has_ext_stdout_stderr+0x14>)
 80024a4:	6823      	ldr	r3, [r4, #0]
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	da01      	bge.n	80024ae <_has_ext_stdout_stderr+0xe>
 80024aa:	f7ff ffdf 	bl	800246c <initialise_semihosting_exts>
 80024ae:	6820      	ldr	r0, [r4, #0]
 80024b0:	bd10      	pop	{r4, pc}
 80024b2:	bf00      	nop
 80024b4:	2000006c 	.word	0x2000006c

080024b8 <initialise_monitor_handles>:
 80024b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80024bc:	b085      	sub	sp, #20
 80024be:	f8df 90a4 	ldr.w	r9, [pc, #164]	; 8002564 <initialise_monitor_handles+0xac>
 80024c2:	f8cd 9004 	str.w	r9, [sp, #4]
 80024c6:	2303      	movs	r3, #3
 80024c8:	2400      	movs	r4, #0
 80024ca:	9303      	str	r3, [sp, #12]
 80024cc:	af01      	add	r7, sp, #4
 80024ce:	9402      	str	r4, [sp, #8]
 80024d0:	2501      	movs	r5, #1
 80024d2:	4628      	mov	r0, r5
 80024d4:	4639      	mov	r1, r7
 80024d6:	beab      	bkpt	0x00ab
 80024d8:	4605      	mov	r5, r0
 80024da:	f8df 808c 	ldr.w	r8, [pc, #140]	; 8002568 <initialise_monitor_handles+0xb0>
 80024de:	4623      	mov	r3, r4
 80024e0:	4c22      	ldr	r4, [pc, #136]	; (800256c <initialise_monitor_handles+0xb4>)
 80024e2:	f8c8 5000 	str.w	r5, [r8]
 80024e6:	f04f 32ff 	mov.w	r2, #4294967295
 80024ea:	f844 2033 	str.w	r2, [r4, r3, lsl #3]
 80024ee:	3301      	adds	r3, #1
 80024f0:	2b14      	cmp	r3, #20
 80024f2:	d1fa      	bne.n	80024ea <initialise_monitor_handles+0x32>
 80024f4:	f7ff ffd4 	bl	80024a0 <_has_ext_stdout_stderr>
 80024f8:	4d1d      	ldr	r5, [pc, #116]	; (8002570 <initialise_monitor_handles+0xb8>)
 80024fa:	b1d0      	cbz	r0, 8002532 <initialise_monitor_handles+0x7a>
 80024fc:	f04f 0a03 	mov.w	sl, #3
 8002500:	2304      	movs	r3, #4
 8002502:	f8cd 9004 	str.w	r9, [sp, #4]
 8002506:	2601      	movs	r6, #1
 8002508:	f8cd a00c 	str.w	sl, [sp, #12]
 800250c:	9302      	str	r3, [sp, #8]
 800250e:	4630      	mov	r0, r6
 8002510:	4639      	mov	r1, r7
 8002512:	beab      	bkpt	0x00ab
 8002514:	4683      	mov	fp, r0
 8002516:	4b17      	ldr	r3, [pc, #92]	; (8002574 <initialise_monitor_handles+0xbc>)
 8002518:	f8cd 9004 	str.w	r9, [sp, #4]
 800251c:	f8c3 b000 	str.w	fp, [r3]
 8002520:	2308      	movs	r3, #8
 8002522:	f8cd a00c 	str.w	sl, [sp, #12]
 8002526:	9302      	str	r3, [sp, #8]
 8002528:	4630      	mov	r0, r6
 800252a:	4639      	mov	r1, r7
 800252c:	beab      	bkpt	0x00ab
 800252e:	4606      	mov	r6, r0
 8002530:	602e      	str	r6, [r5, #0]
 8002532:	682b      	ldr	r3, [r5, #0]
 8002534:	3301      	adds	r3, #1
 8002536:	bf02      	ittt	eq
 8002538:	4b0e      	ldreq	r3, [pc, #56]	; (8002574 <initialise_monitor_handles+0xbc>)
 800253a:	681b      	ldreq	r3, [r3, #0]
 800253c:	602b      	streq	r3, [r5, #0]
 800253e:	2600      	movs	r6, #0
 8002540:	f8d8 3000 	ldr.w	r3, [r8]
 8002544:	6023      	str	r3, [r4, #0]
 8002546:	6066      	str	r6, [r4, #4]
 8002548:	f7ff ffaa 	bl	80024a0 <_has_ext_stdout_stderr>
 800254c:	b130      	cbz	r0, 800255c <initialise_monitor_handles+0xa4>
 800254e:	4b09      	ldr	r3, [pc, #36]	; (8002574 <initialise_monitor_handles+0xbc>)
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	e9c4 3602 	strd	r3, r6, [r4, #8]
 8002556:	682b      	ldr	r3, [r5, #0]
 8002558:	e9c4 3604 	strd	r3, r6, [r4, #16]
 800255c:	b005      	add	sp, #20
 800255e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002562:	bf00      	nop
 8002564:	080026e1 	.word	0x080026e1
 8002568:	200000a4 	.word	0x200000a4
 800256c:	200000ac 	.word	0x200000ac
 8002570:	200000a0 	.word	0x200000a0
 8002574:	200000a8 	.word	0x200000a8

08002578 <_isatty>:
 8002578:	b570      	push	{r4, r5, r6, lr}
 800257a:	f7ff fd59 	bl	8002030 <findslot>
 800257e:	2509      	movs	r5, #9
 8002580:	4604      	mov	r4, r0
 8002582:	b920      	cbnz	r0, 800258e <_isatty+0x16>
 8002584:	f000 f814 	bl	80025b0 <__errno>
 8002588:	6005      	str	r5, [r0, #0]
 800258a:	4620      	mov	r0, r4
 800258c:	bd70      	pop	{r4, r5, r6, pc}
 800258e:	4628      	mov	r0, r5
 8002590:	4621      	mov	r1, r4
 8002592:	beab      	bkpt	0x00ab
 8002594:	4604      	mov	r4, r0
 8002596:	2c01      	cmp	r4, #1
 8002598:	d0f7      	beq.n	800258a <_isatty+0x12>
 800259a:	f000 f809 	bl	80025b0 <__errno>
 800259e:	2400      	movs	r4, #0
 80025a0:	4605      	mov	r5, r0
 80025a2:	2613      	movs	r6, #19
 80025a4:	4630      	mov	r0, r6
 80025a6:	4621      	mov	r1, r4
 80025a8:	beab      	bkpt	0x00ab
 80025aa:	4606      	mov	r6, r0
 80025ac:	602e      	str	r6, [r5, #0]
 80025ae:	e7ec      	b.n	800258a <_isatty+0x12>

080025b0 <__errno>:
 80025b0:	4b01      	ldr	r3, [pc, #4]	; (80025b8 <__errno+0x8>)
 80025b2:	6818      	ldr	r0, [r3, #0]
 80025b4:	4770      	bx	lr
 80025b6:	bf00      	nop
 80025b8:	20000000 	.word	0x20000000

080025bc <_init>:
 80025bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80025be:	bf00      	nop
 80025c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80025c2:	bc08      	pop	{r3}
 80025c4:	469e      	mov	lr, r3
 80025c6:	4770      	bx	lr

080025c8 <_fini>:
 80025c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80025ca:	bf00      	nop
 80025cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80025ce:	bc08      	pop	{r3}
 80025d0:	469e      	mov	lr, r3
 80025d2:	4770      	bx	lr

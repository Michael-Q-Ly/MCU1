
stm32f4xx_drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002648  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000154  080027f8  080027f8  000127f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800294c  0800294c  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  0800294c  0800294c  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800294c  0800294c  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800294c  0800294c  0001294c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002950  08002950  00012950  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08002954  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020070  2**0
                  CONTENTS
 10 .bss          000000dc  20000070  20000070  00020070  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000014c  2000014c  00020070  2**0
                  ALLOC
 12 .ARM.attributes 0000002a  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000167d  00000000  00000000  0002009a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000004e6  00000000  00000000  00021717  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000190  00000000  00000000  00021c00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000170  00000000  00000000  00021d90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00002332  00000000  00000000  00021f00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00001826  00000000  00000000  00024232  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0000a1f6  00000000  00000000  00025a58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0002fc4e  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000118c  00000000  00000000  0002fca0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000070 	.word	0x20000070
 80001cc:	00000000 	.word	0x00000000
 80001d0:	080027e0 	.word	0x080027e0

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000074 	.word	0x20000074
 80001ec:	080027e0 	.word	0x080027e0

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <GPIO_PeriClockControl>:
 * 
 * @return              none
 * 
 * @note                none
 */
void GPIO_PeriClockControl(GPIO_RegDef_t *pGPIOx, uint8_t EnorDi) {
 80002a0:	b480      	push	{r7}
 80002a2:	b083      	sub	sp, #12
 80002a4:	af00      	add	r7, sp, #0
 80002a6:	6078      	str	r0, [r7, #4]
 80002a8:	460b      	mov	r3, r1
 80002aa:	70fb      	strb	r3, [r7, #3]
    // If enabled,
    if (EnorDi == ENABLE) {
 80002ac:	78fb      	ldrb	r3, [r7, #3]
 80002ae:	2b01      	cmp	r3, #1
 80002b0:	f040 8095 	bne.w	80003de <GPIO_PeriClockControl+0x13e>
        // Check which GPIO and enable
        switch ((unsigned long int) pGPIOx) {
 80002b4:	687b      	ldr	r3, [r7, #4]
 80002b6:	4a8f      	ldr	r2, [pc, #572]	; (80004f4 <GPIO_PeriClockControl+0x254>)
 80002b8:	4293      	cmp	r3, r2
 80002ba:	f000 8089 	beq.w	80003d0 <GPIO_PeriClockControl+0x130>
 80002be:	4a8d      	ldr	r2, [pc, #564]	; (80004f4 <GPIO_PeriClockControl+0x254>)
 80002c0:	4293      	cmp	r3, r2
 80002c2:	f200 8136 	bhi.w	8000532 <GPIO_PeriClockControl+0x292>
 80002c6:	4a8c      	ldr	r2, [pc, #560]	; (80004f8 <GPIO_PeriClockControl+0x258>)
 80002c8:	4293      	cmp	r3, r2
 80002ca:	d07a      	beq.n	80003c2 <GPIO_PeriClockControl+0x122>
 80002cc:	4a8a      	ldr	r2, [pc, #552]	; (80004f8 <GPIO_PeriClockControl+0x258>)
 80002ce:	4293      	cmp	r3, r2
 80002d0:	f200 812f 	bhi.w	8000532 <GPIO_PeriClockControl+0x292>
 80002d4:	4a89      	ldr	r2, [pc, #548]	; (80004fc <GPIO_PeriClockControl+0x25c>)
 80002d6:	4293      	cmp	r3, r2
 80002d8:	d06c      	beq.n	80003b4 <GPIO_PeriClockControl+0x114>
 80002da:	4a88      	ldr	r2, [pc, #544]	; (80004fc <GPIO_PeriClockControl+0x25c>)
 80002dc:	4293      	cmp	r3, r2
 80002de:	f200 8128 	bhi.w	8000532 <GPIO_PeriClockControl+0x292>
 80002e2:	4a87      	ldr	r2, [pc, #540]	; (8000500 <GPIO_PeriClockControl+0x260>)
 80002e4:	4293      	cmp	r3, r2
 80002e6:	d05e      	beq.n	80003a6 <GPIO_PeriClockControl+0x106>
 80002e8:	4a85      	ldr	r2, [pc, #532]	; (8000500 <GPIO_PeriClockControl+0x260>)
 80002ea:	4293      	cmp	r3, r2
 80002ec:	f200 8121 	bhi.w	8000532 <GPIO_PeriClockControl+0x292>
 80002f0:	4a84      	ldr	r2, [pc, #528]	; (8000504 <GPIO_PeriClockControl+0x264>)
 80002f2:	4293      	cmp	r3, r2
 80002f4:	d050      	beq.n	8000398 <GPIO_PeriClockControl+0xf8>
 80002f6:	4a83      	ldr	r2, [pc, #524]	; (8000504 <GPIO_PeriClockControl+0x264>)
 80002f8:	4293      	cmp	r3, r2
 80002fa:	f200 811a 	bhi.w	8000532 <GPIO_PeriClockControl+0x292>
 80002fe:	4a82      	ldr	r2, [pc, #520]	; (8000508 <GPIO_PeriClockControl+0x268>)
 8000300:	4293      	cmp	r3, r2
 8000302:	d042      	beq.n	800038a <GPIO_PeriClockControl+0xea>
 8000304:	4a80      	ldr	r2, [pc, #512]	; (8000508 <GPIO_PeriClockControl+0x268>)
 8000306:	4293      	cmp	r3, r2
 8000308:	f200 8113 	bhi.w	8000532 <GPIO_PeriClockControl+0x292>
 800030c:	4a7f      	ldr	r2, [pc, #508]	; (800050c <GPIO_PeriClockControl+0x26c>)
 800030e:	4293      	cmp	r3, r2
 8000310:	d034      	beq.n	800037c <GPIO_PeriClockControl+0xdc>
 8000312:	4a7e      	ldr	r2, [pc, #504]	; (800050c <GPIO_PeriClockControl+0x26c>)
 8000314:	4293      	cmp	r3, r2
 8000316:	f200 810c 	bhi.w	8000532 <GPIO_PeriClockControl+0x292>
 800031a:	4a7d      	ldr	r2, [pc, #500]	; (8000510 <GPIO_PeriClockControl+0x270>)
 800031c:	4293      	cmp	r3, r2
 800031e:	d026      	beq.n	800036e <GPIO_PeriClockControl+0xce>
 8000320:	4a7b      	ldr	r2, [pc, #492]	; (8000510 <GPIO_PeriClockControl+0x270>)
 8000322:	4293      	cmp	r3, r2
 8000324:	f200 8105 	bhi.w	8000532 <GPIO_PeriClockControl+0x292>
 8000328:	4a7a      	ldr	r2, [pc, #488]	; (8000514 <GPIO_PeriClockControl+0x274>)
 800032a:	4293      	cmp	r3, r2
 800032c:	d018      	beq.n	8000360 <GPIO_PeriClockControl+0xc0>
 800032e:	4a79      	ldr	r2, [pc, #484]	; (8000514 <GPIO_PeriClockControl+0x274>)
 8000330:	4293      	cmp	r3, r2
 8000332:	f200 80fe 	bhi.w	8000532 <GPIO_PeriClockControl+0x292>
 8000336:	4a78      	ldr	r2, [pc, #480]	; (8000518 <GPIO_PeriClockControl+0x278>)
 8000338:	4293      	cmp	r3, r2
 800033a:	d003      	beq.n	8000344 <GPIO_PeriClockControl+0xa4>
 800033c:	4a77      	ldr	r2, [pc, #476]	; (800051c <GPIO_PeriClockControl+0x27c>)
 800033e:	4293      	cmp	r3, r2
 8000340:	d007      	beq.n	8000352 <GPIO_PeriClockControl+0xb2>
                case GPIOG_BASE_ADDR:       GPIOG_PCLK_EN() ;       break ;
                case GPIOH_BASE_ADDR:       GPIOH_PCLK_EN() ;       break ;
                case GPIOI_BASE_ADDR:       GPIOI_PCLK_EN() ;       break ;
                case GPIOJ_BASE_ADDR:       GPIOJ_PCLK_EN() ;       break ;
                case GPIOK_BASE_ADDR:       GPIOK_PCLK_EN() ;       break ;
                default:                    return ;                break ;         // TODO: return error or cause a user fault
 8000342:	e0f6      	b.n	8000532 <GPIO_PeriClockControl+0x292>
                case GPIOA_BASE_ADDR:       GPIOA_PCLK_EN() ;       break ;
 8000344:	4b76      	ldr	r3, [pc, #472]	; (8000520 <GPIO_PeriClockControl+0x280>)
 8000346:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000348:	4a75      	ldr	r2, [pc, #468]	; (8000520 <GPIO_PeriClockControl+0x280>)
 800034a:	f043 0301 	orr.w	r3, r3, #1
 800034e:	6313      	str	r3, [r2, #48]	; 0x30
 8000350:	e0f2      	b.n	8000538 <GPIO_PeriClockControl+0x298>
                case GPIOB_BASE_ADDR:       GPIOB_PCLK_EN() ;       break ;
 8000352:	4b73      	ldr	r3, [pc, #460]	; (8000520 <GPIO_PeriClockControl+0x280>)
 8000354:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000356:	4a72      	ldr	r2, [pc, #456]	; (8000520 <GPIO_PeriClockControl+0x280>)
 8000358:	f043 0302 	orr.w	r3, r3, #2
 800035c:	6313      	str	r3, [r2, #48]	; 0x30
 800035e:	e0eb      	b.n	8000538 <GPIO_PeriClockControl+0x298>
                case GPIOC_BASE_ADDR:       GPIOC_PCLK_EN() ;       break ;
 8000360:	4b6f      	ldr	r3, [pc, #444]	; (8000520 <GPIO_PeriClockControl+0x280>)
 8000362:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000364:	4a6e      	ldr	r2, [pc, #440]	; (8000520 <GPIO_PeriClockControl+0x280>)
 8000366:	f043 0304 	orr.w	r3, r3, #4
 800036a:	6313      	str	r3, [r2, #48]	; 0x30
 800036c:	e0e4      	b.n	8000538 <GPIO_PeriClockControl+0x298>
                case GPIOD_BASE_ADDR:       GPIOD_PCLK_EN() ;       break ;
 800036e:	4b6c      	ldr	r3, [pc, #432]	; (8000520 <GPIO_PeriClockControl+0x280>)
 8000370:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000372:	4a6b      	ldr	r2, [pc, #428]	; (8000520 <GPIO_PeriClockControl+0x280>)
 8000374:	f043 0308 	orr.w	r3, r3, #8
 8000378:	6313      	str	r3, [r2, #48]	; 0x30
 800037a:	e0dd      	b.n	8000538 <GPIO_PeriClockControl+0x298>
                case GPIOE_BASE_ADDR:       GPIOE_PCLK_EN() ;       break ;
 800037c:	4b68      	ldr	r3, [pc, #416]	; (8000520 <GPIO_PeriClockControl+0x280>)
 800037e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000380:	4a67      	ldr	r2, [pc, #412]	; (8000520 <GPIO_PeriClockControl+0x280>)
 8000382:	f043 0310 	orr.w	r3, r3, #16
 8000386:	6313      	str	r3, [r2, #48]	; 0x30
 8000388:	e0d6      	b.n	8000538 <GPIO_PeriClockControl+0x298>
                case GPIOF_BASE_ADDR:       GPIOF_PCLK_EN() ;       break ;
 800038a:	4b65      	ldr	r3, [pc, #404]	; (8000520 <GPIO_PeriClockControl+0x280>)
 800038c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800038e:	4a64      	ldr	r2, [pc, #400]	; (8000520 <GPIO_PeriClockControl+0x280>)
 8000390:	f043 0320 	orr.w	r3, r3, #32
 8000394:	6313      	str	r3, [r2, #48]	; 0x30
 8000396:	e0cf      	b.n	8000538 <GPIO_PeriClockControl+0x298>
                case GPIOG_BASE_ADDR:       GPIOG_PCLK_EN() ;       break ;
 8000398:	4b61      	ldr	r3, [pc, #388]	; (8000520 <GPIO_PeriClockControl+0x280>)
 800039a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800039c:	4a60      	ldr	r2, [pc, #384]	; (8000520 <GPIO_PeriClockControl+0x280>)
 800039e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80003a2:	6313      	str	r3, [r2, #48]	; 0x30
 80003a4:	e0c8      	b.n	8000538 <GPIO_PeriClockControl+0x298>
                case GPIOH_BASE_ADDR:       GPIOH_PCLK_EN() ;       break ;
 80003a6:	4b5e      	ldr	r3, [pc, #376]	; (8000520 <GPIO_PeriClockControl+0x280>)
 80003a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003aa:	4a5d      	ldr	r2, [pc, #372]	; (8000520 <GPIO_PeriClockControl+0x280>)
 80003ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80003b0:	6313      	str	r3, [r2, #48]	; 0x30
 80003b2:	e0c1      	b.n	8000538 <GPIO_PeriClockControl+0x298>
                case GPIOI_BASE_ADDR:       GPIOI_PCLK_EN() ;       break ;
 80003b4:	4b5a      	ldr	r3, [pc, #360]	; (8000520 <GPIO_PeriClockControl+0x280>)
 80003b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003b8:	4a59      	ldr	r2, [pc, #356]	; (8000520 <GPIO_PeriClockControl+0x280>)
 80003ba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80003be:	6313      	str	r3, [r2, #48]	; 0x30
 80003c0:	e0ba      	b.n	8000538 <GPIO_PeriClockControl+0x298>
                case GPIOJ_BASE_ADDR:       GPIOJ_PCLK_EN() ;       break ;
 80003c2:	4b57      	ldr	r3, [pc, #348]	; (8000520 <GPIO_PeriClockControl+0x280>)
 80003c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003c6:	4a56      	ldr	r2, [pc, #344]	; (8000520 <GPIO_PeriClockControl+0x280>)
 80003c8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80003cc:	6313      	str	r3, [r2, #48]	; 0x30
 80003ce:	e0b3      	b.n	8000538 <GPIO_PeriClockControl+0x298>
                case GPIOK_BASE_ADDR:       GPIOK_PCLK_EN() ;       break ;
 80003d0:	4b53      	ldr	r3, [pc, #332]	; (8000520 <GPIO_PeriClockControl+0x280>)
 80003d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003d4:	4a52      	ldr	r2, [pc, #328]	; (8000520 <GPIO_PeriClockControl+0x280>)
 80003d6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80003da:	6313      	str	r3, [r2, #48]	; 0x30
 80003dc:	e0ac      	b.n	8000538 <GPIO_PeriClockControl+0x298>
        }
    }
    else {
        // Disable the GPIO otherwise
        switch ((unsigned long int) pGPIOx) {
 80003de:	687b      	ldr	r3, [r7, #4]
 80003e0:	4a44      	ldr	r2, [pc, #272]	; (80004f4 <GPIO_PeriClockControl+0x254>)
 80003e2:	4293      	cmp	r3, r2
 80003e4:	f000 809e 	beq.w	8000524 <GPIO_PeriClockControl+0x284>
 80003e8:	4a42      	ldr	r2, [pc, #264]	; (80004f4 <GPIO_PeriClockControl+0x254>)
 80003ea:	4293      	cmp	r3, r2
 80003ec:	f200 80a3 	bhi.w	8000536 <GPIO_PeriClockControl+0x296>
 80003f0:	4a41      	ldr	r2, [pc, #260]	; (80004f8 <GPIO_PeriClockControl+0x258>)
 80003f2:	4293      	cmp	r3, r2
 80003f4:	d077      	beq.n	80004e6 <GPIO_PeriClockControl+0x246>
 80003f6:	4a40      	ldr	r2, [pc, #256]	; (80004f8 <GPIO_PeriClockControl+0x258>)
 80003f8:	4293      	cmp	r3, r2
 80003fa:	f200 809c 	bhi.w	8000536 <GPIO_PeriClockControl+0x296>
 80003fe:	4a3f      	ldr	r2, [pc, #252]	; (80004fc <GPIO_PeriClockControl+0x25c>)
 8000400:	4293      	cmp	r3, r2
 8000402:	d069      	beq.n	80004d8 <GPIO_PeriClockControl+0x238>
 8000404:	4a3d      	ldr	r2, [pc, #244]	; (80004fc <GPIO_PeriClockControl+0x25c>)
 8000406:	4293      	cmp	r3, r2
 8000408:	f200 8095 	bhi.w	8000536 <GPIO_PeriClockControl+0x296>
 800040c:	4a3c      	ldr	r2, [pc, #240]	; (8000500 <GPIO_PeriClockControl+0x260>)
 800040e:	4293      	cmp	r3, r2
 8000410:	d05b      	beq.n	80004ca <GPIO_PeriClockControl+0x22a>
 8000412:	4a3b      	ldr	r2, [pc, #236]	; (8000500 <GPIO_PeriClockControl+0x260>)
 8000414:	4293      	cmp	r3, r2
 8000416:	f200 808e 	bhi.w	8000536 <GPIO_PeriClockControl+0x296>
 800041a:	4a3a      	ldr	r2, [pc, #232]	; (8000504 <GPIO_PeriClockControl+0x264>)
 800041c:	4293      	cmp	r3, r2
 800041e:	d04d      	beq.n	80004bc <GPIO_PeriClockControl+0x21c>
 8000420:	4a38      	ldr	r2, [pc, #224]	; (8000504 <GPIO_PeriClockControl+0x264>)
 8000422:	4293      	cmp	r3, r2
 8000424:	f200 8087 	bhi.w	8000536 <GPIO_PeriClockControl+0x296>
 8000428:	4a37      	ldr	r2, [pc, #220]	; (8000508 <GPIO_PeriClockControl+0x268>)
 800042a:	4293      	cmp	r3, r2
 800042c:	d03f      	beq.n	80004ae <GPIO_PeriClockControl+0x20e>
 800042e:	4a36      	ldr	r2, [pc, #216]	; (8000508 <GPIO_PeriClockControl+0x268>)
 8000430:	4293      	cmp	r3, r2
 8000432:	f200 8080 	bhi.w	8000536 <GPIO_PeriClockControl+0x296>
 8000436:	4a35      	ldr	r2, [pc, #212]	; (800050c <GPIO_PeriClockControl+0x26c>)
 8000438:	4293      	cmp	r3, r2
 800043a:	d031      	beq.n	80004a0 <GPIO_PeriClockControl+0x200>
 800043c:	4a33      	ldr	r2, [pc, #204]	; (800050c <GPIO_PeriClockControl+0x26c>)
 800043e:	4293      	cmp	r3, r2
 8000440:	d879      	bhi.n	8000536 <GPIO_PeriClockControl+0x296>
 8000442:	4a33      	ldr	r2, [pc, #204]	; (8000510 <GPIO_PeriClockControl+0x270>)
 8000444:	4293      	cmp	r3, r2
 8000446:	d024      	beq.n	8000492 <GPIO_PeriClockControl+0x1f2>
 8000448:	4a31      	ldr	r2, [pc, #196]	; (8000510 <GPIO_PeriClockControl+0x270>)
 800044a:	4293      	cmp	r3, r2
 800044c:	d873      	bhi.n	8000536 <GPIO_PeriClockControl+0x296>
 800044e:	4a31      	ldr	r2, [pc, #196]	; (8000514 <GPIO_PeriClockControl+0x274>)
 8000450:	4293      	cmp	r3, r2
 8000452:	d017      	beq.n	8000484 <GPIO_PeriClockControl+0x1e4>
 8000454:	4a2f      	ldr	r2, [pc, #188]	; (8000514 <GPIO_PeriClockControl+0x274>)
 8000456:	4293      	cmp	r3, r2
 8000458:	d86d      	bhi.n	8000536 <GPIO_PeriClockControl+0x296>
 800045a:	4a2f      	ldr	r2, [pc, #188]	; (8000518 <GPIO_PeriClockControl+0x278>)
 800045c:	4293      	cmp	r3, r2
 800045e:	d003      	beq.n	8000468 <GPIO_PeriClockControl+0x1c8>
 8000460:	4a2e      	ldr	r2, [pc, #184]	; (800051c <GPIO_PeriClockControl+0x27c>)
 8000462:	4293      	cmp	r3, r2
 8000464:	d007      	beq.n	8000476 <GPIO_PeriClockControl+0x1d6>
                case GPIOG_BASE_ADDR:       GPIOG_PCLK_DI() ;       break ;
                case GPIOH_BASE_ADDR:       GPIOH_PCLK_DI() ;       break ;
                case GPIOI_BASE_ADDR:       GPIOI_PCLK_DI() ;       break ;
                case GPIOJ_BASE_ADDR:       GPIOJ_PCLK_DI() ;       break ;
                case GPIOK_BASE_ADDR:       GPIOK_PCLK_DI() ;       break ;
                default:                    return ;                break ;         // TODO: return error or cause a user fault
 8000466:	e066      	b.n	8000536 <GPIO_PeriClockControl+0x296>
                case GPIOA_BASE_ADDR:       GPIOA_PCLK_DI() ;       break ;
 8000468:	4b2d      	ldr	r3, [pc, #180]	; (8000520 <GPIO_PeriClockControl+0x280>)
 800046a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800046c:	4a2c      	ldr	r2, [pc, #176]	; (8000520 <GPIO_PeriClockControl+0x280>)
 800046e:	f023 0301 	bic.w	r3, r3, #1
 8000472:	6313      	str	r3, [r2, #48]	; 0x30
 8000474:	e060      	b.n	8000538 <GPIO_PeriClockControl+0x298>
                case GPIOB_BASE_ADDR:       GPIOB_PCLK_DI() ;       break ;
 8000476:	4b2a      	ldr	r3, [pc, #168]	; (8000520 <GPIO_PeriClockControl+0x280>)
 8000478:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800047a:	4a29      	ldr	r2, [pc, #164]	; (8000520 <GPIO_PeriClockControl+0x280>)
 800047c:	f023 0302 	bic.w	r3, r3, #2
 8000480:	6313      	str	r3, [r2, #48]	; 0x30
 8000482:	e059      	b.n	8000538 <GPIO_PeriClockControl+0x298>
                case GPIOC_BASE_ADDR:       GPIOC_PCLK_DI() ;       break ;
 8000484:	4b26      	ldr	r3, [pc, #152]	; (8000520 <GPIO_PeriClockControl+0x280>)
 8000486:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000488:	4a25      	ldr	r2, [pc, #148]	; (8000520 <GPIO_PeriClockControl+0x280>)
 800048a:	f023 0304 	bic.w	r3, r3, #4
 800048e:	6313      	str	r3, [r2, #48]	; 0x30
 8000490:	e052      	b.n	8000538 <GPIO_PeriClockControl+0x298>
                case GPIOD_BASE_ADDR:       GPIOD_PCLK_DI() ;       break ;
 8000492:	4b23      	ldr	r3, [pc, #140]	; (8000520 <GPIO_PeriClockControl+0x280>)
 8000494:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000496:	4a22      	ldr	r2, [pc, #136]	; (8000520 <GPIO_PeriClockControl+0x280>)
 8000498:	f023 0308 	bic.w	r3, r3, #8
 800049c:	6313      	str	r3, [r2, #48]	; 0x30
 800049e:	e04b      	b.n	8000538 <GPIO_PeriClockControl+0x298>
                case GPIOE_BASE_ADDR:       GPIOE_PCLK_DI() ;       break ;
 80004a0:	4b1f      	ldr	r3, [pc, #124]	; (8000520 <GPIO_PeriClockControl+0x280>)
 80004a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004a4:	4a1e      	ldr	r2, [pc, #120]	; (8000520 <GPIO_PeriClockControl+0x280>)
 80004a6:	f023 0310 	bic.w	r3, r3, #16
 80004aa:	6313      	str	r3, [r2, #48]	; 0x30
 80004ac:	e044      	b.n	8000538 <GPIO_PeriClockControl+0x298>
                case GPIOF_BASE_ADDR:       GPIOF_PCLK_DI() ;       break ;
 80004ae:	4b1c      	ldr	r3, [pc, #112]	; (8000520 <GPIO_PeriClockControl+0x280>)
 80004b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004b2:	4a1b      	ldr	r2, [pc, #108]	; (8000520 <GPIO_PeriClockControl+0x280>)
 80004b4:	f023 0320 	bic.w	r3, r3, #32
 80004b8:	6313      	str	r3, [r2, #48]	; 0x30
 80004ba:	e03d      	b.n	8000538 <GPIO_PeriClockControl+0x298>
                case GPIOG_BASE_ADDR:       GPIOG_PCLK_DI() ;       break ;
 80004bc:	4b18      	ldr	r3, [pc, #96]	; (8000520 <GPIO_PeriClockControl+0x280>)
 80004be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004c0:	4a17      	ldr	r2, [pc, #92]	; (8000520 <GPIO_PeriClockControl+0x280>)
 80004c2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80004c6:	6313      	str	r3, [r2, #48]	; 0x30
 80004c8:	e036      	b.n	8000538 <GPIO_PeriClockControl+0x298>
                case GPIOH_BASE_ADDR:       GPIOH_PCLK_DI() ;       break ;
 80004ca:	4b15      	ldr	r3, [pc, #84]	; (8000520 <GPIO_PeriClockControl+0x280>)
 80004cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004ce:	4a14      	ldr	r2, [pc, #80]	; (8000520 <GPIO_PeriClockControl+0x280>)
 80004d0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80004d4:	6313      	str	r3, [r2, #48]	; 0x30
 80004d6:	e02f      	b.n	8000538 <GPIO_PeriClockControl+0x298>
                case GPIOI_BASE_ADDR:       GPIOI_PCLK_DI() ;       break ;
 80004d8:	4b11      	ldr	r3, [pc, #68]	; (8000520 <GPIO_PeriClockControl+0x280>)
 80004da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004dc:	4a10      	ldr	r2, [pc, #64]	; (8000520 <GPIO_PeriClockControl+0x280>)
 80004de:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80004e2:	6313      	str	r3, [r2, #48]	; 0x30
 80004e4:	e028      	b.n	8000538 <GPIO_PeriClockControl+0x298>
                case GPIOJ_BASE_ADDR:       GPIOJ_PCLK_DI() ;       break ;
 80004e6:	4b0e      	ldr	r3, [pc, #56]	; (8000520 <GPIO_PeriClockControl+0x280>)
 80004e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004ea:	4a0d      	ldr	r2, [pc, #52]	; (8000520 <GPIO_PeriClockControl+0x280>)
 80004ec:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80004f0:	6313      	str	r3, [r2, #48]	; 0x30
 80004f2:	e021      	b.n	8000538 <GPIO_PeriClockControl+0x298>
 80004f4:	40022800 	.word	0x40022800
 80004f8:	40022400 	.word	0x40022400
 80004fc:	40022000 	.word	0x40022000
 8000500:	40021c00 	.word	0x40021c00
 8000504:	40021800 	.word	0x40021800
 8000508:	40021400 	.word	0x40021400
 800050c:	40021000 	.word	0x40021000
 8000510:	40020c00 	.word	0x40020c00
 8000514:	40020800 	.word	0x40020800
 8000518:	40020000 	.word	0x40020000
 800051c:	40020400 	.word	0x40020400
 8000520:	40023800 	.word	0x40023800
                case GPIOK_BASE_ADDR:       GPIOK_PCLK_DI() ;       break ;
 8000524:	4b06      	ldr	r3, [pc, #24]	; (8000540 <GPIO_PeriClockControl+0x2a0>)
 8000526:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000528:	4a05      	ldr	r2, [pc, #20]	; (8000540 <GPIO_PeriClockControl+0x2a0>)
 800052a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800052e:	6313      	str	r3, [r2, #48]	; 0x30
 8000530:	e002      	b.n	8000538 <GPIO_PeriClockControl+0x298>
                default:                    return ;                break ;         // TODO: return error or cause a user fault
 8000532:	bf00      	nop
 8000534:	e000      	b.n	8000538 <GPIO_PeriClockControl+0x298>
                default:                    return ;                break ;         // TODO: return error or cause a user fault
 8000536:	bf00      	nop
        }
    }
}
 8000538:	370c      	adds	r7, #12
 800053a:	46bd      	mov	sp, r7
 800053c:	bc80      	pop	{r7}
 800053e:	4770      	bx	lr
 8000540:	40023800 	.word	0x40023800

08000544 <GPIO_Init>:
 *                                          by that amount. This gives us a left shift of 8, landing us
 *                                          on bit 8 of the high reg, which is the lsb of pin 10's four
 *                                          bit fields!
 *                                      
 */
void GPIO_Init(GPIO_Handle_t *pGPIO_Handle) {
 8000544:	b580      	push	{r7, lr}
 8000546:	b086      	sub	sp, #24
 8000548:	af00      	add	r7, sp, #0
 800054a:	6078      	str	r0, [r7, #4]
    // 0. Enable the GPIO peripheral clock
    GPIO_PeriClockControl(pGPIO_Handle->pGPIOx, ENABLE) ;
 800054c:	687b      	ldr	r3, [r7, #4]
 800054e:	681b      	ldr	r3, [r3, #0]
 8000550:	2101      	movs	r1, #1
 8000552:	4618      	mov	r0, r3
 8000554:	f7ff fea4 	bl	80002a0 <GPIO_PeriClockControl>
    
    // 1. Configure the mode of GPIO pin
    uint32_t temp = 0 ;                                                                                             // Temporary register
 8000558:	2300      	movs	r3, #0
 800055a:	617b      	str	r3, [r7, #20]
    if (pGPIO_Handle->GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_ANALOG) {
 800055c:	687b      	ldr	r3, [r7, #4]
 800055e:	795b      	ldrb	r3, [r3, #5]
 8000560:	2b03      	cmp	r3, #3
 8000562:	d820      	bhi.n	80005a6 <GPIO_Init+0x62>
        // The non-interrupt mode
        temp = (pGPIO_Handle->GPIO_PinConfig.GPIO_PinMode << (2 * pGPIO_Handle->GPIO_PinConfig.GPIO_PinNumber)) ;
 8000564:	687b      	ldr	r3, [r7, #4]
 8000566:	795b      	ldrb	r3, [r3, #5]
 8000568:	461a      	mov	r2, r3
 800056a:	687b      	ldr	r3, [r7, #4]
 800056c:	791b      	ldrb	r3, [r3, #4]
 800056e:	005b      	lsls	r3, r3, #1
 8000570:	fa02 f303 	lsl.w	r3, r2, r3
 8000574:	617b      	str	r3, [r7, #20]
        pGPIO_Handle->pGPIOx->MODER &= ~(0x3 << 2 * (pGPIO_Handle->GPIO_PinConfig.GPIO_PinNumber)) ;                // Clear 2 bit fields
 8000576:	687b      	ldr	r3, [r7, #4]
 8000578:	681b      	ldr	r3, [r3, #0]
 800057a:	681a      	ldr	r2, [r3, #0]
 800057c:	687b      	ldr	r3, [r7, #4]
 800057e:	791b      	ldrb	r3, [r3, #4]
 8000580:	005b      	lsls	r3, r3, #1
 8000582:	2103      	movs	r1, #3
 8000584:	fa01 f303 	lsl.w	r3, r1, r3
 8000588:	43db      	mvns	r3, r3
 800058a:	4619      	mov	r1, r3
 800058c:	687b      	ldr	r3, [r7, #4]
 800058e:	681b      	ldr	r3, [r3, #0]
 8000590:	400a      	ands	r2, r1
 8000592:	601a      	str	r2, [r3, #0]
        pGPIO_Handle->pGPIOx->MODER |= temp ;                                                                       // Set
 8000594:	687b      	ldr	r3, [r7, #4]
 8000596:	681b      	ldr	r3, [r3, #0]
 8000598:	6819      	ldr	r1, [r3, #0]
 800059a:	687b      	ldr	r3, [r7, #4]
 800059c:	681b      	ldr	r3, [r3, #0]
 800059e:	697a      	ldr	r2, [r7, #20]
 80005a0:	430a      	orrs	r2, r1
 80005a2:	601a      	str	r2, [r3, #0]
 80005a4:	e0f1      	b.n	800078a <GPIO_Init+0x246>
    }
    else {
        // Interrupt mode
        uint8_t bitFieldOffset = pGPIO_Handle->GPIO_PinConfig.GPIO_PinNumber ;
 80005a6:	687b      	ldr	r3, [r7, #4]
 80005a8:	791b      	ldrb	r3, [r3, #4]
 80005aa:	74fb      	strb	r3, [r7, #19]
        switch (pGPIO_Handle->GPIO_PinConfig.GPIO_PinMode) {
 80005ac:	687b      	ldr	r3, [r7, #4]
 80005ae:	795b      	ldrb	r3, [r3, #5]
 80005b0:	2b06      	cmp	r3, #6
 80005b2:	d033      	beq.n	800061c <GPIO_Init+0xd8>
 80005b4:	2b06      	cmp	r3, #6
 80005b6:	f300 8184 	bgt.w	80008c2 <GPIO_Init+0x37e>
 80005ba:	2b04      	cmp	r3, #4
 80005bc:	d002      	beq.n	80005c4 <GPIO_Init+0x80>
 80005be:	2b05      	cmp	r3, #5
 80005c0:	d016      	beq.n	80005f0 <GPIO_Init+0xac>
                // 1. Configure the FTSR and RTSR
                EXTI->FTSR |= (1 << bitFieldOffset) ;
                EXTI->RTSR |= (1 << bitFieldOffset) ;
                break ;
            default:
                return ;
 80005c2:	e17e      	b.n	80008c2 <GPIO_Init+0x37e>
                EXTI->FTSR |= (1 << bitFieldOffset) ;
 80005c4:	4b4a      	ldr	r3, [pc, #296]	; (80006f0 <GPIO_Init+0x1ac>)
 80005c6:	68db      	ldr	r3, [r3, #12]
 80005c8:	7cfa      	ldrb	r2, [r7, #19]
 80005ca:	2101      	movs	r1, #1
 80005cc:	fa01 f202 	lsl.w	r2, r1, r2
 80005d0:	4611      	mov	r1, r2
 80005d2:	4a47      	ldr	r2, [pc, #284]	; (80006f0 <GPIO_Init+0x1ac>)
 80005d4:	430b      	orrs	r3, r1
 80005d6:	60d3      	str	r3, [r2, #12]
                EXTI->RTSR &= ~(1 << bitFieldOffset) ;
 80005d8:	4b45      	ldr	r3, [pc, #276]	; (80006f0 <GPIO_Init+0x1ac>)
 80005da:	689b      	ldr	r3, [r3, #8]
 80005dc:	7cfa      	ldrb	r2, [r7, #19]
 80005de:	2101      	movs	r1, #1
 80005e0:	fa01 f202 	lsl.w	r2, r1, r2
 80005e4:	43d2      	mvns	r2, r2
 80005e6:	4611      	mov	r1, r2
 80005e8:	4a41      	ldr	r2, [pc, #260]	; (80006f0 <GPIO_Init+0x1ac>)
 80005ea:	400b      	ands	r3, r1
 80005ec:	6093      	str	r3, [r2, #8]
                break ;
 80005ee:	e02a      	b.n	8000646 <GPIO_Init+0x102>
                EXTI->RTSR |= (1 << bitFieldOffset) ;
 80005f0:	4b3f      	ldr	r3, [pc, #252]	; (80006f0 <GPIO_Init+0x1ac>)
 80005f2:	689b      	ldr	r3, [r3, #8]
 80005f4:	7cfa      	ldrb	r2, [r7, #19]
 80005f6:	2101      	movs	r1, #1
 80005f8:	fa01 f202 	lsl.w	r2, r1, r2
 80005fc:	4611      	mov	r1, r2
 80005fe:	4a3c      	ldr	r2, [pc, #240]	; (80006f0 <GPIO_Init+0x1ac>)
 8000600:	430b      	orrs	r3, r1
 8000602:	6093      	str	r3, [r2, #8]
                EXTI->FTSR &= ~(1 << bitFieldOffset) ;
 8000604:	4b3a      	ldr	r3, [pc, #232]	; (80006f0 <GPIO_Init+0x1ac>)
 8000606:	68db      	ldr	r3, [r3, #12]
 8000608:	7cfa      	ldrb	r2, [r7, #19]
 800060a:	2101      	movs	r1, #1
 800060c:	fa01 f202 	lsl.w	r2, r1, r2
 8000610:	43d2      	mvns	r2, r2
 8000612:	4611      	mov	r1, r2
 8000614:	4a36      	ldr	r2, [pc, #216]	; (80006f0 <GPIO_Init+0x1ac>)
 8000616:	400b      	ands	r3, r1
 8000618:	60d3      	str	r3, [r2, #12]
                break ;
 800061a:	e014      	b.n	8000646 <GPIO_Init+0x102>
                EXTI->FTSR |= (1 << bitFieldOffset) ;
 800061c:	4b34      	ldr	r3, [pc, #208]	; (80006f0 <GPIO_Init+0x1ac>)
 800061e:	68db      	ldr	r3, [r3, #12]
 8000620:	7cfa      	ldrb	r2, [r7, #19]
 8000622:	2101      	movs	r1, #1
 8000624:	fa01 f202 	lsl.w	r2, r1, r2
 8000628:	4611      	mov	r1, r2
 800062a:	4a31      	ldr	r2, [pc, #196]	; (80006f0 <GPIO_Init+0x1ac>)
 800062c:	430b      	orrs	r3, r1
 800062e:	60d3      	str	r3, [r2, #12]
                EXTI->RTSR |= (1 << bitFieldOffset) ;
 8000630:	4b2f      	ldr	r3, [pc, #188]	; (80006f0 <GPIO_Init+0x1ac>)
 8000632:	689b      	ldr	r3, [r3, #8]
 8000634:	7cfa      	ldrb	r2, [r7, #19]
 8000636:	2101      	movs	r1, #1
 8000638:	fa01 f202 	lsl.w	r2, r1, r2
 800063c:	4611      	mov	r1, r2
 800063e:	4a2c      	ldr	r2, [pc, #176]	; (80006f0 <GPIO_Init+0x1ac>)
 8000640:	430b      	orrs	r3, r1
 8000642:	6093      	str	r3, [r2, #8]
                break ;
 8000644:	bf00      	nop
        }

        // 2. Configure the GPIO port selection in SYSCFG_EXTICR
        uint8_t temp1 = bitFieldOffset / 4 ;
 8000646:	7cfb      	ldrb	r3, [r7, #19]
 8000648:	089b      	lsrs	r3, r3, #2
 800064a:	74bb      	strb	r3, [r7, #18]
        uint8_t temp2 = bitFieldOffset % 4 ;
 800064c:	7cfb      	ldrb	r3, [r7, #19]
 800064e:	f003 0303 	and.w	r3, r3, #3
 8000652:	747b      	strb	r3, [r7, #17]
        uint8_t portCode = GPIO_BASE_ADDR_TO_CODE(pGPIO_Handle->pGPIOx) ;
 8000654:	687b      	ldr	r3, [r7, #4]
 8000656:	681b      	ldr	r3, [r3, #0]
 8000658:	4a26      	ldr	r2, [pc, #152]	; (80006f4 <GPIO_Init+0x1b0>)
 800065a:	4293      	cmp	r3, r2
 800065c:	d060      	beq.n	8000720 <GPIO_Init+0x1dc>
 800065e:	687b      	ldr	r3, [r7, #4]
 8000660:	681b      	ldr	r3, [r3, #0]
 8000662:	4a25      	ldr	r2, [pc, #148]	; (80006f8 <GPIO_Init+0x1b4>)
 8000664:	4293      	cmp	r3, r2
 8000666:	d040      	beq.n	80006ea <GPIO_Init+0x1a6>
 8000668:	687b      	ldr	r3, [r7, #4]
 800066a:	681b      	ldr	r3, [r3, #0]
 800066c:	4a23      	ldr	r2, [pc, #140]	; (80006fc <GPIO_Init+0x1b8>)
 800066e:	4293      	cmp	r3, r2
 8000670:	d039      	beq.n	80006e6 <GPIO_Init+0x1a2>
 8000672:	687b      	ldr	r3, [r7, #4]
 8000674:	681b      	ldr	r3, [r3, #0]
 8000676:	4a22      	ldr	r2, [pc, #136]	; (8000700 <GPIO_Init+0x1bc>)
 8000678:	4293      	cmp	r3, r2
 800067a:	d032      	beq.n	80006e2 <GPIO_Init+0x19e>
 800067c:	687b      	ldr	r3, [r7, #4]
 800067e:	681b      	ldr	r3, [r3, #0]
 8000680:	4a20      	ldr	r2, [pc, #128]	; (8000704 <GPIO_Init+0x1c0>)
 8000682:	4293      	cmp	r3, r2
 8000684:	d02b      	beq.n	80006de <GPIO_Init+0x19a>
 8000686:	687b      	ldr	r3, [r7, #4]
 8000688:	681b      	ldr	r3, [r3, #0]
 800068a:	4a1f      	ldr	r2, [pc, #124]	; (8000708 <GPIO_Init+0x1c4>)
 800068c:	4293      	cmp	r3, r2
 800068e:	d024      	beq.n	80006da <GPIO_Init+0x196>
 8000690:	687b      	ldr	r3, [r7, #4]
 8000692:	681b      	ldr	r3, [r3, #0]
 8000694:	4a1d      	ldr	r2, [pc, #116]	; (800070c <GPIO_Init+0x1c8>)
 8000696:	4293      	cmp	r3, r2
 8000698:	d01d      	beq.n	80006d6 <GPIO_Init+0x192>
 800069a:	687b      	ldr	r3, [r7, #4]
 800069c:	681b      	ldr	r3, [r3, #0]
 800069e:	4a1c      	ldr	r2, [pc, #112]	; (8000710 <GPIO_Init+0x1cc>)
 80006a0:	4293      	cmp	r3, r2
 80006a2:	d016      	beq.n	80006d2 <GPIO_Init+0x18e>
 80006a4:	687b      	ldr	r3, [r7, #4]
 80006a6:	681b      	ldr	r3, [r3, #0]
 80006a8:	4a1a      	ldr	r2, [pc, #104]	; (8000714 <GPIO_Init+0x1d0>)
 80006aa:	4293      	cmp	r3, r2
 80006ac:	d00f      	beq.n	80006ce <GPIO_Init+0x18a>
 80006ae:	687b      	ldr	r3, [r7, #4]
 80006b0:	681b      	ldr	r3, [r3, #0]
 80006b2:	4a19      	ldr	r2, [pc, #100]	; (8000718 <GPIO_Init+0x1d4>)
 80006b4:	4293      	cmp	r3, r2
 80006b6:	d008      	beq.n	80006ca <GPIO_Init+0x186>
 80006b8:	687b      	ldr	r3, [r7, #4]
 80006ba:	681b      	ldr	r3, [r3, #0]
 80006bc:	4a17      	ldr	r2, [pc, #92]	; (800071c <GPIO_Init+0x1d8>)
 80006be:	4293      	cmp	r3, r2
 80006c0:	d101      	bne.n	80006c6 <GPIO_Init+0x182>
 80006c2:	230a      	movs	r3, #10
 80006c4:	e02d      	b.n	8000722 <GPIO_Init+0x1de>
 80006c6:	2300      	movs	r3, #0
 80006c8:	e02b      	b.n	8000722 <GPIO_Init+0x1de>
 80006ca:	2309      	movs	r3, #9
 80006cc:	e029      	b.n	8000722 <GPIO_Init+0x1de>
 80006ce:	2308      	movs	r3, #8
 80006d0:	e027      	b.n	8000722 <GPIO_Init+0x1de>
 80006d2:	2307      	movs	r3, #7
 80006d4:	e025      	b.n	8000722 <GPIO_Init+0x1de>
 80006d6:	2306      	movs	r3, #6
 80006d8:	e023      	b.n	8000722 <GPIO_Init+0x1de>
 80006da:	2305      	movs	r3, #5
 80006dc:	e021      	b.n	8000722 <GPIO_Init+0x1de>
 80006de:	2304      	movs	r3, #4
 80006e0:	e01f      	b.n	8000722 <GPIO_Init+0x1de>
 80006e2:	2303      	movs	r3, #3
 80006e4:	e01d      	b.n	8000722 <GPIO_Init+0x1de>
 80006e6:	2302      	movs	r3, #2
 80006e8:	e01b      	b.n	8000722 <GPIO_Init+0x1de>
 80006ea:	2301      	movs	r3, #1
 80006ec:	e019      	b.n	8000722 <GPIO_Init+0x1de>
 80006ee:	bf00      	nop
 80006f0:	40013c00 	.word	0x40013c00
 80006f4:	40020000 	.word	0x40020000
 80006f8:	40020400 	.word	0x40020400
 80006fc:	40020800 	.word	0x40020800
 8000700:	40020c00 	.word	0x40020c00
 8000704:	40021000 	.word	0x40021000
 8000708:	40021400 	.word	0x40021400
 800070c:	40021800 	.word	0x40021800
 8000710:	40021c00 	.word	0x40021c00
 8000714:	40022000 	.word	0x40022000
 8000718:	40022400 	.word	0x40022400
 800071c:	40022800 	.word	0x40022800
 8000720:	2300      	movs	r3, #0
 8000722:	743b      	strb	r3, [r7, #16]
        SYSCFG_PCLK_EN() ;                                                                                          // Enable SYSCFG peripheral clock
 8000724:	4b69      	ldr	r3, [pc, #420]	; (80008cc <GPIO_Init+0x388>)
 8000726:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000728:	4a68      	ldr	r2, [pc, #416]	; (80008cc <GPIO_Init+0x388>)
 800072a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800072e:	6453      	str	r3, [r2, #68]	; 0x44
        SYSCFG->EXTICR[temp1] &= ~(0xF << (temp2 * 4)) ;                                                            // Clear 4 bits
 8000730:	4a67      	ldr	r2, [pc, #412]	; (80008d0 <GPIO_Init+0x38c>)
 8000732:	7cbb      	ldrb	r3, [r7, #18]
 8000734:	3302      	adds	r3, #2
 8000736:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800073a:	7c7b      	ldrb	r3, [r7, #17]
 800073c:	009b      	lsls	r3, r3, #2
 800073e:	210f      	movs	r1, #15
 8000740:	fa01 f303 	lsl.w	r3, r1, r3
 8000744:	43db      	mvns	r3, r3
 8000746:	4618      	mov	r0, r3
 8000748:	4961      	ldr	r1, [pc, #388]	; (80008d0 <GPIO_Init+0x38c>)
 800074a:	7cbb      	ldrb	r3, [r7, #18]
 800074c:	4002      	ands	r2, r0
 800074e:	3302      	adds	r3, #2
 8000750:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        SYSCFG->EXTICR[temp1] |= (portCode << (temp2 * 4)) ;                                                        // Set 4 bits
 8000754:	4a5e      	ldr	r2, [pc, #376]	; (80008d0 <GPIO_Init+0x38c>)
 8000756:	7cbb      	ldrb	r3, [r7, #18]
 8000758:	3302      	adds	r3, #2
 800075a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800075e:	7c39      	ldrb	r1, [r7, #16]
 8000760:	7c7b      	ldrb	r3, [r7, #17]
 8000762:	009b      	lsls	r3, r3, #2
 8000764:	fa01 f303 	lsl.w	r3, r1, r3
 8000768:	4618      	mov	r0, r3
 800076a:	4959      	ldr	r1, [pc, #356]	; (80008d0 <GPIO_Init+0x38c>)
 800076c:	7cbb      	ldrb	r3, [r7, #18]
 800076e:	4302      	orrs	r2, r0
 8000770:	3302      	adds	r3, #2
 8000772:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        // 3. Enable the EXTI interrupt delivery using IMR
        EXTI->IMR |= (1 << bitFieldOffset) ;
 8000776:	4b57      	ldr	r3, [pc, #348]	; (80008d4 <GPIO_Init+0x390>)
 8000778:	681b      	ldr	r3, [r3, #0]
 800077a:	7cfa      	ldrb	r2, [r7, #19]
 800077c:	2101      	movs	r1, #1
 800077e:	fa01 f202 	lsl.w	r2, r1, r2
 8000782:	4611      	mov	r1, r2
 8000784:	4a53      	ldr	r2, [pc, #332]	; (80008d4 <GPIO_Init+0x390>)
 8000786:	430b      	orrs	r3, r1
 8000788:	6013      	str	r3, [r2, #0]
    }

    // 2. Configure the speed
    temp = 0 ;
 800078a:	2300      	movs	r3, #0
 800078c:	617b      	str	r3, [r7, #20]
    temp = pGPIO_Handle->GPIO_PinConfig.GPIO_PinSpeed << (2 * pGPIO_Handle->GPIO_PinConfig.GPIO_PinNumber) ;
 800078e:	687b      	ldr	r3, [r7, #4]
 8000790:	799b      	ldrb	r3, [r3, #6]
 8000792:	461a      	mov	r2, r3
 8000794:	687b      	ldr	r3, [r7, #4]
 8000796:	791b      	ldrb	r3, [r3, #4]
 8000798:	005b      	lsls	r3, r3, #1
 800079a:	fa02 f303 	lsl.w	r3, r2, r3
 800079e:	617b      	str	r3, [r7, #20]
    pGPIO_Handle->pGPIOx->OSPEEDR &= ~(0x3 << (2 * pGPIO_Handle->GPIO_PinConfig.GPIO_PinNumber)) ;                  // Clear
 80007a0:	687b      	ldr	r3, [r7, #4]
 80007a2:	681b      	ldr	r3, [r3, #0]
 80007a4:	689a      	ldr	r2, [r3, #8]
 80007a6:	687b      	ldr	r3, [r7, #4]
 80007a8:	791b      	ldrb	r3, [r3, #4]
 80007aa:	005b      	lsls	r3, r3, #1
 80007ac:	2103      	movs	r1, #3
 80007ae:	fa01 f303 	lsl.w	r3, r1, r3
 80007b2:	43db      	mvns	r3, r3
 80007b4:	4619      	mov	r1, r3
 80007b6:	687b      	ldr	r3, [r7, #4]
 80007b8:	681b      	ldr	r3, [r3, #0]
 80007ba:	400a      	ands	r2, r1
 80007bc:	609a      	str	r2, [r3, #8]
    pGPIO_Handle->pGPIOx->OSPEEDR |= temp ;                                                                         // Set
 80007be:	687b      	ldr	r3, [r7, #4]
 80007c0:	681b      	ldr	r3, [r3, #0]
 80007c2:	6899      	ldr	r1, [r3, #8]
 80007c4:	687b      	ldr	r3, [r7, #4]
 80007c6:	681b      	ldr	r3, [r3, #0]
 80007c8:	697a      	ldr	r2, [r7, #20]
 80007ca:	430a      	orrs	r2, r1
 80007cc:	609a      	str	r2, [r3, #8]

    // 3. Configure the PUPD settings
    temp = 0 ;
 80007ce:	2300      	movs	r3, #0
 80007d0:	617b      	str	r3, [r7, #20]
    temp = pGPIO_Handle->GPIO_PinConfig.GPIO_PinPuPdCtrl << (2 * pGPIO_Handle->GPIO_PinConfig.GPIO_PinNumber) ;
 80007d2:	687b      	ldr	r3, [r7, #4]
 80007d4:	79db      	ldrb	r3, [r3, #7]
 80007d6:	461a      	mov	r2, r3
 80007d8:	687b      	ldr	r3, [r7, #4]
 80007da:	791b      	ldrb	r3, [r3, #4]
 80007dc:	005b      	lsls	r3, r3, #1
 80007de:	fa02 f303 	lsl.w	r3, r2, r3
 80007e2:	617b      	str	r3, [r7, #20]
    pGPIO_Handle->pGPIOx->PUPDR &= ~(0x3 << (2 *pGPIO_Handle->GPIO_PinConfig.GPIO_PinNumber)) ;                     // Clear
 80007e4:	687b      	ldr	r3, [r7, #4]
 80007e6:	681b      	ldr	r3, [r3, #0]
 80007e8:	68da      	ldr	r2, [r3, #12]
 80007ea:	687b      	ldr	r3, [r7, #4]
 80007ec:	791b      	ldrb	r3, [r3, #4]
 80007ee:	005b      	lsls	r3, r3, #1
 80007f0:	2103      	movs	r1, #3
 80007f2:	fa01 f303 	lsl.w	r3, r1, r3
 80007f6:	43db      	mvns	r3, r3
 80007f8:	4619      	mov	r1, r3
 80007fa:	687b      	ldr	r3, [r7, #4]
 80007fc:	681b      	ldr	r3, [r3, #0]
 80007fe:	400a      	ands	r2, r1
 8000800:	60da      	str	r2, [r3, #12]
    pGPIO_Handle->pGPIOx->PUPDR |= temp ;                                                                           // Set
 8000802:	687b      	ldr	r3, [r7, #4]
 8000804:	681b      	ldr	r3, [r3, #0]
 8000806:	68d9      	ldr	r1, [r3, #12]
 8000808:	687b      	ldr	r3, [r7, #4]
 800080a:	681b      	ldr	r3, [r3, #0]
 800080c:	697a      	ldr	r2, [r7, #20]
 800080e:	430a      	orrs	r2, r1
 8000810:	60da      	str	r2, [r3, #12]

    // 4. Configure the op type
    temp = 0 ;
 8000812:	2300      	movs	r3, #0
 8000814:	617b      	str	r3, [r7, #20]
    temp = pGPIO_Handle->GPIO_PinConfig.GPIO_PinOPType << pGPIO_Handle->GPIO_PinConfig.GPIO_PinNumber ;
 8000816:	687b      	ldr	r3, [r7, #4]
 8000818:	7a1b      	ldrb	r3, [r3, #8]
 800081a:	461a      	mov	r2, r3
 800081c:	687b      	ldr	r3, [r7, #4]
 800081e:	791b      	ldrb	r3, [r3, #4]
 8000820:	fa02 f303 	lsl.w	r3, r2, r3
 8000824:	617b      	str	r3, [r7, #20]
    pGPIO_Handle->pGPIOx->OTYPER &= ~(0x1 << pGPIO_Handle->GPIO_PinConfig.GPIO_PinNumber) ;                         // Clear
 8000826:	687b      	ldr	r3, [r7, #4]
 8000828:	681b      	ldr	r3, [r3, #0]
 800082a:	685a      	ldr	r2, [r3, #4]
 800082c:	687b      	ldr	r3, [r7, #4]
 800082e:	791b      	ldrb	r3, [r3, #4]
 8000830:	4619      	mov	r1, r3
 8000832:	2301      	movs	r3, #1
 8000834:	408b      	lsls	r3, r1
 8000836:	43db      	mvns	r3, r3
 8000838:	4619      	mov	r1, r3
 800083a:	687b      	ldr	r3, [r7, #4]
 800083c:	681b      	ldr	r3, [r3, #0]
 800083e:	400a      	ands	r2, r1
 8000840:	605a      	str	r2, [r3, #4]
    pGPIO_Handle->pGPIOx->OTYPER |= temp ;                                                                          // Set
 8000842:	687b      	ldr	r3, [r7, #4]
 8000844:	681b      	ldr	r3, [r3, #0]
 8000846:	6859      	ldr	r1, [r3, #4]
 8000848:	687b      	ldr	r3, [r7, #4]
 800084a:	681b      	ldr	r3, [r3, #0]
 800084c:	697a      	ldr	r2, [r7, #20]
 800084e:	430a      	orrs	r2, r1
 8000850:	605a      	str	r2, [r3, #4]

    // 5. Configure the alt functionality
    if (pGPIO_Handle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_ALT_FUN) {
 8000852:	687b      	ldr	r3, [r7, #4]
 8000854:	795b      	ldrb	r3, [r3, #5]
 8000856:	2b02      	cmp	r3, #2
 8000858:	d134      	bne.n	80008c4 <GPIO_Init+0x380>
        // Configure the alt function registers
        uint32_t temp1 ;
        uint32_t temp2 ;

        temp1 = pGPIO_Handle->GPIO_PinConfig.GPIO_PinNumber / 8 ;
 800085a:	687b      	ldr	r3, [r7, #4]
 800085c:	791b      	ldrb	r3, [r3, #4]
 800085e:	08db      	lsrs	r3, r3, #3
 8000860:	b2db      	uxtb	r3, r3
 8000862:	60fb      	str	r3, [r7, #12]
        temp2 = pGPIO_Handle->GPIO_PinConfig.GPIO_PinNumber % 8 ;
 8000864:	687b      	ldr	r3, [r7, #4]
 8000866:	791b      	ldrb	r3, [r3, #4]
 8000868:	f003 0307 	and.w	r3, r3, #7
 800086c:	60bb      	str	r3, [r7, #8]

        pGPIO_Handle->pGPIOx->AFR[temp1] &= ~(0xF << (4 * temp2));                                               // Clear 4 bit fields
 800086e:	687b      	ldr	r3, [r7, #4]
 8000870:	681b      	ldr	r3, [r3, #0]
 8000872:	68fa      	ldr	r2, [r7, #12]
 8000874:	3208      	adds	r2, #8
 8000876:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800087a:	68bb      	ldr	r3, [r7, #8]
 800087c:	009b      	lsls	r3, r3, #2
 800087e:	210f      	movs	r1, #15
 8000880:	fa01 f303 	lsl.w	r3, r1, r3
 8000884:	43db      	mvns	r3, r3
 8000886:	4619      	mov	r1, r3
 8000888:	687b      	ldr	r3, [r7, #4]
 800088a:	681b      	ldr	r3, [r3, #0]
 800088c:	4011      	ands	r1, r2
 800088e:	68fa      	ldr	r2, [r7, #12]
 8000890:	3208      	adds	r2, #8
 8000892:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        pGPIO_Handle->pGPIOx->AFR[temp1] |= (pGPIO_Handle->GPIO_PinConfig.GPIO_PinAltFunMode << (4 * temp2));       // Set
 8000896:	687b      	ldr	r3, [r7, #4]
 8000898:	681b      	ldr	r3, [r3, #0]
 800089a:	68fa      	ldr	r2, [r7, #12]
 800089c:	3208      	adds	r2, #8
 800089e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80008a2:	687b      	ldr	r3, [r7, #4]
 80008a4:	7a5b      	ldrb	r3, [r3, #9]
 80008a6:	4619      	mov	r1, r3
 80008a8:	68bb      	ldr	r3, [r7, #8]
 80008aa:	009b      	lsls	r3, r3, #2
 80008ac:	fa01 f303 	lsl.w	r3, r1, r3
 80008b0:	4619      	mov	r1, r3
 80008b2:	687b      	ldr	r3, [r7, #4]
 80008b4:	681b      	ldr	r3, [r3, #0]
 80008b6:	4311      	orrs	r1, r2
 80008b8:	68fa      	ldr	r2, [r7, #12]
 80008ba:	3208      	adds	r2, #8
 80008bc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 80008c0:	e000      	b.n	80008c4 <GPIO_Init+0x380>
                return ;
 80008c2:	bf00      	nop
    }
}
 80008c4:	3718      	adds	r7, #24
 80008c6:	46bd      	mov	sp, r7
 80008c8:	bd80      	pop	{r7, pc}
 80008ca:	bf00      	nop
 80008cc:	40023800 	.word	0x40023800
 80008d0:	40013800 	.word	0x40013800
 80008d4:	40013c00 	.word	0x40013c00

080008d8 <GPIO_ReadFromInputPin>:
 * 
 * @note                        To read, the function right-shifts the IDR value over by pinNumber
 *                              amount of times to the lsb. We then mask with 0x1 and typecast
 *                              to get the value in the IDR
 */
uint8_t GPIO_ReadFromInputPin(GPIO_RegDef_t *pGPIOx, uint8_t pinNumber) {
 80008d8:	b480      	push	{r7}
 80008da:	b085      	sub	sp, #20
 80008dc:	af00      	add	r7, sp, #0
 80008de:	6078      	str	r0, [r7, #4]
 80008e0:	460b      	mov	r3, r1
 80008e2:	70fb      	strb	r3, [r7, #3]
    uint8_t value ;
    value = (uint8_t) ((pGPIOx->IDR >> pinNumber) & 0x00000001 ) ;
 80008e4:	687b      	ldr	r3, [r7, #4]
 80008e6:	691a      	ldr	r2, [r3, #16]
 80008e8:	78fb      	ldrb	r3, [r7, #3]
 80008ea:	fa22 f303 	lsr.w	r3, r2, r3
 80008ee:	b2db      	uxtb	r3, r3
 80008f0:	f003 0301 	and.w	r3, r3, #1
 80008f4:	73fb      	strb	r3, [r7, #15]
    return  value ;
 80008f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80008f8:	4618      	mov	r0, r3
 80008fa:	3714      	adds	r7, #20
 80008fc:	46bd      	mov	sp, r7
 80008fe:	bc80      	pop	{r7}
 8000900:	4770      	bx	lr
	...

08000904 <SPI_PeriClockControl>:
 * @return              none
 * 
 * @note                none
 * 
 */
void SPI_PeriClockControl(SPI_RegDef_t *pSPIx, uint8_t EnorDi) {
 8000904:	b480      	push	{r7}
 8000906:	b083      	sub	sp, #12
 8000908:	af00      	add	r7, sp, #0
 800090a:	6078      	str	r0, [r7, #4]
 800090c:	460b      	mov	r3, r1
 800090e:	70fb      	strb	r3, [r7, #3]
    // If enabling,
    if (EnorDi == ENABLE) {
 8000910:	78fb      	ldrb	r3, [r7, #3]
 8000912:	2b01      	cmp	r3, #1
 8000914:	d14c      	bne.n	80009b0 <SPI_PeriClockControl+0xac>
        // Select which SPI peripheral and enable
        switch ((unsigned long int) pSPIx) {
 8000916:	687b      	ldr	r3, [r7, #4]
 8000918:	4a4e      	ldr	r2, [pc, #312]	; (8000a54 <SPI_PeriClockControl+0x150>)
 800091a:	4293      	cmp	r3, r2
 800091c:	d041      	beq.n	80009a2 <SPI_PeriClockControl+0x9e>
 800091e:	4a4d      	ldr	r2, [pc, #308]	; (8000a54 <SPI_PeriClockControl+0x150>)
 8000920:	4293      	cmp	r3, r2
 8000922:	f200 808f 	bhi.w	8000a44 <SPI_PeriClockControl+0x140>
 8000926:	4a4c      	ldr	r2, [pc, #304]	; (8000a58 <SPI_PeriClockControl+0x154>)
 8000928:	4293      	cmp	r3, r2
 800092a:	d033      	beq.n	8000994 <SPI_PeriClockControl+0x90>
 800092c:	4a4a      	ldr	r2, [pc, #296]	; (8000a58 <SPI_PeriClockControl+0x154>)
 800092e:	4293      	cmp	r3, r2
 8000930:	f200 8088 	bhi.w	8000a44 <SPI_PeriClockControl+0x140>
 8000934:	4a49      	ldr	r2, [pc, #292]	; (8000a5c <SPI_PeriClockControl+0x158>)
 8000936:	4293      	cmp	r3, r2
 8000938:	d025      	beq.n	8000986 <SPI_PeriClockControl+0x82>
 800093a:	4a48      	ldr	r2, [pc, #288]	; (8000a5c <SPI_PeriClockControl+0x158>)
 800093c:	4293      	cmp	r3, r2
 800093e:	f200 8081 	bhi.w	8000a44 <SPI_PeriClockControl+0x140>
 8000942:	4a47      	ldr	r2, [pc, #284]	; (8000a60 <SPI_PeriClockControl+0x15c>)
 8000944:	4293      	cmp	r3, r2
 8000946:	d009      	beq.n	800095c <SPI_PeriClockControl+0x58>
 8000948:	4a45      	ldr	r2, [pc, #276]	; (8000a60 <SPI_PeriClockControl+0x15c>)
 800094a:	4293      	cmp	r3, r2
 800094c:	d87a      	bhi.n	8000a44 <SPI_PeriClockControl+0x140>
 800094e:	4a45      	ldr	r2, [pc, #276]	; (8000a64 <SPI_PeriClockControl+0x160>)
 8000950:	4293      	cmp	r3, r2
 8000952:	d00a      	beq.n	800096a <SPI_PeriClockControl+0x66>
 8000954:	4a44      	ldr	r2, [pc, #272]	; (8000a68 <SPI_PeriClockControl+0x164>)
 8000956:	4293      	cmp	r3, r2
 8000958:	d00e      	beq.n	8000978 <SPI_PeriClockControl+0x74>
                case SPI2_BASE_ADDR:        SPI2_PCLK_EN() ;        break ;
                case SPI3_BASE_ADDR:        SPI3_PCLK_EN() ;        break ;
                case SPI4_BASE_ADDR:        SPI4_PCLK_EN() ;        break ;
                case SPI5_BASE_ADDR:        SPI5_PCLK_EN() ;        break ;
                case SPI6_BASE_ADDR:        SPI6_PCLK_EN() ;        break ;
                default:                    return ;                break ;         // TODO: return error or cause a user fault
 800095a:	e073      	b.n	8000a44 <SPI_PeriClockControl+0x140>
                case SPI1_BASE_ADDR:        SPI1_PCLK_EN() ;        break ;
 800095c:	4b43      	ldr	r3, [pc, #268]	; (8000a6c <SPI_PeriClockControl+0x168>)
 800095e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000960:	4a42      	ldr	r2, [pc, #264]	; (8000a6c <SPI_PeriClockControl+0x168>)
 8000962:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000966:	6453      	str	r3, [r2, #68]	; 0x44
 8000968:	e06f      	b.n	8000a4a <SPI_PeriClockControl+0x146>
                case SPI2_BASE_ADDR:        SPI2_PCLK_EN() ;        break ;
 800096a:	4b40      	ldr	r3, [pc, #256]	; (8000a6c <SPI_PeriClockControl+0x168>)
 800096c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800096e:	4a3f      	ldr	r2, [pc, #252]	; (8000a6c <SPI_PeriClockControl+0x168>)
 8000970:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000974:	6413      	str	r3, [r2, #64]	; 0x40
 8000976:	e068      	b.n	8000a4a <SPI_PeriClockControl+0x146>
                case SPI3_BASE_ADDR:        SPI3_PCLK_EN() ;        break ;
 8000978:	4b3c      	ldr	r3, [pc, #240]	; (8000a6c <SPI_PeriClockControl+0x168>)
 800097a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800097c:	4a3b      	ldr	r2, [pc, #236]	; (8000a6c <SPI_PeriClockControl+0x168>)
 800097e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000982:	6413      	str	r3, [r2, #64]	; 0x40
 8000984:	e061      	b.n	8000a4a <SPI_PeriClockControl+0x146>
                case SPI4_BASE_ADDR:        SPI4_PCLK_EN() ;        break ;
 8000986:	4b39      	ldr	r3, [pc, #228]	; (8000a6c <SPI_PeriClockControl+0x168>)
 8000988:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800098a:	4a38      	ldr	r2, [pc, #224]	; (8000a6c <SPI_PeriClockControl+0x168>)
 800098c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000990:	6453      	str	r3, [r2, #68]	; 0x44
 8000992:	e05a      	b.n	8000a4a <SPI_PeriClockControl+0x146>
                case SPI5_BASE_ADDR:        SPI5_PCLK_EN() ;        break ;
 8000994:	4b35      	ldr	r3, [pc, #212]	; (8000a6c <SPI_PeriClockControl+0x168>)
 8000996:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000998:	4a34      	ldr	r2, [pc, #208]	; (8000a6c <SPI_PeriClockControl+0x168>)
 800099a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800099e:	6453      	str	r3, [r2, #68]	; 0x44
 80009a0:	e053      	b.n	8000a4a <SPI_PeriClockControl+0x146>
                case SPI6_BASE_ADDR:        SPI6_PCLK_EN() ;        break ;
 80009a2:	4b32      	ldr	r3, [pc, #200]	; (8000a6c <SPI_PeriClockControl+0x168>)
 80009a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009a6:	4a31      	ldr	r2, [pc, #196]	; (8000a6c <SPI_PeriClockControl+0x168>)
 80009a8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80009ac:	6453      	str	r3, [r2, #68]	; 0x44
 80009ae:	e04c      	b.n	8000a4a <SPI_PeriClockControl+0x146>
        }
    }
    else {
        // Disable the corresponding SPI peripheral otherwise
        switch ((unsigned long int) pSPIx) {
 80009b0:	687b      	ldr	r3, [r7, #4]
 80009b2:	4a28      	ldr	r2, [pc, #160]	; (8000a54 <SPI_PeriClockControl+0x150>)
 80009b4:	4293      	cmp	r3, r2
 80009b6:	d03e      	beq.n	8000a36 <SPI_PeriClockControl+0x132>
 80009b8:	4a26      	ldr	r2, [pc, #152]	; (8000a54 <SPI_PeriClockControl+0x150>)
 80009ba:	4293      	cmp	r3, r2
 80009bc:	d844      	bhi.n	8000a48 <SPI_PeriClockControl+0x144>
 80009be:	4a26      	ldr	r2, [pc, #152]	; (8000a58 <SPI_PeriClockControl+0x154>)
 80009c0:	4293      	cmp	r3, r2
 80009c2:	d031      	beq.n	8000a28 <SPI_PeriClockControl+0x124>
 80009c4:	4a24      	ldr	r2, [pc, #144]	; (8000a58 <SPI_PeriClockControl+0x154>)
 80009c6:	4293      	cmp	r3, r2
 80009c8:	d83e      	bhi.n	8000a48 <SPI_PeriClockControl+0x144>
 80009ca:	4a24      	ldr	r2, [pc, #144]	; (8000a5c <SPI_PeriClockControl+0x158>)
 80009cc:	4293      	cmp	r3, r2
 80009ce:	d024      	beq.n	8000a1a <SPI_PeriClockControl+0x116>
 80009d0:	4a22      	ldr	r2, [pc, #136]	; (8000a5c <SPI_PeriClockControl+0x158>)
 80009d2:	4293      	cmp	r3, r2
 80009d4:	d838      	bhi.n	8000a48 <SPI_PeriClockControl+0x144>
 80009d6:	4a22      	ldr	r2, [pc, #136]	; (8000a60 <SPI_PeriClockControl+0x15c>)
 80009d8:	4293      	cmp	r3, r2
 80009da:	d009      	beq.n	80009f0 <SPI_PeriClockControl+0xec>
 80009dc:	4a20      	ldr	r2, [pc, #128]	; (8000a60 <SPI_PeriClockControl+0x15c>)
 80009de:	4293      	cmp	r3, r2
 80009e0:	d832      	bhi.n	8000a48 <SPI_PeriClockControl+0x144>
 80009e2:	4a20      	ldr	r2, [pc, #128]	; (8000a64 <SPI_PeriClockControl+0x160>)
 80009e4:	4293      	cmp	r3, r2
 80009e6:	d00a      	beq.n	80009fe <SPI_PeriClockControl+0xfa>
 80009e8:	4a1f      	ldr	r2, [pc, #124]	; (8000a68 <SPI_PeriClockControl+0x164>)
 80009ea:	4293      	cmp	r3, r2
 80009ec:	d00e      	beq.n	8000a0c <SPI_PeriClockControl+0x108>
                case SPI2_BASE_ADDR:        SPI2_PCLK_DI() ;        break ;
                case SPI3_BASE_ADDR:        SPI3_PCLK_DI() ;        break ;
                case SPI4_BASE_ADDR:        SPI4_PCLK_DI() ;        break ;
                case SPI5_BASE_ADDR:        SPI5_PCLK_DI() ;        break ;
                case SPI6_BASE_ADDR:        SPI6_PCLK_DI() ;        break ;
                default:                    return ;                break ;         // TODO: return error or cause a user fault
 80009ee:	e02b      	b.n	8000a48 <SPI_PeriClockControl+0x144>
                case SPI1_BASE_ADDR:        SPI1_PCLK_DI() ;        break ;
 80009f0:	4b1e      	ldr	r3, [pc, #120]	; (8000a6c <SPI_PeriClockControl+0x168>)
 80009f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009f4:	4a1d      	ldr	r2, [pc, #116]	; (8000a6c <SPI_PeriClockControl+0x168>)
 80009f6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80009fa:	6453      	str	r3, [r2, #68]	; 0x44
 80009fc:	e025      	b.n	8000a4a <SPI_PeriClockControl+0x146>
                case SPI2_BASE_ADDR:        SPI2_PCLK_DI() ;        break ;
 80009fe:	4b1b      	ldr	r3, [pc, #108]	; (8000a6c <SPI_PeriClockControl+0x168>)
 8000a00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a02:	4a1a      	ldr	r2, [pc, #104]	; (8000a6c <SPI_PeriClockControl+0x168>)
 8000a04:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8000a08:	6413      	str	r3, [r2, #64]	; 0x40
 8000a0a:	e01e      	b.n	8000a4a <SPI_PeriClockControl+0x146>
                case SPI3_BASE_ADDR:        SPI3_PCLK_DI() ;        break ;
 8000a0c:	4b17      	ldr	r3, [pc, #92]	; (8000a6c <SPI_PeriClockControl+0x168>)
 8000a0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a10:	4a16      	ldr	r2, [pc, #88]	; (8000a6c <SPI_PeriClockControl+0x168>)
 8000a12:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8000a16:	6413      	str	r3, [r2, #64]	; 0x40
 8000a18:	e017      	b.n	8000a4a <SPI_PeriClockControl+0x146>
                case SPI4_BASE_ADDR:        SPI4_PCLK_DI() ;        break ;
 8000a1a:	4b14      	ldr	r3, [pc, #80]	; (8000a6c <SPI_PeriClockControl+0x168>)
 8000a1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a1e:	4a13      	ldr	r2, [pc, #76]	; (8000a6c <SPI_PeriClockControl+0x168>)
 8000a20:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8000a24:	6453      	str	r3, [r2, #68]	; 0x44
 8000a26:	e010      	b.n	8000a4a <SPI_PeriClockControl+0x146>
                case SPI5_BASE_ADDR:        SPI5_PCLK_DI() ;        break ;
 8000a28:	4b10      	ldr	r3, [pc, #64]	; (8000a6c <SPI_PeriClockControl+0x168>)
 8000a2a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a2c:	4a0f      	ldr	r2, [pc, #60]	; (8000a6c <SPI_PeriClockControl+0x168>)
 8000a2e:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8000a32:	6453      	str	r3, [r2, #68]	; 0x44
 8000a34:	e009      	b.n	8000a4a <SPI_PeriClockControl+0x146>
                case SPI6_BASE_ADDR:        SPI6_PCLK_DI() ;        break ;
 8000a36:	4b0d      	ldr	r3, [pc, #52]	; (8000a6c <SPI_PeriClockControl+0x168>)
 8000a38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a3a:	4a0c      	ldr	r2, [pc, #48]	; (8000a6c <SPI_PeriClockControl+0x168>)
 8000a3c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8000a40:	6453      	str	r3, [r2, #68]	; 0x44
 8000a42:	e002      	b.n	8000a4a <SPI_PeriClockControl+0x146>
                default:                    return ;                break ;         // TODO: return error or cause a user fault
 8000a44:	bf00      	nop
 8000a46:	e000      	b.n	8000a4a <SPI_PeriClockControl+0x146>
                default:                    return ;                break ;         // TODO: return error or cause a user fault
 8000a48:	bf00      	nop
        }
    }

}
 8000a4a:	370c      	adds	r7, #12
 8000a4c:	46bd      	mov	sp, r7
 8000a4e:	bc80      	pop	{r7}
 8000a50:	4770      	bx	lr
 8000a52:	bf00      	nop
 8000a54:	40015400 	.word	0x40015400
 8000a58:	40015000 	.word	0x40015000
 8000a5c:	40013400 	.word	0x40013400
 8000a60:	40013000 	.word	0x40013000
 8000a64:	40003800 	.word	0x40003800
 8000a68:	40003c00 	.word	0x40003c00
 8000a6c:	40023800 	.word	0x40023800

08000a70 <SPI_Init>:
 * @return                  none
 * 
 * @note                    none
 * 
 */
void SPI_Init(SPI_Handle_t *pSPIHandle) {
 8000a70:	b580      	push	{r7, lr}
 8000a72:	b084      	sub	sp, #16
 8000a74:	af00      	add	r7, sp, #0
 8000a76:	6078      	str	r0, [r7, #4]
    // Enable the SPIx peripheral
    SPI_PeriClockControl(pSPIHandle->pSPIx, ENABLE) ;
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	681b      	ldr	r3, [r3, #0]
 8000a7c:	2101      	movs	r1, #1
 8000a7e:	4618      	mov	r0, r3
 8000a80:	f7ff ff40 	bl	8000904 <SPI_PeriClockControl>

    // Configure the SPI_CR1 register
    uint32_t tempReg = 0 ;
 8000a84:	2300      	movs	r3, #0
 8000a86:	60fb      	str	r3, [r7, #12]

    // 1. Configure the device mode
    tempReg |=  pSPIHandle->SPIConfig.SPI_DeviceMode << SPI_CR1_MSTR ;
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	791b      	ldrb	r3, [r3, #4]
 8000a8c:	009b      	lsls	r3, r3, #2
 8000a8e:	461a      	mov	r2, r3
 8000a90:	68fb      	ldr	r3, [r7, #12]
 8000a92:	4313      	orrs	r3, r2
 8000a94:	60fb      	str	r3, [r7, #12]

    // 2. Configure the bus mode
    switch (pSPIHandle->SPIConfig.SPI_BusConfig) {
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	795b      	ldrb	r3, [r3, #5]
 8000a9a:	2b04      	cmp	r3, #4
 8000a9c:	d010      	beq.n	8000ac0 <SPI_Init+0x50>
 8000a9e:	2b04      	cmp	r3, #4
 8000aa0:	dc17      	bgt.n	8000ad2 <SPI_Init+0x62>
 8000aa2:	2b01      	cmp	r3, #1
 8000aa4:	d002      	beq.n	8000aac <SPI_Init+0x3c>
 8000aa6:	2b02      	cmp	r3, #2
 8000aa8:	d005      	beq.n	8000ab6 <SPI_Init+0x46>
 8000aaa:	e012      	b.n	8000ad2 <SPI_Init+0x62>
        case SPI_BUS_CONFIG_FD:
            // BIDI mode should be cleared
            tempReg &= ~(1 << SPI_CR1_BIDIMODE) ;
 8000aac:	68fb      	ldr	r3, [r7, #12]
 8000aae:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8000ab2:	60fb      	str	r3, [r7, #12]
            break ;
 8000ab4:	e012      	b.n	8000adc <SPI_Init+0x6c>
        case SPI_BUS_CONFIG_HD:
            // BIDI mode should be set
            tempReg |= (1 << SPI_CR1_BIDIMODE) ;
 8000ab6:	68fb      	ldr	r3, [r7, #12]
 8000ab8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000abc:	60fb      	str	r3, [r7, #12]
            break ;
 8000abe:	e00d      	b.n	8000adc <SPI_Init+0x6c>
        case SPI_BUS_CONFIG_SIMPLEX_RXONLY:
            // BIDI mode should be cleared and RXONLY bit must be set
            tempReg &= ~(1 << SPI_CR1_BIDIMODE) ;
 8000ac0:	68fb      	ldr	r3, [r7, #12]
 8000ac2:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8000ac6:	60fb      	str	r3, [r7, #12]
            tempReg |= (1 << SPI_CR1_RXONLY) ;
 8000ac8:	68fb      	ldr	r3, [r7, #12]
 8000aca:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000ace:	60fb      	str	r3, [r7, #12]
            break ;
 8000ad0:	e004      	b.n	8000adc <SPI_Init+0x6c>
        default:
            // Set as Full Duplex by default otherwise
            tempReg &= ~(1 << SPI_CR1_BIDIMODE) ;
 8000ad2:	68fb      	ldr	r3, [r7, #12]
 8000ad4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8000ad8:	60fb      	str	r3, [r7, #12]
            break ;
 8000ada:	bf00      	nop
    }

    // 3. configure the SPI serial clock speed (baud rate)
    tempReg |= pSPIHandle->SPIConfig.SPI_SclkSpeed << SPI_CR1_BR ;
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	799b      	ldrb	r3, [r3, #6]
 8000ae0:	00db      	lsls	r3, r3, #3
 8000ae2:	461a      	mov	r2, r3
 8000ae4:	68fb      	ldr	r3, [r7, #12]
 8000ae6:	4313      	orrs	r3, r2
 8000ae8:	60fb      	str	r3, [r7, #12]

    // 4. Configure the DFF
    tempReg |= pSPIHandle->SPIConfig.SPI_DFF << SPI_CR1_DFF ;
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	79db      	ldrb	r3, [r3, #7]
 8000aee:	02db      	lsls	r3, r3, #11
 8000af0:	461a      	mov	r2, r3
 8000af2:	68fb      	ldr	r3, [r7, #12]
 8000af4:	4313      	orrs	r3, r2
 8000af6:	60fb      	str	r3, [r7, #12]

    // 5. Configure the CPOL
    tempReg |= pSPIHandle->SPIConfig.SPI_CPOL << SPI_CR1_CPOL ;
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	7a1b      	ldrb	r3, [r3, #8]
 8000afc:	005b      	lsls	r3, r3, #1
 8000afe:	461a      	mov	r2, r3
 8000b00:	68fb      	ldr	r3, [r7, #12]
 8000b02:	4313      	orrs	r3, r2
 8000b04:	60fb      	str	r3, [r7, #12]

    //6. Configure the CPHA
    tempReg |= pSPIHandle->SPIConfig.SPI_CPHA << SPI_CR1_CPHA ;
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	7a5b      	ldrb	r3, [r3, #9]
 8000b0a:	461a      	mov	r2, r3
 8000b0c:	68fb      	ldr	r3, [r7, #12]
 8000b0e:	4313      	orrs	r3, r2
 8000b10:	60fb      	str	r3, [r7, #12]

    // 7. Configure the SSM
    tempReg |= pSPIHandle->SPIConfig.SPI_SSM << SPI_CR1_SSM ;
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	7a9b      	ldrb	r3, [r3, #10]
 8000b16:	025b      	lsls	r3, r3, #9
 8000b18:	461a      	mov	r2, r3
 8000b1a:	68fb      	ldr	r3, [r7, #12]
 8000b1c:	4313      	orrs	r3, r2
 8000b1e:	60fb      	str	r3, [r7, #12]

    pSPIHandle->pSPIx->CR1 = tempReg ;
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	681b      	ldr	r3, [r3, #0]
 8000b24:	68fa      	ldr	r2, [r7, #12]
 8000b26:	601a      	str	r2, [r3, #0]
}
 8000b28:	bf00      	nop
 8000b2a:	3710      	adds	r7, #16
 8000b2c:	46bd      	mov	sp, r7
 8000b2e:	bd80      	pop	{r7, pc}

08000b30 <SPI_SendData>:
 * @return                  none
 * 
 * @note                    the 16-bit DFF has its length decremented twice  since it sends 2 bytes
 * 
 */
void SPI_SendData(SPI_RegDef_t *pSPIx, uint8_t *pTxBuffer, uint32_t len) {
 8000b30:	b580      	push	{r7, lr}
 8000b32:	b084      	sub	sp, #16
 8000b34:	af00      	add	r7, sp, #0
 8000b36:	60f8      	str	r0, [r7, #12]
 8000b38:	60b9      	str	r1, [r7, #8]
 8000b3a:	607a      	str	r2, [r7, #4]
    while (len > 0) {
 8000b3c:	e027      	b.n	8000b8e <SPI_SendData+0x5e>
        // 1. Wait for TXE bit to be set -> This will indicate the Tx buffer is empty
        while (SPI_GetFlagStatus(pSPIx, SPI_TXE_FLAG) == FLAG_RESET) ;
 8000b3e:	bf00      	nop
 8000b40:	2102      	movs	r1, #2
 8000b42:	68f8      	ldr	r0, [r7, #12]
 8000b44:	f000 f898 	bl	8000c78 <SPI_GetFlagStatus>
 8000b48:	4603      	mov	r3, r0
 8000b4a:	2b00      	cmp	r3, #0
 8000b4c:	d0f8      	beq.n	8000b40 <SPI_SendData+0x10>

        // Check if the DFF bit is set for 8 or 16-bits
        if (pSPIx->CR1 & (1 << SPI_CR1_DFF)) {
 8000b4e:	68fb      	ldr	r3, [r7, #12]
 8000b50:	681b      	ldr	r3, [r3, #0]
 8000b52:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000b56:	2b00      	cmp	r3, #0
 8000b58:	d00e      	beq.n	8000b78 <SPI_SendData+0x48>
            // 16-bit DFF
        	// 1. Load the data into the DR
            pSPIx->DR = *((uint16_t*) pTxBuffer) ;
 8000b5a:	68bb      	ldr	r3, [r7, #8]
 8000b5c:	881b      	ldrh	r3, [r3, #0]
 8000b5e:	461a      	mov	r2, r3
 8000b60:	68fb      	ldr	r3, [r7, #12]
 8000b62:	60da      	str	r2, [r3, #12]
            len-- ;
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	3b01      	subs	r3, #1
 8000b68:	607b      	str	r3, [r7, #4]
            len-- ;
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	3b01      	subs	r3, #1
 8000b6e:	607b      	str	r3, [r7, #4]
            (uint16_t*) pTxBuffer++ ;
 8000b70:	68bb      	ldr	r3, [r7, #8]
 8000b72:	3301      	adds	r3, #1
 8000b74:	60bb      	str	r3, [r7, #8]
 8000b76:	e00a      	b.n	8000b8e <SPI_SendData+0x5e>
        }
        else {
            // 8-bit DFF
            pSPIx->DR = *pTxBuffer ;
 8000b78:	68bb      	ldr	r3, [r7, #8]
 8000b7a:	781b      	ldrb	r3, [r3, #0]
 8000b7c:	461a      	mov	r2, r3
 8000b7e:	68fb      	ldr	r3, [r7, #12]
 8000b80:	60da      	str	r2, [r3, #12]
            len-- ;
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	3b01      	subs	r3, #1
 8000b86:	607b      	str	r3, [r7, #4]
            pTxBuffer++ ;
 8000b88:	68bb      	ldr	r3, [r7, #8]
 8000b8a:	3301      	adds	r3, #1
 8000b8c:	60bb      	str	r3, [r7, #8]
    while (len > 0) {
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	2b00      	cmp	r3, #0
 8000b92:	d1d4      	bne.n	8000b3e <SPI_SendData+0xe>
        }
    }
}
 8000b94:	bf00      	nop
 8000b96:	bf00      	nop
 8000b98:	3710      	adds	r7, #16
 8000b9a:	46bd      	mov	sp, r7
 8000b9c:	bd80      	pop	{r7, pc}

08000b9e <SPI_ReceiveData>:
 * @return                  none
 * 
 * @note                    none
 * 
 */
void SPI_ReceiveData(SPI_RegDef_t *pSPIx, uint8_t *pRxBuffer, uint32_t len) {
 8000b9e:	b580      	push	{r7, lr}
 8000ba0:	b084      	sub	sp, #16
 8000ba2:	af00      	add	r7, sp, #0
 8000ba4:	60f8      	str	r0, [r7, #12]
 8000ba6:	60b9      	str	r1, [r7, #8]
 8000ba8:	607a      	str	r2, [r7, #4]
    while (len > 0) {
 8000baa:	e027      	b.n	8000bfc <SPI_ReceiveData+0x5e>
        // 1. Wait for RXNE bit to be set
        while (SPI_GetFlagStatus(pSPIx, SPI_RXNE_FLAG) == (uint8_t)FLAG_RESET) ;
 8000bac:	bf00      	nop
 8000bae:	2101      	movs	r1, #1
 8000bb0:	68f8      	ldr	r0, [r7, #12]
 8000bb2:	f000 f861 	bl	8000c78 <SPI_GetFlagStatus>
 8000bb6:	4603      	mov	r3, r0
 8000bb8:	2b00      	cmp	r3, #0
 8000bba:	d0f8      	beq.n	8000bae <SPI_ReceiveData+0x10>

        // Check if the DFF bit is set for 8 or 16-bits
        if (pSPIx->CR1 & (1 << SPI_CR1_DFF)) {
 8000bbc:	68fb      	ldr	r3, [r7, #12]
 8000bbe:	681b      	ldr	r3, [r3, #0]
 8000bc0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000bc4:	2b00      	cmp	r3, #0
 8000bc6:	d00e      	beq.n	8000be6 <SPI_ReceiveData+0x48>
            // 16-bit DFF
        	// 1. Load the data from DR to RxBuffer address
            *((uint16_t*)pRxBuffer) = pSPIx->DR ;
 8000bc8:	68fb      	ldr	r3, [r7, #12]
 8000bca:	68db      	ldr	r3, [r3, #12]
 8000bcc:	b29a      	uxth	r2, r3
 8000bce:	68bb      	ldr	r3, [r7, #8]
 8000bd0:	801a      	strh	r2, [r3, #0]
            len-- ;
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	3b01      	subs	r3, #1
 8000bd6:	607b      	str	r3, [r7, #4]
            len-- ;
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	3b01      	subs	r3, #1
 8000bdc:	607b      	str	r3, [r7, #4]
            (uint16_t*)pRxBuffer++ ;
 8000bde:	68bb      	ldr	r3, [r7, #8]
 8000be0:	3301      	adds	r3, #1
 8000be2:	60bb      	str	r3, [r7, #8]
 8000be4:	e00a      	b.n	8000bfc <SPI_ReceiveData+0x5e>
        }
        else {
            // 8-bit DFF
        	// 1. Load the data from DR to RxBuffer address
            *(pRxBuffer) = pSPIx->DR ;
 8000be6:	68fb      	ldr	r3, [r7, #12]
 8000be8:	68db      	ldr	r3, [r3, #12]
 8000bea:	b2da      	uxtb	r2, r3
 8000bec:	68bb      	ldr	r3, [r7, #8]
 8000bee:	701a      	strb	r2, [r3, #0]
            len-- ;
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	3b01      	subs	r3, #1
 8000bf4:	607b      	str	r3, [r7, #4]
            pRxBuffer++ ;
 8000bf6:	68bb      	ldr	r3, [r7, #8]
 8000bf8:	3301      	adds	r3, #1
 8000bfa:	60bb      	str	r3, [r7, #8]
    while (len > 0) {
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	2b00      	cmp	r3, #0
 8000c00:	d1d4      	bne.n	8000bac <SPI_ReceiveData+0xe>
        }
    }

}
 8000c02:	bf00      	nop
 8000c04:	bf00      	nop
 8000c06:	3710      	adds	r7, #16
 8000c08:	46bd      	mov	sp, r7
 8000c0a:	bd80      	pop	{r7, pc}

08000c0c <SPI_PeripheralControl>:
 * @return                  none
 * 
 * @note                    none
 * 
 */
void SPI_PeripheralControl(SPI_RegDef_t *pSPIx, uint8_t EnorDi) {
 8000c0c:	b480      	push	{r7}
 8000c0e:	b083      	sub	sp, #12
 8000c10:	af00      	add	r7, sp, #0
 8000c12:	6078      	str	r0, [r7, #4]
 8000c14:	460b      	mov	r3, r1
 8000c16:	70fb      	strb	r3, [r7, #3]
    if (EnorDi) {
 8000c18:	78fb      	ldrb	r3, [r7, #3]
 8000c1a:	2b00      	cmp	r3, #0
 8000c1c:	d006      	beq.n	8000c2c <SPI_PeripheralControl+0x20>
        pSPIx->CR1 |= (1 << SPI_CR1_SPE) ;
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	681b      	ldr	r3, [r3, #0]
 8000c22:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	601a      	str	r2, [r3, #0]
    }
    else {
        pSPIx->CR1 &= ~(1 << SPI_CR1_SPE) ;
    }
}
 8000c2a:	e005      	b.n	8000c38 <SPI_PeripheralControl+0x2c>
        pSPIx->CR1 &= ~(1 << SPI_CR1_SPE) ;
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	681b      	ldr	r3, [r3, #0]
 8000c30:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	601a      	str	r2, [r3, #0]
}
 8000c38:	bf00      	nop
 8000c3a:	370c      	adds	r7, #12
 8000c3c:	46bd      	mov	sp, r7
 8000c3e:	bc80      	pop	{r7}
 8000c40:	4770      	bx	lr

08000c42 <SPI_SSOEConfig>:
 * @return                  none
 * 
 * @note                    none
 * 
 */
void SPI_SSOEConfig(SPI_RegDef_t *pSPIx, uint8_t EnorDi) {
 8000c42:	b480      	push	{r7}
 8000c44:	b083      	sub	sp, #12
 8000c46:	af00      	add	r7, sp, #0
 8000c48:	6078      	str	r0, [r7, #4]
 8000c4a:	460b      	mov	r3, r1
 8000c4c:	70fb      	strb	r3, [r7, #3]
    if (EnorDi == ENABLE) {
 8000c4e:	78fb      	ldrb	r3, [r7, #3]
 8000c50:	2b01      	cmp	r3, #1
 8000c52:	d106      	bne.n	8000c62 <SPI_SSOEConfig+0x20>
        pSPIx->CR2 |= (1 << SPI_CR2_SSOE) ;
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	685b      	ldr	r3, [r3, #4]
 8000c58:	f043 0204 	orr.w	r2, r3, #4
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	605a      	str	r2, [r3, #4]
    }
    else {
        pSPIx->CR2 &= ~(1 << SPI_CR2_SSOE) ;
    }
}
 8000c60:	e005      	b.n	8000c6e <SPI_SSOEConfig+0x2c>
        pSPIx->CR2 &= ~(1 << SPI_CR2_SSOE) ;
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	685b      	ldr	r3, [r3, #4]
 8000c66:	f023 0204 	bic.w	r2, r3, #4
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	605a      	str	r2, [r3, #4]
}
 8000c6e:	bf00      	nop
 8000c70:	370c      	adds	r7, #12
 8000c72:	46bd      	mov	sp, r7
 8000c74:	bc80      	pop	{r7}
 8000c76:	4770      	bx	lr

08000c78 <SPI_GetFlagStatus>:
 * 
 * @return uint8_t          0 or 1
 * 
 * @note                    none
 */
uint8_t SPI_GetFlagStatus(SPI_RegDef_t *pSPIx, uint32_t FlagName) {
 8000c78:	b480      	push	{r7}
 8000c7a:	b083      	sub	sp, #12
 8000c7c:	af00      	add	r7, sp, #0
 8000c7e:	6078      	str	r0, [r7, #4]
 8000c80:	6039      	str	r1, [r7, #0]
    if (pSPIx->SR & FlagName) {
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	689a      	ldr	r2, [r3, #8]
 8000c86:	683b      	ldr	r3, [r7, #0]
 8000c88:	4013      	ands	r3, r2
 8000c8a:	2b00      	cmp	r3, #0
 8000c8c:	d001      	beq.n	8000c92 <SPI_GetFlagStatus+0x1a>
        return FLAG_SET ;
 8000c8e:	2301      	movs	r3, #1
 8000c90:	e000      	b.n	8000c94 <SPI_GetFlagStatus+0x1c>
    }
    return FLAG_RESET ;
 8000c92:	2300      	movs	r3, #0
}
 8000c94:	4618      	mov	r0, r3
 8000c96:	370c      	adds	r7, #12
 8000c98:	46bd      	mov	sp, r7
 8000c9a:	bc80      	pop	{r7}
 8000c9c:	4770      	bx	lr
	...

08000ca0 <main>:
static void send_CMD_LED_CTRL(uint8_t dummyRead, uint8_t dummyWrite, uint8_t *const commandCode, uint8_t *ackByte, uint8_t *args) ;
static void send_CMD_SENSOR_READ(uint8_t dummyRead, uint8_t dummyWrite, uint8_t *const commandCode, uint8_t *ackByte, uint8_t *args) ;
static void send_CMD_LED_READ(uint8_t dummyRead, uint8_t dummyWrite, uint8_t *const commandCode, uint8_t *ackByte, uint8_t *args) ;
static void send_CMD_PRINT(uint8_t dummyRead, uint8_t dummyWrite, uint8_t *const commandCode, uint8_t *ackByte, uint8_t *args) ;

int main(void) {
 8000ca0:	b590      	push	{r4, r7, lr}
 8000ca2:	b085      	sub	sp, #20
 8000ca4:	af02      	add	r7, sp, #8
	initialise_monitor_handles();
 8000ca6:	f001 fd19 	bl	80026dc <initialise_monitor_handles>
	printf("Application is running\n") ;
 8000caa:	4826      	ldr	r0, [pc, #152]	; (8000d44 <main+0xa4>)
 8000cac:	f000 fb5c 	bl	8001368 <puts>
	 * PC3  --> SPI2_MOSI
	 * PB10 --> SPI2_SCLK
	 * PB9  --> SPI2_NSS
	 * ALT function mode: 5
	 */
	uint8_t dummyWrite = 0xFF ;
 8000cb0:	23ff      	movs	r3, #255	; 0xff
 8000cb2:	71fb      	strb	r3, [r7, #7]
	uint8_t dummyRead  = 0xFF ;
 8000cb4:	23ff      	movs	r3, #255	; 0xff
 8000cb6:	71bb      	strb	r3, [r7, #6]

    // Configure GPIO button
    GPIO_ButtonInit() ;
 8000cb8:	f000 f8a6 	bl	8000e08 <GPIO_ButtonInit>

    // Configure GPIO to behave as SPI2 pins
    SPI2_GPIOInits() ;
 8000cbc:	f000 f848 	bl	8000d50 <SPI2_GPIOInits>

    // Initialize SPI2 peripheral parameters
    SPI2_Inits() ;
 8000cc0:	f000 f87e 	bl	8000dc0 <SPI2_Inits>
	printf("SPI initialization done\n") ;
 8000cc4:	4820      	ldr	r0, [pc, #128]	; (8000d48 <main+0xa8>)
 8000cc6:	f000 fb4f 	bl	8001368 <puts>
     * Setting SSOE does NSS output enable.
     * The NSS pin is automatically managed by the hardware.
     * I.e., when SPE = 1, NSS will be pulled LOW,
     * and NSS pin will be HIGH when SPE = 0.
     */
    SPI_SSOEConfig(SPI2, ENABLE) ;
 8000cca:	2101      	movs	r1, #1
 8000ccc:	481f      	ldr	r0, [pc, #124]	; (8000d4c <main+0xac>)
 8000cce:	f7ff ffb8 	bl	8000c42 <SPI_SSOEConfig>

    while (1) {
    	wait_for_button_press() ;
 8000cd2:	f000 f8cd 	bl	8000e70 <wait_for_button_press>
        // Enable the SPI2 peripheral
        SPI_PeripheralControl(SPI2, ENABLE) ;
 8000cd6:	2101      	movs	r1, #1
 8000cd8:	481c      	ldr	r0, [pc, #112]	; (8000d4c <main+0xac>)
 8000cda:	f7ff ff97 	bl	8000c0c <SPI_PeripheralControl>

        uint8_t commandCode = COMMAND_LED_CTRL ;
 8000cde:	2350      	movs	r3, #80	; 0x50
 8000ce0:	717b      	strb	r3, [r7, #5]

        /**************************************************************/
        /*            1. CMD_LED_CTRL <pin_no_1>  	<value_1>         */
        /**************************************************************/

        send_CMD_LED_CTRL(dummyRead, dummyWrite, &commandCode, &ackByte, args) ;
 8000ce2:	1d3c      	adds	r4, r7, #4
 8000ce4:	1d7a      	adds	r2, r7, #5
 8000ce6:	79f9      	ldrb	r1, [r7, #7]
 8000ce8:	79b8      	ldrb	r0, [r7, #6]
 8000cea:	463b      	mov	r3, r7
 8000cec:	9300      	str	r3, [sp, #0]
 8000cee:	4623      	mov	r3, r4
 8000cf0:	f000 f910 	bl	8000f14 <send_CMD_LED_CTRL>

        /**************************************************************/
        /*           2. CMD_SENSOR_READ <analog_pin_no_1>			  */
        /**************************************************************/

        wait_for_button_press() ;
 8000cf4:	f000 f8bc 	bl	8000e70 <wait_for_button_press>
        commandCode = COMMAND_SENSOR_READ ;
 8000cf8:	2351      	movs	r3, #81	; 0x51
 8000cfa:	717b      	strb	r3, [r7, #5]
        send_CMD_SENSOR_READ(dummyRead, dummyWrite, &commandCode, &ackByte, args) ;
 8000cfc:	1d3c      	adds	r4, r7, #4
 8000cfe:	1d7a      	adds	r2, r7, #5
 8000d00:	79f9      	ldrb	r1, [r7, #7]
 8000d02:	79b8      	ldrb	r0, [r7, #6]
 8000d04:	463b      	mov	r3, r7
 8000d06:	9300      	str	r3, [sp, #0]
 8000d08:	4623      	mov	r3, r4
 8000d0a:	f000 f93d 	bl	8000f88 <send_CMD_SENSOR_READ>

        /**************************************************************/
        /*                   3. CMD_LED_READ <pin_no_1>               */
        /**************************************************************/
        wait_for_button_press() ;
 8000d0e:	f000 f8af 	bl	8000e70 <wait_for_button_press>
        commandCode = COMMAND_LED_READ ;
 8000d12:	2352      	movs	r3, #82	; 0x52
 8000d14:	717b      	strb	r3, [r7, #5]
        send_CMD_LED_READ(dummyRead, dummyWrite, &commandCode, &ackByte, args) ;
 8000d16:	1d3c      	adds	r4, r7, #4
 8000d18:	1d7a      	adds	r2, r7, #5
 8000d1a:	79f9      	ldrb	r1, [r7, #7]
 8000d1c:	79b8      	ldrb	r0, [r7, #6]
 8000d1e:	463b      	mov	r3, r7
 8000d20:	9300      	str	r3, [sp, #0]
 8000d22:	4623      	mov	r3, r4
 8000d24:	f000 f980 	bl	8001028 <send_CMD_LED_READ>

        /**************************************************************/
        /*              4. CMD_PRINT <len(2)> <message(len)>          */
        /**************************************************************/

        wait_for_button_press() ;
 8000d28:	f000 f8a2 	bl	8000e70 <wait_for_button_press>
        commandCode = COMMAND_PRINT ;
 8000d2c:	2353      	movs	r3, #83	; 0x53
 8000d2e:	717b      	strb	r3, [r7, #5]
        send_CMD_PRINT(dummyRead, dummyWrite, &commandCode, &ackByte, args) ;
 8000d30:	1d3c      	adds	r4, r7, #4
 8000d32:	1d7a      	adds	r2, r7, #5
 8000d34:	79f9      	ldrb	r1, [r7, #7]
 8000d36:	79b8      	ldrb	r0, [r7, #6]
 8000d38:	463b      	mov	r3, r7
 8000d3a:	9300      	str	r3, [sp, #0]
 8000d3c:	4623      	mov	r3, r4
 8000d3e:	f000 f9cb 	bl	80010d8 <send_CMD_PRINT>
    while (1) {
 8000d42:	e7c6      	b.n	8000cd2 <main+0x32>
 8000d44:	080027f8 	.word	0x080027f8
 8000d48:	08002810 	.word	0x08002810
 8000d4c:	40003800 	.word	0x40003800

08000d50 <SPI2_GPIOInits>:
 *
 * @pre 				GPIO off
 * @post				Turn on GPIO B9, B10, C3, C2
 * @note 				B9 = CSZ/NPS | B10 = SCK | C3 = COPI | C2 = CIPO
 */
void SPI2_GPIOInits(void) {
 8000d50:	b580      	push	{r7, lr}
 8000d52:	b084      	sub	sp, #16
 8000d54:	af00      	add	r7, sp, #0
    /*
     * Configure the SPI pins
     */

    GPIO_Handle_t SPIPins ;
    memset(&SPIPins, 0, sizeof(SPIPins)) ;
 8000d56:	1d3b      	adds	r3, r7, #4
 8000d58:	220c      	movs	r2, #12
 8000d5a:	2100      	movs	r1, #0
 8000d5c:	4618      	mov	r0, r3
 8000d5e:	f000 fa75 	bl	800124c <memset>

    SPIPins.pGPIOx = GPIOB ;
 8000d62:	4b15      	ldr	r3, [pc, #84]	; (8000db8 <SPI2_GPIOInits+0x68>)
 8000d64:	607b      	str	r3, [r7, #4]
    SPIPins.GPIO_PinConfig.GPIO_PinMode         = GPIO_MODE_ALT_FUN ;
 8000d66:	2302      	movs	r3, #2
 8000d68:	727b      	strb	r3, [r7, #9]
    SPIPins.GPIO_PinConfig.GPIO_PinSpeed        = GPIO_SPEED_FAST ;
 8000d6a:	2302      	movs	r3, #2
 8000d6c:	72bb      	strb	r3, [r7, #10]
    SPIPins.GPIO_PinConfig.GPIO_PinPuPdCtrl     = GPIO_NO_PUPD ;
 8000d6e:	2300      	movs	r3, #0
 8000d70:	72fb      	strb	r3, [r7, #11]
    SPIPins.GPIO_PinConfig.GPIO_PinOPType       = GPIO_OP_TYPE_PP ;
 8000d72:	2300      	movs	r3, #0
 8000d74:	733b      	strb	r3, [r7, #12]
    SPIPins.GPIO_PinConfig.GPIO_PinAltFunMode   = 5 ;
 8000d76:	2305      	movs	r3, #5
 8000d78:	737b      	strb	r3, [r7, #13]
    /*
     * Configure the SPI2 pins
     */

    // NSS / NPS
    SPIPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_9 ;
 8000d7a:	2309      	movs	r3, #9
 8000d7c:	723b      	strb	r3, [r7, #8]
    GPIO_Init(&SPIPins) ;
 8000d7e:	1d3b      	adds	r3, r7, #4
 8000d80:	4618      	mov	r0, r3
 8000d82:	f7ff fbdf 	bl	8000544 <GPIO_Init>

    // SCK
    SPIPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_10 ; /* PB13 did not work */
 8000d86:	230a      	movs	r3, #10
 8000d88:	723b      	strb	r3, [r7, #8]
    GPIO_Init(&SPIPins) ;
 8000d8a:	1d3b      	adds	r3, r7, #4
 8000d8c:	4618      	mov	r0, r3
 8000d8e:	f7ff fbd9 	bl	8000544 <GPIO_Init>

    // MOSI / COPI
    SPIPins.pGPIOx = GPIOC ;
 8000d92:	4b0a      	ldr	r3, [pc, #40]	; (8000dbc <SPI2_GPIOInits+0x6c>)
 8000d94:	607b      	str	r3, [r7, #4]
    SPIPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_3 ; /* PB15 did not work */
 8000d96:	2303      	movs	r3, #3
 8000d98:	723b      	strb	r3, [r7, #8]
    GPIO_Init(&SPIPins) ;
 8000d9a:	1d3b      	adds	r3, r7, #4
 8000d9c:	4618      	mov	r0, r3
 8000d9e:	f7ff fbd1 	bl	8000544 <GPIO_Init>

    // MISO / CIPO
    SPIPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_2 ; /* PB15 did not work */
 8000da2:	2302      	movs	r3, #2
 8000da4:	723b      	strb	r3, [r7, #8]
    GPIO_Init(&SPIPins) ;
 8000da6:	1d3b      	adds	r3, r7, #4
 8000da8:	4618      	mov	r0, r3
 8000daa:	f7ff fbcb 	bl	8000544 <GPIO_Init>
}
 8000dae:	bf00      	nop
 8000db0:	3710      	adds	r7, #16
 8000db2:	46bd      	mov	sp, r7
 8000db4:	bd80      	pop	{r7, pc}
 8000db6:	bf00      	nop
 8000db8:	40020400 	.word	0x40020400
 8000dbc:	40020800 	.word	0x40020800

08000dc0 <SPI2_Inits>:
 * @pre 				SPI2 off
 * @post 				SPI 2 on as device mode ctrl, full duplex, clk div8,
 * 						DFF 8-bit, CPOL_LOW, CPHA_LOW, and hardware periph mgmt
 * 						enabled for CSZ pin
 */
void SPI2_Inits(void) {
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	b084      	sub	sp, #16
 8000dc4:	af00      	add	r7, sp, #0
    SPI_Handle_t SPI2Handle ;
    memset(&SPI2Handle, 0, sizeof(SPI2Handle)) ;
 8000dc6:	1d3b      	adds	r3, r7, #4
 8000dc8:	220c      	movs	r2, #12
 8000dca:	2100      	movs	r1, #0
 8000dcc:	4618      	mov	r0, r3
 8000dce:	f000 fa3d 	bl	800124c <memset>

    SPI2Handle.pSPIx = SPI2 ;
 8000dd2:	4b0c      	ldr	r3, [pc, #48]	; (8000e04 <SPI2_Inits+0x44>)
 8000dd4:	607b      	str	r3, [r7, #4]
    SPI2Handle.SPIConfig.SPI_DeviceMode     = SPI_DEVICE_MODE_CONTROLLER ;
 8000dd6:	2301      	movs	r3, #1
 8000dd8:	723b      	strb	r3, [r7, #8]
    SPI2Handle.SPIConfig.SPI_BusConfig      = SPI_BUS_CONFIG_FD ;
 8000dda:	2301      	movs	r3, #1
 8000ddc:	727b      	strb	r3, [r7, #9]
    SPI2Handle.SPIConfig.SPI_SclkSpeed      = SPI_SCLK_SPEED_DIV8 ;                     /* Generates SCK of 2 MHz */
 8000dde:	2302      	movs	r3, #2
 8000de0:	72bb      	strb	r3, [r7, #10]
    SPI2Handle.SPIConfig.SPI_DFF            = SPI_DFF_8BITS ;
 8000de2:	2300      	movs	r3, #0
 8000de4:	72fb      	strb	r3, [r7, #11]
    SPI2Handle.SPIConfig.SPI_CPOL           = SPI_CPOL_LOW ;
 8000de6:	2300      	movs	r3, #0
 8000de8:	733b      	strb	r3, [r7, #12]
    SPI2Handle.SPIConfig.SPI_CPHA           = SPI_CPHA_LOW ;
 8000dea:	2300      	movs	r3, #0
 8000dec:	737b      	strb	r3, [r7, #13]
    SPI2Handle.SPIConfig.SPI_SSM            = SPI_SSM_DI ;                              /* Hardware slave management enabled for NSS pin */
 8000dee:	2300      	movs	r3, #0
 8000df0:	73bb      	strb	r3, [r7, #14]

    SPI_Init(&SPI2Handle) ;
 8000df2:	1d3b      	adds	r3, r7, #4
 8000df4:	4618      	mov	r0, r3
 8000df6:	f7ff fe3b 	bl	8000a70 <SPI_Init>
}
 8000dfa:	bf00      	nop
 8000dfc:	3710      	adds	r7, #16
 8000dfe:	46bd      	mov	sp, r7
 8000e00:	bd80      	pop	{r7, pc}
 8000e02:	bf00      	nop
 8000e04:	40003800 	.word	0x40003800

08000e08 <GPIO_ButtonInit>:
 * @brief 				Initialize STM32 A0 (user button) pin as input GPIO
 *
 * @pre 				GPIO A0 default
 * @post 				GPIOA0 input button
 */
void GPIO_ButtonInit(void) {
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	b084      	sub	sp, #16
 8000e0c:	af00      	add	r7, sp, #0
    GPIO_Handle_t GPIOHandle ;
    memset(&GPIOHandle, 0, sizeof(GPIOHandle)) ;
 8000e0e:	1d3b      	adds	r3, r7, #4
 8000e10:	220c      	movs	r2, #12
 8000e12:	2100      	movs	r1, #0
 8000e14:	4618      	mov	r0, r3
 8000e16:	f000 fa19 	bl	800124c <memset>

    GPIOHandle.pGPIOx = GPIOA ;
 8000e1a:	4b09      	ldr	r3, [pc, #36]	; (8000e40 <GPIO_ButtonInit+0x38>)
 8000e1c:	607b      	str	r3, [r7, #4]
    GPIOHandle.GPIO_PinConfig.GPIO_PinNumber    = GPIO_PIN_NO_0 ;
 8000e1e:	2300      	movs	r3, #0
 8000e20:	723b      	strb	r3, [r7, #8]
    GPIOHandle.GPIO_PinConfig.GPIO_PinMode      = GPIO_MODE_INPUT ;
 8000e22:	2300      	movs	r3, #0
 8000e24:	727b      	strb	r3, [r7, #9]
    GPIOHandle.GPIO_PinConfig.GPIO_PinSpeed     = GPIO_SPEED_FAST ;
 8000e26:	2302      	movs	r3, #2
 8000e28:	72bb      	strb	r3, [r7, #10]
    GPIOHandle.GPIO_PinConfig.GPIO_PinPuPdCtrl  = GPIO_NO_PUPD ;
 8000e2a:	2300      	movs	r3, #0
 8000e2c:	72fb      	strb	r3, [r7, #11]

    GPIO_Init(&GPIOHandle) ;
 8000e2e:	1d3b      	adds	r3, r7, #4
 8000e30:	4618      	mov	r0, r3
 8000e32:	f7ff fb87 	bl	8000544 <GPIO_Init>
}
 8000e36:	bf00      	nop
 8000e38:	3710      	adds	r7, #16
 8000e3a:	46bd      	mov	sp, r7
 8000e3c:	bd80      	pop	{r7, pc}
 8000e3e:	bf00      	nop
 8000e40:	40020000 	.word	0x40020000

08000e44 <delay>:
 * @brief       		Software delay; can be used for debouncing
 *
 * @pre					none
 * @post 				Software delay (blocking); continue program
 */
void delay(void) {
 8000e44:	b480      	push	{r7}
 8000e46:	b083      	sub	sp, #12
 8000e48:	af00      	add	r7, sp, #0
    for (uint32_t i = 0 ; i < 500000/2 ; i++) ;
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	607b      	str	r3, [r7, #4]
 8000e4e:	e002      	b.n	8000e56 <delay+0x12>
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	3301      	adds	r3, #1
 8000e54:	607b      	str	r3, [r7, #4]
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	4a04      	ldr	r2, [pc, #16]	; (8000e6c <delay+0x28>)
 8000e5a:	4293      	cmp	r3, r2
 8000e5c:	d9f8      	bls.n	8000e50 <delay+0xc>
}
 8000e5e:	bf00      	nop
 8000e60:	bf00      	nop
 8000e62:	370c      	adds	r7, #12
 8000e64:	46bd      	mov	sp, r7
 8000e66:	bc80      	pop	{r7}
 8000e68:	4770      	bx	lr
 8000e6a:	bf00      	nop
 8000e6c:	0003d08f 	.word	0x0003d08f

08000e70 <wait_for_button_press>:
 * @brief 				Waits for GPIO A0 to be pressed and then debounces
 *
 * @pre 				User button not pressed
 * @post				User button has been pressed then released
 */
void wait_for_button_press(void) {
 8000e70:	b580      	push	{r7, lr}
 8000e72:	af00      	add	r7, sp, #0
        // Wait until a button press
        while (!GPIO_ReadFromInputPin(GPIOA, GPIO_PIN_NO_0)) ;
 8000e74:	bf00      	nop
 8000e76:	2100      	movs	r1, #0
 8000e78:	4804      	ldr	r0, [pc, #16]	; (8000e8c <wait_for_button_press+0x1c>)
 8000e7a:	f7ff fd2d 	bl	80008d8 <GPIO_ReadFromInputPin>
 8000e7e:	4603      	mov	r3, r0
 8000e80:	2b00      	cmp	r3, #0
 8000e82:	d0f8      	beq.n	8000e76 <wait_for_button_press+0x6>

        // Debounce button press with software delay for clean read
        delay() ;
 8000e84:	f7ff ffde 	bl	8000e44 <delay>
}
 8000e88:	bf00      	nop
 8000e8a:	bd80      	pop	{r7, pc}
 8000e8c:	40020000 	.word	0x40020000

08000e90 <SPI_VerifyResponse>:
 * @pre 				Controller sends message to peripheral
 * @post				Controller Receives message and gets either ack or nack
 * @param[in] ackByte	ACK or NACK
 * @return 				ack = 1, nack = 0
 */
uint8_t SPI_VerifyResponse(uint8_t ackByte) {
 8000e90:	b480      	push	{r7}
 8000e92:	b083      	sub	sp, #12
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	4603      	mov	r3, r0
 8000e98:	71fb      	strb	r3, [r7, #7]
	if (ackByte == 0xF5) {
 8000e9a:	79fb      	ldrb	r3, [r7, #7]
 8000e9c:	2bf5      	cmp	r3, #245	; 0xf5
 8000e9e:	d101      	bne.n	8000ea4 <SPI_VerifyResponse+0x14>
		// ack
		return 1 ;
 8000ea0:	2301      	movs	r3, #1
 8000ea2:	e000      	b.n	8000ea6 <SPI_VerifyResponse+0x16>
	}
	// nack
	return 0 ;
 8000ea4:	2300      	movs	r3, #0
}
 8000ea6:	4618      	mov	r0, r3
 8000ea8:	370c      	adds	r7, #12
 8000eaa:	46bd      	mov	sp, r7
 8000eac:	bc80      	pop	{r7}
 8000eae:	4770      	bx	lr

08000eb0 <dummy_read_write>:
 * @pre 				Enable SPI2 and send first byte
 * @post				RXNE cleared and byte fetched
 * @param dummyRead 	Clears RXNE
 * @param dummyWrite 	Fetches response from peripheral device
 */
void dummy_read_write(uint8_t dummyRead, uint8_t dummyWrite) {
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	b082      	sub	sp, #8
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	4603      	mov	r3, r0
 8000eb8:	460a      	mov	r2, r1
 8000eba:	71fb      	strb	r3, [r7, #7]
 8000ebc:	4613      	mov	r3, r2
 8000ebe:	71bb      	strb	r3, [r7, #6]
	// Perform dummy read to clear RXNE
	SPI_ReceiveData(SPI2, &dummyRead, 1) ;
 8000ec0:	1dfb      	adds	r3, r7, #7
 8000ec2:	2201      	movs	r2, #1
 8000ec4:	4619      	mov	r1, r3
 8000ec6:	4806      	ldr	r0, [pc, #24]	; (8000ee0 <dummy_read_write+0x30>)
 8000ec8:	f7ff fe69 	bl	8000b9e <SPI_ReceiveData>

	// Send some dummy bits (1 byte) to fetch response from the peripheral
	SPI_SendData(SPI2, &dummyWrite, 1) ;
 8000ecc:	1dbb      	adds	r3, r7, #6
 8000ece:	2201      	movs	r2, #1
 8000ed0:	4619      	mov	r1, r3
 8000ed2:	4803      	ldr	r0, [pc, #12]	; (8000ee0 <dummy_read_write+0x30>)
 8000ed4:	f7ff fe2c 	bl	8000b30 <SPI_SendData>
}
 8000ed8:	bf00      	nop
 8000eda:	3708      	adds	r7, #8
 8000edc:	46bd      	mov	sp, r7
 8000ede:	bd80      	pop	{r7, pc}
 8000ee0:	40003800 	.word	0x40003800

08000ee4 <SPI_ResetBusyFlag>:
 * @brief 				Waits for the SPI_BSY flag to reset, which indicates SPI communication is no longer busy
 *
 * @pre 				SPI must be asking to receive data
 * @post 				SPI_BSY flag is reset
 */
void SPI_ResetBusyFlag() {
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	b082      	sub	sp, #8
 8000ee8:	af00      	add	r7, sp, #0
		// Wait for BSY bit to reset  -> This will indicate that SPI is not busy in communication
		while (SPI_GetFlagStatus(SPI2, SPI_BSY_FLAG) == FLAG_SET) ;
 8000eea:	bf00      	nop
 8000eec:	2180      	movs	r1, #128	; 0x80
 8000eee:	4808      	ldr	r0, [pc, #32]	; (8000f10 <SPI_ResetBusyFlag+0x2c>)
 8000ef0:	f7ff fec2 	bl	8000c78 <SPI_GetFlagStatus>
 8000ef4:	4603      	mov	r3, r0
 8000ef6:	2b01      	cmp	r3, #1
 8000ef8:	d0f8      	beq.n	8000eec <SPI_ResetBusyFlag+0x8>
		// Clear the OVR flag by reading DR and SR
		uint8_t temp __attribute__((unused)) = SPI2->DR ; /* temp is declared, but not referenced */
 8000efa:	4b05      	ldr	r3, [pc, #20]	; (8000f10 <SPI_ResetBusyFlag+0x2c>)
 8000efc:	68db      	ldr	r3, [r3, #12]
 8000efe:	71fb      	strb	r3, [r7, #7]
		temp = SPI2->SR ;
 8000f00:	4b03      	ldr	r3, [pc, #12]	; (8000f10 <SPI_ResetBusyFlag+0x2c>)
 8000f02:	689b      	ldr	r3, [r3, #8]
 8000f04:	71fb      	strb	r3, [r7, #7]
}
 8000f06:	bf00      	nop
 8000f08:	3708      	adds	r7, #8
 8000f0a:	46bd      	mov	sp, r7
 8000f0c:	bd80      	pop	{r7, pc}
 8000f0e:	bf00      	nop
 8000f10:	40003800 	.word	0x40003800

08000f14 <send_CMD_LED_CTRL>:
 * @param dummyWrite	Fetches response from peripheral device
 * @param commandCode	Code to send to peripheral device
 * @param ackByte 		Checks for ack or nack
 * @param args 			Arguments to pick peripheral device and pin for LED
 */
void send_CMD_LED_CTRL(uint8_t dummyRead, uint8_t dummyWrite, uint8_t *const commandCode, uint8_t *ackByte, uint8_t *args) {
 8000f14:	b580      	push	{r7, lr}
 8000f16:	b084      	sub	sp, #16
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	60ba      	str	r2, [r7, #8]
 8000f1c:	607b      	str	r3, [r7, #4]
 8000f1e:	4603      	mov	r3, r0
 8000f20:	73fb      	strb	r3, [r7, #15]
 8000f22:	460b      	mov	r3, r1
 8000f24:	73bb      	strb	r3, [r7, #14]
	// Send command
	SPI_SendData(SPI2, commandCode, 1) ;
 8000f26:	2201      	movs	r2, #1
 8000f28:	68b9      	ldr	r1, [r7, #8]
 8000f2a:	4815      	ldr	r0, [pc, #84]	; (8000f80 <send_CMD_LED_CTRL+0x6c>)
 8000f2c:	f7ff fe00 	bl	8000b30 <SPI_SendData>

	dummy_read_write(dummyRead, dummyWrite) ;
 8000f30:	7bba      	ldrb	r2, [r7, #14]
 8000f32:	7bfb      	ldrb	r3, [r7, #15]
 8000f34:	4611      	mov	r1, r2
 8000f36:	4618      	mov	r0, r3
 8000f38:	f7ff ffba 	bl	8000eb0 <dummy_read_write>

	// Receive the ack byte received
	SPI_ReceiveData(SPI2, ackByte, 1) ;
 8000f3c:	2201      	movs	r2, #1
 8000f3e:	6879      	ldr	r1, [r7, #4]
 8000f40:	480f      	ldr	r0, [pc, #60]	; (8000f80 <send_CMD_LED_CTRL+0x6c>)
 8000f42:	f7ff fe2c 	bl	8000b9e <SPI_ReceiveData>

	// Verify ack or nack
	if (SPI_VerifyResponse(*ackByte)) {
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	781b      	ldrb	r3, [r3, #0]
 8000f4a:	4618      	mov	r0, r3
 8000f4c:	f7ff ffa0 	bl	8000e90 <SPI_VerifyResponse>
 8000f50:	4603      	mov	r3, r0
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	d010      	beq.n	8000f78 <send_CMD_LED_CTRL+0x64>
		args[0] = UNOR3_LED_PIN ;
 8000f56:	69bb      	ldr	r3, [r7, #24]
 8000f58:	2209      	movs	r2, #9
 8000f5a:	701a      	strb	r2, [r3, #0]
		args[1] = LED_ON ;
 8000f5c:	69bb      	ldr	r3, [r7, #24]
 8000f5e:	3301      	adds	r3, #1
 8000f60:	2201      	movs	r2, #1
 8000f62:	701a      	strb	r2, [r3, #0]

		// Send arguments
		SPI_SendData(SPI2, args, 2) ; /* 2 bytes sent */
 8000f64:	2202      	movs	r2, #2
 8000f66:	69b9      	ldr	r1, [r7, #24]
 8000f68:	4805      	ldr	r0, [pc, #20]	; (8000f80 <send_CMD_LED_CTRL+0x6c>)
 8000f6a:	f7ff fde1 	bl	8000b30 <SPI_SendData>

		SPI_ResetBusyFlag();
 8000f6e:	f7ff ffb9 	bl	8000ee4 <SPI_ResetBusyFlag>

		printf("CMD_LED_CTRL executed\n") ;
 8000f72:	4804      	ldr	r0, [pc, #16]	; (8000f84 <send_CMD_LED_CTRL+0x70>)
 8000f74:	f000 f9f8 	bl	8001368 <puts>
	}
}
 8000f78:	bf00      	nop
 8000f7a:	3710      	adds	r7, #16
 8000f7c:	46bd      	mov	sp, r7
 8000f7e:	bd80      	pop	{r7, pc}
 8000f80:	40003800 	.word	0x40003800
 8000f84:	08002828 	.word	0x08002828

08000f88 <send_CMD_SENSOR_READ>:
 * @param dummyWrite	Fetches response from peripheral device
 * @param commandCode	Code to send to peripheral device
 * @param ackByte 		Checks for ack or nack
 * @param args 			Arguments to pick peripheral device and pin for LED
 */
void send_CMD_SENSOR_READ(uint8_t dummyRead, uint8_t dummyWrite, uint8_t *const commandCode, uint8_t *ackByte, uint8_t *args) {
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	b086      	sub	sp, #24
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	60ba      	str	r2, [r7, #8]
 8000f90:	607b      	str	r3, [r7, #4]
 8000f92:	4603      	mov	r3, r0
 8000f94:	73fb      	strb	r3, [r7, #15]
 8000f96:	460b      	mov	r3, r1
 8000f98:	73bb      	strb	r3, [r7, #14]
	// Send command
	SPI_SendData(SPI2, commandCode, 1) ;
 8000f9a:	2201      	movs	r2, #1
 8000f9c:	68b9      	ldr	r1, [r7, #8]
 8000f9e:	4820      	ldr	r0, [pc, #128]	; (8001020 <send_CMD_SENSOR_READ+0x98>)
 8000fa0:	f7ff fdc6 	bl	8000b30 <SPI_SendData>

	dummy_read_write(dummyRead, dummyWrite) ;
 8000fa4:	7bfb      	ldrb	r3, [r7, #15]
 8000fa6:	7bba      	ldrb	r2, [r7, #14]
 8000fa8:	4611      	mov	r1, r2
 8000faa:	4618      	mov	r0, r3
 8000fac:	f7ff ff80 	bl	8000eb0 <dummy_read_write>

	// Receive the ack byte received
	SPI_ReceiveData(SPI2, ackByte, 1) ;
 8000fb0:	2201      	movs	r2, #1
 8000fb2:	6879      	ldr	r1, [r7, #4]
 8000fb4:	481a      	ldr	r0, [pc, #104]	; (8001020 <send_CMD_SENSOR_READ+0x98>)
 8000fb6:	f7ff fdf2 	bl	8000b9e <SPI_ReceiveData>

	// Verify ack or nack
	if (SPI_VerifyResponse(*ackByte)) {
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	781b      	ldrb	r3, [r3, #0]
 8000fbe:	4618      	mov	r0, r3
 8000fc0:	f7ff ff66 	bl	8000e90 <SPI_VerifyResponse>
 8000fc4:	4603      	mov	r3, r0
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d025      	beq.n	8001016 <send_CMD_SENSOR_READ+0x8e>
		// Send arguments
		args[0] = UNOR3_ANALOG_PIN_NO_0 ;
 8000fca:	6a3b      	ldr	r3, [r7, #32]
 8000fcc:	2200      	movs	r2, #0
 8000fce:	701a      	strb	r2, [r3, #0]

		// Send arguments
		SPI_SendData(SPI2, args, 1) ; /* 1 byte sent */
 8000fd0:	2201      	movs	r2, #1
 8000fd2:	6a39      	ldr	r1, [r7, #32]
 8000fd4:	4812      	ldr	r0, [pc, #72]	; (8001020 <send_CMD_SENSOR_READ+0x98>)
 8000fd6:	f7ff fdab 	bl	8000b30 <SPI_SendData>

		// Do a dummy read to clear off the RXNE
		SPI_ReceiveData(SPI2, &dummyRead, 1) ;
 8000fda:	f107 030f 	add.w	r3, r7, #15
 8000fde:	2201      	movs	r2, #1
 8000fe0:	4619      	mov	r1, r3
 8000fe2:	480f      	ldr	r0, [pc, #60]	; (8001020 <send_CMD_SENSOR_READ+0x98>)
 8000fe4:	f7ff fddb 	bl	8000b9e <SPI_ReceiveData>

		// Insert delay so peripheral can have data ready
		delay();
 8000fe8:	f7ff ff2c 	bl	8000e44 <delay>

		// Send some dummy bits (1 byte) to fetch response from the peripheral
		SPI_SendData(SPI2, &dummyWrite, 1) ;
 8000fec:	f107 030e 	add.w	r3, r7, #14
 8000ff0:	2201      	movs	r2, #1
 8000ff2:	4619      	mov	r1, r3
 8000ff4:	480a      	ldr	r0, [pc, #40]	; (8001020 <send_CMD_SENSOR_READ+0x98>)
 8000ff6:	f7ff fd9b 	bl	8000b30 <SPI_SendData>

		uint8_t analogRead ;
		SPI_ReceiveData(SPI2, &analogRead, 1) ;
 8000ffa:	f107 0317 	add.w	r3, r7, #23
 8000ffe:	2201      	movs	r2, #1
 8001000:	4619      	mov	r1, r3
 8001002:	4807      	ldr	r0, [pc, #28]	; (8001020 <send_CMD_SENSOR_READ+0x98>)
 8001004:	f7ff fdcb 	bl	8000b9e <SPI_ReceiveData>

		// Wait for BSY bit to reset  -> This will indicate that SPI is not busy in communication
		SPI_ResetBusyFlag() ;
 8001008:	f7ff ff6c 	bl	8000ee4 <SPI_ResetBusyFlag>

		printf("CMD_SENSOR_READ %d\n", analogRead) ;
 800100c:	7dfb      	ldrb	r3, [r7, #23]
 800100e:	4619      	mov	r1, r3
 8001010:	4804      	ldr	r0, [pc, #16]	; (8001024 <send_CMD_SENSOR_READ+0x9c>)
 8001012:	f000 f923 	bl	800125c <iprintf>
	}
}
 8001016:	bf00      	nop
 8001018:	3718      	adds	r7, #24
 800101a:	46bd      	mov	sp, r7
 800101c:	bd80      	pop	{r7, pc}
 800101e:	bf00      	nop
 8001020:	40003800 	.word	0x40003800
 8001024:	08002840 	.word	0x08002840

08001028 <send_CMD_LED_READ>:
 * @param dummyWrite	Fetches response from peripheral device
 * @param commandCode	Code to send to peripheral device
 * @param ackByte 		Checks for ack or nack
 * @param args 			Arguments to pick peripheral device and pin for LED
 */
void send_CMD_LED_READ(uint8_t dummyRead, uint8_t dummyWrite, uint8_t *const commandCode, uint8_t *ackByte, uint8_t *args) {
 8001028:	b580      	push	{r7, lr}
 800102a:	b086      	sub	sp, #24
 800102c:	af00      	add	r7, sp, #0
 800102e:	60ba      	str	r2, [r7, #8]
 8001030:	607b      	str	r3, [r7, #4]
 8001032:	4603      	mov	r3, r0
 8001034:	73fb      	strb	r3, [r7, #15]
 8001036:	460b      	mov	r3, r1
 8001038:	73bb      	strb	r3, [r7, #14]
	// Send command
	SPI_SendData(SPI2, commandCode, 1) ;
 800103a:	2201      	movs	r2, #1
 800103c:	68b9      	ldr	r1, [r7, #8]
 800103e:	4822      	ldr	r0, [pc, #136]	; (80010c8 <send_CMD_LED_READ+0xa0>)
 8001040:	f7ff fd76 	bl	8000b30 <SPI_SendData>

	dummy_read_write(dummyRead, dummyWrite) ;
 8001044:	7bfb      	ldrb	r3, [r7, #15]
 8001046:	7bba      	ldrb	r2, [r7, #14]
 8001048:	4611      	mov	r1, r2
 800104a:	4618      	mov	r0, r3
 800104c:	f7ff ff30 	bl	8000eb0 <dummy_read_write>

	// Receive the ack byte received
	SPI_ReceiveData(SPI2, ackByte, 1) ;
 8001050:	2201      	movs	r2, #1
 8001052:	6879      	ldr	r1, [r7, #4]
 8001054:	481c      	ldr	r0, [pc, #112]	; (80010c8 <send_CMD_LED_READ+0xa0>)
 8001056:	f7ff fda2 	bl	8000b9e <SPI_ReceiveData>

	// Verify ack or nack
	if (SPI_VerifyResponse(*ackByte)) {
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	781b      	ldrb	r3, [r3, #0]
 800105e:	4618      	mov	r0, r3
 8001060:	f7ff ff16 	bl	8000e90 <SPI_VerifyResponse>
 8001064:	4603      	mov	r3, r0
 8001066:	2b00      	cmp	r3, #0
 8001068:	d02a      	beq.n	80010c0 <send_CMD_LED_READ+0x98>
		// Send arguments
		args[0] = UNOR3_ANALOG_PIN_NO_0 ;
 800106a:	6a3b      	ldr	r3, [r7, #32]
 800106c:	2200      	movs	r2, #0
 800106e:	701a      	strb	r2, [r3, #0]

		// Send arguments
		SPI_SendData(SPI2, args, 1) ; /* 1 byte sent */
 8001070:	2201      	movs	r2, #1
 8001072:	6a39      	ldr	r1, [r7, #32]
 8001074:	4814      	ldr	r0, [pc, #80]	; (80010c8 <send_CMD_LED_READ+0xa0>)
 8001076:	f7ff fd5b 	bl	8000b30 <SPI_SendData>

		// Do a dummy read to clear off the RXNE
		SPI_ReceiveData(SPI2, &dummyRead, 1) ;
 800107a:	f107 030f 	add.w	r3, r7, #15
 800107e:	2201      	movs	r2, #1
 8001080:	4619      	mov	r1, r3
 8001082:	4811      	ldr	r0, [pc, #68]	; (80010c8 <send_CMD_LED_READ+0xa0>)
 8001084:	f7ff fd8b 	bl	8000b9e <SPI_ReceiveData>

		// Insert delay so peripheral can have data ready
		delay();
 8001088:	f7ff fedc 	bl	8000e44 <delay>

		// Send some dummy bits (1 byte) to fetch response from the peripheral
		SPI_SendData(SPI2, &dummyWrite, 1) ;
 800108c:	f107 030e 	add.w	r3, r7, #14
 8001090:	2201      	movs	r2, #1
 8001092:	4619      	mov	r1, r3
 8001094:	480c      	ldr	r0, [pc, #48]	; (80010c8 <send_CMD_LED_READ+0xa0>)
 8001096:	f7ff fd4b 	bl	8000b30 <SPI_SendData>

		uint8_t ledStatus ;
		SPI_ReceiveData(SPI2, &ledStatus, 1) ;
 800109a:	f107 0317 	add.w	r3, r7, #23
 800109e:	2201      	movs	r2, #1
 80010a0:	4619      	mov	r1, r3
 80010a2:	4809      	ldr	r0, [pc, #36]	; (80010c8 <send_CMD_LED_READ+0xa0>)
 80010a4:	f7ff fd7b 	bl	8000b9e <SPI_ReceiveData>

		// Wait for BSY bit to reset  -> This will indicate that SPI is not busy in communication
		SPI_ResetBusyFlag() ;
 80010a8:	f7ff ff1c 	bl	8000ee4 <SPI_ResetBusyFlag>

		printf("CMD_LED_READ %s\n", ledStatus == LED_ON ? "ON" : "OFF") ;
 80010ac:	7dfb      	ldrb	r3, [r7, #23]
 80010ae:	2b01      	cmp	r3, #1
 80010b0:	d101      	bne.n	80010b6 <send_CMD_LED_READ+0x8e>
 80010b2:	4b06      	ldr	r3, [pc, #24]	; (80010cc <send_CMD_LED_READ+0xa4>)
 80010b4:	e000      	b.n	80010b8 <send_CMD_LED_READ+0x90>
 80010b6:	4b06      	ldr	r3, [pc, #24]	; (80010d0 <send_CMD_LED_READ+0xa8>)
 80010b8:	4619      	mov	r1, r3
 80010ba:	4806      	ldr	r0, [pc, #24]	; (80010d4 <send_CMD_LED_READ+0xac>)
 80010bc:	f000 f8ce 	bl	800125c <iprintf>
	}
}
 80010c0:	bf00      	nop
 80010c2:	3718      	adds	r7, #24
 80010c4:	46bd      	mov	sp, r7
 80010c6:	bd80      	pop	{r7, pc}
 80010c8:	40003800 	.word	0x40003800
 80010cc:	08002854 	.word	0x08002854
 80010d0:	08002858 	.word	0x08002858
 80010d4:	0800285c 	.word	0x0800285c

080010d8 <send_CMD_PRINT>:
 * @param dummyWrite
 * @param commandCode
 * @param ackByte
 * @param args
 */
void send_CMD_PRINT(uint8_t dummyRead, uint8_t dummyWrite, uint8_t *const commandCode, uint8_t *ackByte, uint8_t *args) {
 80010d8:	b5b0      	push	{r4, r5, r7, lr}
 80010da:	b08a      	sub	sp, #40	; 0x28
 80010dc:	af00      	add	r7, sp, #0
 80010de:	60ba      	str	r2, [r7, #8]
 80010e0:	607b      	str	r3, [r7, #4]
 80010e2:	4603      	mov	r3, r0
 80010e4:	73fb      	strb	r3, [r7, #15]
 80010e6:	460b      	mov	r3, r1
 80010e8:	73bb      	strb	r3, [r7, #14]
	// Send command
	SPI_SendData(SPI2, commandCode, 1) ;
 80010ea:	2201      	movs	r2, #1
 80010ec:	68b9      	ldr	r1, [r7, #8]
 80010ee:	482d      	ldr	r0, [pc, #180]	; (80011a4 <send_CMD_PRINT+0xcc>)
 80010f0:	f7ff fd1e 	bl	8000b30 <SPI_SendData>

	dummy_read_write(dummyRead, dummyWrite) ;
 80010f4:	7bfb      	ldrb	r3, [r7, #15]
 80010f6:	7bba      	ldrb	r2, [r7, #14]
 80010f8:	4611      	mov	r1, r2
 80010fa:	4618      	mov	r0, r3
 80010fc:	f7ff fed8 	bl	8000eb0 <dummy_read_write>

	// Receive the ack byte received
	SPI_ReceiveData(SPI2, ackByte, 1) ;
 8001100:	2201      	movs	r2, #1
 8001102:	6879      	ldr	r1, [r7, #4]
 8001104:	4827      	ldr	r0, [pc, #156]	; (80011a4 <send_CMD_PRINT+0xcc>)
 8001106:	f7ff fd4a 	bl	8000b9e <SPI_ReceiveData>

	uint8_t message[] = "Hello! How are you?" ;
 800110a:	4b27      	ldr	r3, [pc, #156]	; (80011a8 <send_CMD_PRINT+0xd0>)
 800110c:	f107 0410 	add.w	r4, r7, #16
 8001110:	461d      	mov	r5, r3
 8001112:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001114:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001116:	682b      	ldr	r3, [r5, #0]
 8001118:	6023      	str	r3, [r4, #0]
	// Verify ack or nack
	if (SPI_VerifyResponse(*ackByte)) {
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	781b      	ldrb	r3, [r3, #0]
 800111e:	4618      	mov	r0, r3
 8001120:	f7ff feb6 	bl	8000e90 <SPI_VerifyResponse>
 8001124:	4603      	mov	r3, r0
 8001126:	2b00      	cmp	r3, #0
 8001128:	d037      	beq.n	800119a <send_CMD_PRINT+0xc2>
		// Send arguments
		args[0] = strlen( (char *)message ) + 0 ; 	/* +1 for '\0' character */
 800112a:	f107 0310 	add.w	r3, r7, #16
 800112e:	4618      	mov	r0, r3
 8001130:	f7ff f85e 	bl	80001f0 <strlen>
 8001134:	4603      	mov	r3, r0
 8001136:	b2da      	uxtb	r2, r3
 8001138:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800113a:	701a      	strb	r2, [r3, #0]

		// Send arguments
		SPI_SendData(SPI2, args, 1) ; /* 1 byte sent */
 800113c:	2201      	movs	r2, #1
 800113e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8001140:	4818      	ldr	r0, [pc, #96]	; (80011a4 <send_CMD_PRINT+0xcc>)
 8001142:	f7ff fcf5 	bl	8000b30 <SPI_SendData>

		// Do a dummy read to clear off the RXNE
		SPI_ReceiveData(SPI2, &dummyRead, 1) ;
 8001146:	f107 030f 	add.w	r3, r7, #15
 800114a:	2201      	movs	r2, #1
 800114c:	4619      	mov	r1, r3
 800114e:	4815      	ldr	r0, [pc, #84]	; (80011a4 <send_CMD_PRINT+0xcc>)
 8001150:	f7ff fd25 	bl	8000b9e <SPI_ReceiveData>

		// Insert delay so peripheral can have data ready
		delay();
 8001154:	f7ff fe76 	bl	8000e44 <delay>

		// Send message
		int index = 0 ;
 8001158:	2300      	movs	r3, #0
 800115a:	627b      	str	r3, [r7, #36]	; 0x24
		while (index < args[0]) {
 800115c:	e012      	b.n	8001184 <send_CMD_PRINT+0xac>
			SPI_SendData(SPI2, &message[index], 1) ;
 800115e:	f107 0210 	add.w	r2, r7, #16
 8001162:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001164:	4413      	add	r3, r2
 8001166:	2201      	movs	r2, #1
 8001168:	4619      	mov	r1, r3
 800116a:	480e      	ldr	r0, [pc, #56]	; (80011a4 <send_CMD_PRINT+0xcc>)
 800116c:	f7ff fce0 	bl	8000b30 <SPI_SendData>
			SPI_ReceiveData(SPI2, &dummyRead, 1) ;
 8001170:	f107 030f 	add.w	r3, r7, #15
 8001174:	2201      	movs	r2, #1
 8001176:	4619      	mov	r1, r3
 8001178:	480a      	ldr	r0, [pc, #40]	; (80011a4 <send_CMD_PRINT+0xcc>)
 800117a:	f7ff fd10 	bl	8000b9e <SPI_ReceiveData>
			index++ ;
 800117e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001180:	3301      	adds	r3, #1
 8001182:	627b      	str	r3, [r7, #36]	; 0x24
		while (index < args[0]) {
 8001184:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001186:	781b      	ldrb	r3, [r3, #0]
 8001188:	461a      	mov	r2, r3
 800118a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800118c:	4293      	cmp	r3, r2
 800118e:	dbe6      	blt.n	800115e <send_CMD_PRINT+0x86>
		}
//		SPI_SendData(SPI2, message, args[0]) ;

		// Wait for BSY bit to reset  -> This will indicate that SPI is not busy in communication
		SPI_ResetBusyFlag() ;
 8001190:	f7ff fea8 	bl	8000ee4 <SPI_ResetBusyFlag>

		printf("CMD_PRINT executed\n") ;
 8001194:	4805      	ldr	r0, [pc, #20]	; (80011ac <send_CMD_PRINT+0xd4>)
 8001196:	f000 f8e7 	bl	8001368 <puts>
	}
}
 800119a:	bf00      	nop
 800119c:	3728      	adds	r7, #40	; 0x28
 800119e:	46bd      	mov	sp, r7
 80011a0:	bdb0      	pop	{r4, r5, r7, pc}
 80011a2:	bf00      	nop
 80011a4:	40003800 	.word	0x40003800
 80011a8:	08002884 	.word	0x08002884
 80011ac:	08002870 	.word	0x08002870

080011b0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80011b0:	480d      	ldr	r0, [pc, #52]	; (80011e8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80011b2:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80011b4:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80011b8:	480c      	ldr	r0, [pc, #48]	; (80011ec <LoopForever+0x6>)
  ldr r1, =_edata
 80011ba:	490d      	ldr	r1, [pc, #52]	; (80011f0 <LoopForever+0xa>)
  ldr r2, =_sidata
 80011bc:	4a0d      	ldr	r2, [pc, #52]	; (80011f4 <LoopForever+0xe>)
  movs r3, #0
 80011be:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80011c0:	e002      	b.n	80011c8 <LoopCopyDataInit>

080011c2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80011c2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80011c4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80011c6:	3304      	adds	r3, #4

080011c8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80011c8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80011ca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80011cc:	d3f9      	bcc.n	80011c2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80011ce:	4a0a      	ldr	r2, [pc, #40]	; (80011f8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80011d0:	4c0a      	ldr	r4, [pc, #40]	; (80011fc <LoopForever+0x16>)
  movs r3, #0
 80011d2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80011d4:	e001      	b.n	80011da <LoopFillZerobss>

080011d6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80011d6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80011d8:	3204      	adds	r2, #4

080011da <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80011da:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80011dc:	d3fb      	bcc.n	80011d6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80011de:	f000 f811 	bl	8001204 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80011e2:	f7ff fd5d 	bl	8000ca0 <main>

080011e6 <LoopForever>:

LoopForever:
  b LoopForever
 80011e6:	e7fe      	b.n	80011e6 <LoopForever>
  ldr   r0, =_estack
 80011e8:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 80011ec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80011f0:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 80011f4:	08002954 	.word	0x08002954
  ldr r2, =_sbss
 80011f8:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 80011fc:	2000014c 	.word	0x2000014c

08001200 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001200:	e7fe      	b.n	8001200 <ADC_IRQHandler>
	...

08001204 <__libc_init_array>:
 8001204:	b570      	push	{r4, r5, r6, lr}
 8001206:	4d0d      	ldr	r5, [pc, #52]	; (800123c <__libc_init_array+0x38>)
 8001208:	4c0d      	ldr	r4, [pc, #52]	; (8001240 <__libc_init_array+0x3c>)
 800120a:	1b64      	subs	r4, r4, r5
 800120c:	10a4      	asrs	r4, r4, #2
 800120e:	2600      	movs	r6, #0
 8001210:	42a6      	cmp	r6, r4
 8001212:	d109      	bne.n	8001228 <__libc_init_array+0x24>
 8001214:	4d0b      	ldr	r5, [pc, #44]	; (8001244 <__libc_init_array+0x40>)
 8001216:	4c0c      	ldr	r4, [pc, #48]	; (8001248 <__libc_init_array+0x44>)
 8001218:	f001 fae2 	bl	80027e0 <_init>
 800121c:	1b64      	subs	r4, r4, r5
 800121e:	10a4      	asrs	r4, r4, #2
 8001220:	2600      	movs	r6, #0
 8001222:	42a6      	cmp	r6, r4
 8001224:	d105      	bne.n	8001232 <__libc_init_array+0x2e>
 8001226:	bd70      	pop	{r4, r5, r6, pc}
 8001228:	f855 3b04 	ldr.w	r3, [r5], #4
 800122c:	4798      	blx	r3
 800122e:	3601      	adds	r6, #1
 8001230:	e7ee      	b.n	8001210 <__libc_init_array+0xc>
 8001232:	f855 3b04 	ldr.w	r3, [r5], #4
 8001236:	4798      	blx	r3
 8001238:	3601      	adds	r6, #1
 800123a:	e7f2      	b.n	8001222 <__libc_init_array+0x1e>
 800123c:	0800294c 	.word	0x0800294c
 8001240:	0800294c 	.word	0x0800294c
 8001244:	0800294c 	.word	0x0800294c
 8001248:	08002950 	.word	0x08002950

0800124c <memset>:
 800124c:	4402      	add	r2, r0
 800124e:	4603      	mov	r3, r0
 8001250:	4293      	cmp	r3, r2
 8001252:	d100      	bne.n	8001256 <memset+0xa>
 8001254:	4770      	bx	lr
 8001256:	f803 1b01 	strb.w	r1, [r3], #1
 800125a:	e7f9      	b.n	8001250 <memset+0x4>

0800125c <iprintf>:
 800125c:	b40f      	push	{r0, r1, r2, r3}
 800125e:	4b0a      	ldr	r3, [pc, #40]	; (8001288 <iprintf+0x2c>)
 8001260:	b513      	push	{r0, r1, r4, lr}
 8001262:	681c      	ldr	r4, [r3, #0]
 8001264:	b124      	cbz	r4, 8001270 <iprintf+0x14>
 8001266:	69a3      	ldr	r3, [r4, #24]
 8001268:	b913      	cbnz	r3, 8001270 <iprintf+0x14>
 800126a:	4620      	mov	r0, r4
 800126c:	f000 fa5a 	bl	8001724 <__sinit>
 8001270:	ab05      	add	r3, sp, #20
 8001272:	9a04      	ldr	r2, [sp, #16]
 8001274:	68a1      	ldr	r1, [r4, #8]
 8001276:	9301      	str	r3, [sp, #4]
 8001278:	4620      	mov	r0, r4
 800127a:	f000 fc5f 	bl	8001b3c <_vfiprintf_r>
 800127e:	b002      	add	sp, #8
 8001280:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001284:	b004      	add	sp, #16
 8001286:	4770      	bx	lr
 8001288:	20000000 	.word	0x20000000

0800128c <_puts_r>:
 800128c:	b570      	push	{r4, r5, r6, lr}
 800128e:	460e      	mov	r6, r1
 8001290:	4605      	mov	r5, r0
 8001292:	b118      	cbz	r0, 800129c <_puts_r+0x10>
 8001294:	6983      	ldr	r3, [r0, #24]
 8001296:	b90b      	cbnz	r3, 800129c <_puts_r+0x10>
 8001298:	f000 fa44 	bl	8001724 <__sinit>
 800129c:	69ab      	ldr	r3, [r5, #24]
 800129e:	68ac      	ldr	r4, [r5, #8]
 80012a0:	b913      	cbnz	r3, 80012a8 <_puts_r+0x1c>
 80012a2:	4628      	mov	r0, r5
 80012a4:	f000 fa3e 	bl	8001724 <__sinit>
 80012a8:	4b2c      	ldr	r3, [pc, #176]	; (800135c <_puts_r+0xd0>)
 80012aa:	429c      	cmp	r4, r3
 80012ac:	d120      	bne.n	80012f0 <_puts_r+0x64>
 80012ae:	686c      	ldr	r4, [r5, #4]
 80012b0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80012b2:	07db      	lsls	r3, r3, #31
 80012b4:	d405      	bmi.n	80012c2 <_puts_r+0x36>
 80012b6:	89a3      	ldrh	r3, [r4, #12]
 80012b8:	0598      	lsls	r0, r3, #22
 80012ba:	d402      	bmi.n	80012c2 <_puts_r+0x36>
 80012bc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80012be:	f000 facf 	bl	8001860 <__retarget_lock_acquire_recursive>
 80012c2:	89a3      	ldrh	r3, [r4, #12]
 80012c4:	0719      	lsls	r1, r3, #28
 80012c6:	d51d      	bpl.n	8001304 <_puts_r+0x78>
 80012c8:	6923      	ldr	r3, [r4, #16]
 80012ca:	b1db      	cbz	r3, 8001304 <_puts_r+0x78>
 80012cc:	3e01      	subs	r6, #1
 80012ce:	68a3      	ldr	r3, [r4, #8]
 80012d0:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80012d4:	3b01      	subs	r3, #1
 80012d6:	60a3      	str	r3, [r4, #8]
 80012d8:	bb39      	cbnz	r1, 800132a <_puts_r+0x9e>
 80012da:	2b00      	cmp	r3, #0
 80012dc:	da38      	bge.n	8001350 <_puts_r+0xc4>
 80012de:	4622      	mov	r2, r4
 80012e0:	210a      	movs	r1, #10
 80012e2:	4628      	mov	r0, r5
 80012e4:	f000 f848 	bl	8001378 <__swbuf_r>
 80012e8:	3001      	adds	r0, #1
 80012ea:	d011      	beq.n	8001310 <_puts_r+0x84>
 80012ec:	250a      	movs	r5, #10
 80012ee:	e011      	b.n	8001314 <_puts_r+0x88>
 80012f0:	4b1b      	ldr	r3, [pc, #108]	; (8001360 <_puts_r+0xd4>)
 80012f2:	429c      	cmp	r4, r3
 80012f4:	d101      	bne.n	80012fa <_puts_r+0x6e>
 80012f6:	68ac      	ldr	r4, [r5, #8]
 80012f8:	e7da      	b.n	80012b0 <_puts_r+0x24>
 80012fa:	4b1a      	ldr	r3, [pc, #104]	; (8001364 <_puts_r+0xd8>)
 80012fc:	429c      	cmp	r4, r3
 80012fe:	bf08      	it	eq
 8001300:	68ec      	ldreq	r4, [r5, #12]
 8001302:	e7d5      	b.n	80012b0 <_puts_r+0x24>
 8001304:	4621      	mov	r1, r4
 8001306:	4628      	mov	r0, r5
 8001308:	f000 f888 	bl	800141c <__swsetup_r>
 800130c:	2800      	cmp	r0, #0
 800130e:	d0dd      	beq.n	80012cc <_puts_r+0x40>
 8001310:	f04f 35ff 	mov.w	r5, #4294967295
 8001314:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8001316:	07da      	lsls	r2, r3, #31
 8001318:	d405      	bmi.n	8001326 <_puts_r+0x9a>
 800131a:	89a3      	ldrh	r3, [r4, #12]
 800131c:	059b      	lsls	r3, r3, #22
 800131e:	d402      	bmi.n	8001326 <_puts_r+0x9a>
 8001320:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001322:	f000 fa9e 	bl	8001862 <__retarget_lock_release_recursive>
 8001326:	4628      	mov	r0, r5
 8001328:	bd70      	pop	{r4, r5, r6, pc}
 800132a:	2b00      	cmp	r3, #0
 800132c:	da04      	bge.n	8001338 <_puts_r+0xac>
 800132e:	69a2      	ldr	r2, [r4, #24]
 8001330:	429a      	cmp	r2, r3
 8001332:	dc06      	bgt.n	8001342 <_puts_r+0xb6>
 8001334:	290a      	cmp	r1, #10
 8001336:	d004      	beq.n	8001342 <_puts_r+0xb6>
 8001338:	6823      	ldr	r3, [r4, #0]
 800133a:	1c5a      	adds	r2, r3, #1
 800133c:	6022      	str	r2, [r4, #0]
 800133e:	7019      	strb	r1, [r3, #0]
 8001340:	e7c5      	b.n	80012ce <_puts_r+0x42>
 8001342:	4622      	mov	r2, r4
 8001344:	4628      	mov	r0, r5
 8001346:	f000 f817 	bl	8001378 <__swbuf_r>
 800134a:	3001      	adds	r0, #1
 800134c:	d1bf      	bne.n	80012ce <_puts_r+0x42>
 800134e:	e7df      	b.n	8001310 <_puts_r+0x84>
 8001350:	6823      	ldr	r3, [r4, #0]
 8001352:	250a      	movs	r5, #10
 8001354:	1c5a      	adds	r2, r3, #1
 8001356:	6022      	str	r2, [r4, #0]
 8001358:	701d      	strb	r5, [r3, #0]
 800135a:	e7db      	b.n	8001314 <_puts_r+0x88>
 800135c:	080028bc 	.word	0x080028bc
 8001360:	080028dc 	.word	0x080028dc
 8001364:	0800289c 	.word	0x0800289c

08001368 <puts>:
 8001368:	4b02      	ldr	r3, [pc, #8]	; (8001374 <puts+0xc>)
 800136a:	4601      	mov	r1, r0
 800136c:	6818      	ldr	r0, [r3, #0]
 800136e:	f7ff bf8d 	b.w	800128c <_puts_r>
 8001372:	bf00      	nop
 8001374:	20000000 	.word	0x20000000

08001378 <__swbuf_r>:
 8001378:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800137a:	460e      	mov	r6, r1
 800137c:	4614      	mov	r4, r2
 800137e:	4605      	mov	r5, r0
 8001380:	b118      	cbz	r0, 800138a <__swbuf_r+0x12>
 8001382:	6983      	ldr	r3, [r0, #24]
 8001384:	b90b      	cbnz	r3, 800138a <__swbuf_r+0x12>
 8001386:	f000 f9cd 	bl	8001724 <__sinit>
 800138a:	4b21      	ldr	r3, [pc, #132]	; (8001410 <__swbuf_r+0x98>)
 800138c:	429c      	cmp	r4, r3
 800138e:	d12b      	bne.n	80013e8 <__swbuf_r+0x70>
 8001390:	686c      	ldr	r4, [r5, #4]
 8001392:	69a3      	ldr	r3, [r4, #24]
 8001394:	60a3      	str	r3, [r4, #8]
 8001396:	89a3      	ldrh	r3, [r4, #12]
 8001398:	071a      	lsls	r2, r3, #28
 800139a:	d52f      	bpl.n	80013fc <__swbuf_r+0x84>
 800139c:	6923      	ldr	r3, [r4, #16]
 800139e:	b36b      	cbz	r3, 80013fc <__swbuf_r+0x84>
 80013a0:	6923      	ldr	r3, [r4, #16]
 80013a2:	6820      	ldr	r0, [r4, #0]
 80013a4:	1ac0      	subs	r0, r0, r3
 80013a6:	6963      	ldr	r3, [r4, #20]
 80013a8:	b2f6      	uxtb	r6, r6
 80013aa:	4283      	cmp	r3, r0
 80013ac:	4637      	mov	r7, r6
 80013ae:	dc04      	bgt.n	80013ba <__swbuf_r+0x42>
 80013b0:	4621      	mov	r1, r4
 80013b2:	4628      	mov	r0, r5
 80013b4:	f000 f922 	bl	80015fc <_fflush_r>
 80013b8:	bb30      	cbnz	r0, 8001408 <__swbuf_r+0x90>
 80013ba:	68a3      	ldr	r3, [r4, #8]
 80013bc:	3b01      	subs	r3, #1
 80013be:	60a3      	str	r3, [r4, #8]
 80013c0:	6823      	ldr	r3, [r4, #0]
 80013c2:	1c5a      	adds	r2, r3, #1
 80013c4:	6022      	str	r2, [r4, #0]
 80013c6:	701e      	strb	r6, [r3, #0]
 80013c8:	6963      	ldr	r3, [r4, #20]
 80013ca:	3001      	adds	r0, #1
 80013cc:	4283      	cmp	r3, r0
 80013ce:	d004      	beq.n	80013da <__swbuf_r+0x62>
 80013d0:	89a3      	ldrh	r3, [r4, #12]
 80013d2:	07db      	lsls	r3, r3, #31
 80013d4:	d506      	bpl.n	80013e4 <__swbuf_r+0x6c>
 80013d6:	2e0a      	cmp	r6, #10
 80013d8:	d104      	bne.n	80013e4 <__swbuf_r+0x6c>
 80013da:	4621      	mov	r1, r4
 80013dc:	4628      	mov	r0, r5
 80013de:	f000 f90d 	bl	80015fc <_fflush_r>
 80013e2:	b988      	cbnz	r0, 8001408 <__swbuf_r+0x90>
 80013e4:	4638      	mov	r0, r7
 80013e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80013e8:	4b0a      	ldr	r3, [pc, #40]	; (8001414 <__swbuf_r+0x9c>)
 80013ea:	429c      	cmp	r4, r3
 80013ec:	d101      	bne.n	80013f2 <__swbuf_r+0x7a>
 80013ee:	68ac      	ldr	r4, [r5, #8]
 80013f0:	e7cf      	b.n	8001392 <__swbuf_r+0x1a>
 80013f2:	4b09      	ldr	r3, [pc, #36]	; (8001418 <__swbuf_r+0xa0>)
 80013f4:	429c      	cmp	r4, r3
 80013f6:	bf08      	it	eq
 80013f8:	68ec      	ldreq	r4, [r5, #12]
 80013fa:	e7ca      	b.n	8001392 <__swbuf_r+0x1a>
 80013fc:	4621      	mov	r1, r4
 80013fe:	4628      	mov	r0, r5
 8001400:	f000 f80c 	bl	800141c <__swsetup_r>
 8001404:	2800      	cmp	r0, #0
 8001406:	d0cb      	beq.n	80013a0 <__swbuf_r+0x28>
 8001408:	f04f 37ff 	mov.w	r7, #4294967295
 800140c:	e7ea      	b.n	80013e4 <__swbuf_r+0x6c>
 800140e:	bf00      	nop
 8001410:	080028bc 	.word	0x080028bc
 8001414:	080028dc 	.word	0x080028dc
 8001418:	0800289c 	.word	0x0800289c

0800141c <__swsetup_r>:
 800141c:	4b32      	ldr	r3, [pc, #200]	; (80014e8 <__swsetup_r+0xcc>)
 800141e:	b570      	push	{r4, r5, r6, lr}
 8001420:	681d      	ldr	r5, [r3, #0]
 8001422:	4606      	mov	r6, r0
 8001424:	460c      	mov	r4, r1
 8001426:	b125      	cbz	r5, 8001432 <__swsetup_r+0x16>
 8001428:	69ab      	ldr	r3, [r5, #24]
 800142a:	b913      	cbnz	r3, 8001432 <__swsetup_r+0x16>
 800142c:	4628      	mov	r0, r5
 800142e:	f000 f979 	bl	8001724 <__sinit>
 8001432:	4b2e      	ldr	r3, [pc, #184]	; (80014ec <__swsetup_r+0xd0>)
 8001434:	429c      	cmp	r4, r3
 8001436:	d10f      	bne.n	8001458 <__swsetup_r+0x3c>
 8001438:	686c      	ldr	r4, [r5, #4]
 800143a:	89a3      	ldrh	r3, [r4, #12]
 800143c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8001440:	0719      	lsls	r1, r3, #28
 8001442:	d42c      	bmi.n	800149e <__swsetup_r+0x82>
 8001444:	06dd      	lsls	r5, r3, #27
 8001446:	d411      	bmi.n	800146c <__swsetup_r+0x50>
 8001448:	2309      	movs	r3, #9
 800144a:	6033      	str	r3, [r6, #0]
 800144c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8001450:	81a3      	strh	r3, [r4, #12]
 8001452:	f04f 30ff 	mov.w	r0, #4294967295
 8001456:	e03e      	b.n	80014d6 <__swsetup_r+0xba>
 8001458:	4b25      	ldr	r3, [pc, #148]	; (80014f0 <__swsetup_r+0xd4>)
 800145a:	429c      	cmp	r4, r3
 800145c:	d101      	bne.n	8001462 <__swsetup_r+0x46>
 800145e:	68ac      	ldr	r4, [r5, #8]
 8001460:	e7eb      	b.n	800143a <__swsetup_r+0x1e>
 8001462:	4b24      	ldr	r3, [pc, #144]	; (80014f4 <__swsetup_r+0xd8>)
 8001464:	429c      	cmp	r4, r3
 8001466:	bf08      	it	eq
 8001468:	68ec      	ldreq	r4, [r5, #12]
 800146a:	e7e6      	b.n	800143a <__swsetup_r+0x1e>
 800146c:	0758      	lsls	r0, r3, #29
 800146e:	d512      	bpl.n	8001496 <__swsetup_r+0x7a>
 8001470:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001472:	b141      	cbz	r1, 8001486 <__swsetup_r+0x6a>
 8001474:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8001478:	4299      	cmp	r1, r3
 800147a:	d002      	beq.n	8001482 <__swsetup_r+0x66>
 800147c:	4630      	mov	r0, r6
 800147e:	f000 fa57 	bl	8001930 <_free_r>
 8001482:	2300      	movs	r3, #0
 8001484:	6363      	str	r3, [r4, #52]	; 0x34
 8001486:	89a3      	ldrh	r3, [r4, #12]
 8001488:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800148c:	81a3      	strh	r3, [r4, #12]
 800148e:	2300      	movs	r3, #0
 8001490:	6063      	str	r3, [r4, #4]
 8001492:	6923      	ldr	r3, [r4, #16]
 8001494:	6023      	str	r3, [r4, #0]
 8001496:	89a3      	ldrh	r3, [r4, #12]
 8001498:	f043 0308 	orr.w	r3, r3, #8
 800149c:	81a3      	strh	r3, [r4, #12]
 800149e:	6923      	ldr	r3, [r4, #16]
 80014a0:	b94b      	cbnz	r3, 80014b6 <__swsetup_r+0x9a>
 80014a2:	89a3      	ldrh	r3, [r4, #12]
 80014a4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80014a8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80014ac:	d003      	beq.n	80014b6 <__swsetup_r+0x9a>
 80014ae:	4621      	mov	r1, r4
 80014b0:	4630      	mov	r0, r6
 80014b2:	f000 f9fd 	bl	80018b0 <__smakebuf_r>
 80014b6:	89a0      	ldrh	r0, [r4, #12]
 80014b8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80014bc:	f010 0301 	ands.w	r3, r0, #1
 80014c0:	d00a      	beq.n	80014d8 <__swsetup_r+0xbc>
 80014c2:	2300      	movs	r3, #0
 80014c4:	60a3      	str	r3, [r4, #8]
 80014c6:	6963      	ldr	r3, [r4, #20]
 80014c8:	425b      	negs	r3, r3
 80014ca:	61a3      	str	r3, [r4, #24]
 80014cc:	6923      	ldr	r3, [r4, #16]
 80014ce:	b943      	cbnz	r3, 80014e2 <__swsetup_r+0xc6>
 80014d0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80014d4:	d1ba      	bne.n	800144c <__swsetup_r+0x30>
 80014d6:	bd70      	pop	{r4, r5, r6, pc}
 80014d8:	0781      	lsls	r1, r0, #30
 80014da:	bf58      	it	pl
 80014dc:	6963      	ldrpl	r3, [r4, #20]
 80014de:	60a3      	str	r3, [r4, #8]
 80014e0:	e7f4      	b.n	80014cc <__swsetup_r+0xb0>
 80014e2:	2000      	movs	r0, #0
 80014e4:	e7f7      	b.n	80014d6 <__swsetup_r+0xba>
 80014e6:	bf00      	nop
 80014e8:	20000000 	.word	0x20000000
 80014ec:	080028bc 	.word	0x080028bc
 80014f0:	080028dc 	.word	0x080028dc
 80014f4:	0800289c 	.word	0x0800289c

080014f8 <__sflush_r>:
 80014f8:	898a      	ldrh	r2, [r1, #12]
 80014fa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80014fc:	4605      	mov	r5, r0
 80014fe:	0710      	lsls	r0, r2, #28
 8001500:	460c      	mov	r4, r1
 8001502:	d457      	bmi.n	80015b4 <__sflush_r+0xbc>
 8001504:	684b      	ldr	r3, [r1, #4]
 8001506:	2b00      	cmp	r3, #0
 8001508:	dc04      	bgt.n	8001514 <__sflush_r+0x1c>
 800150a:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800150c:	2b00      	cmp	r3, #0
 800150e:	dc01      	bgt.n	8001514 <__sflush_r+0x1c>
 8001510:	2000      	movs	r0, #0
 8001512:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001514:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8001516:	2e00      	cmp	r6, #0
 8001518:	d0fa      	beq.n	8001510 <__sflush_r+0x18>
 800151a:	2300      	movs	r3, #0
 800151c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8001520:	682f      	ldr	r7, [r5, #0]
 8001522:	602b      	str	r3, [r5, #0]
 8001524:	d032      	beq.n	800158c <__sflush_r+0x94>
 8001526:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8001528:	89a3      	ldrh	r3, [r4, #12]
 800152a:	075a      	lsls	r2, r3, #29
 800152c:	d505      	bpl.n	800153a <__sflush_r+0x42>
 800152e:	6863      	ldr	r3, [r4, #4]
 8001530:	1ac0      	subs	r0, r0, r3
 8001532:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8001534:	b10b      	cbz	r3, 800153a <__sflush_r+0x42>
 8001536:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001538:	1ac0      	subs	r0, r0, r3
 800153a:	2300      	movs	r3, #0
 800153c:	4602      	mov	r2, r0
 800153e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8001540:	6a21      	ldr	r1, [r4, #32]
 8001542:	4628      	mov	r0, r5
 8001544:	47b0      	blx	r6
 8001546:	1c43      	adds	r3, r0, #1
 8001548:	89a3      	ldrh	r3, [r4, #12]
 800154a:	d106      	bne.n	800155a <__sflush_r+0x62>
 800154c:	6829      	ldr	r1, [r5, #0]
 800154e:	291d      	cmp	r1, #29
 8001550:	d82c      	bhi.n	80015ac <__sflush_r+0xb4>
 8001552:	4a29      	ldr	r2, [pc, #164]	; (80015f8 <__sflush_r+0x100>)
 8001554:	40ca      	lsrs	r2, r1
 8001556:	07d6      	lsls	r6, r2, #31
 8001558:	d528      	bpl.n	80015ac <__sflush_r+0xb4>
 800155a:	2200      	movs	r2, #0
 800155c:	6062      	str	r2, [r4, #4]
 800155e:	04d9      	lsls	r1, r3, #19
 8001560:	6922      	ldr	r2, [r4, #16]
 8001562:	6022      	str	r2, [r4, #0]
 8001564:	d504      	bpl.n	8001570 <__sflush_r+0x78>
 8001566:	1c42      	adds	r2, r0, #1
 8001568:	d101      	bne.n	800156e <__sflush_r+0x76>
 800156a:	682b      	ldr	r3, [r5, #0]
 800156c:	b903      	cbnz	r3, 8001570 <__sflush_r+0x78>
 800156e:	6560      	str	r0, [r4, #84]	; 0x54
 8001570:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001572:	602f      	str	r7, [r5, #0]
 8001574:	2900      	cmp	r1, #0
 8001576:	d0cb      	beq.n	8001510 <__sflush_r+0x18>
 8001578:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800157c:	4299      	cmp	r1, r3
 800157e:	d002      	beq.n	8001586 <__sflush_r+0x8e>
 8001580:	4628      	mov	r0, r5
 8001582:	f000 f9d5 	bl	8001930 <_free_r>
 8001586:	2000      	movs	r0, #0
 8001588:	6360      	str	r0, [r4, #52]	; 0x34
 800158a:	e7c2      	b.n	8001512 <__sflush_r+0x1a>
 800158c:	6a21      	ldr	r1, [r4, #32]
 800158e:	2301      	movs	r3, #1
 8001590:	4628      	mov	r0, r5
 8001592:	47b0      	blx	r6
 8001594:	1c41      	adds	r1, r0, #1
 8001596:	d1c7      	bne.n	8001528 <__sflush_r+0x30>
 8001598:	682b      	ldr	r3, [r5, #0]
 800159a:	2b00      	cmp	r3, #0
 800159c:	d0c4      	beq.n	8001528 <__sflush_r+0x30>
 800159e:	2b1d      	cmp	r3, #29
 80015a0:	d001      	beq.n	80015a6 <__sflush_r+0xae>
 80015a2:	2b16      	cmp	r3, #22
 80015a4:	d101      	bne.n	80015aa <__sflush_r+0xb2>
 80015a6:	602f      	str	r7, [r5, #0]
 80015a8:	e7b2      	b.n	8001510 <__sflush_r+0x18>
 80015aa:	89a3      	ldrh	r3, [r4, #12]
 80015ac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80015b0:	81a3      	strh	r3, [r4, #12]
 80015b2:	e7ae      	b.n	8001512 <__sflush_r+0x1a>
 80015b4:	690f      	ldr	r7, [r1, #16]
 80015b6:	2f00      	cmp	r7, #0
 80015b8:	d0aa      	beq.n	8001510 <__sflush_r+0x18>
 80015ba:	0793      	lsls	r3, r2, #30
 80015bc:	680e      	ldr	r6, [r1, #0]
 80015be:	bf08      	it	eq
 80015c0:	694b      	ldreq	r3, [r1, #20]
 80015c2:	600f      	str	r7, [r1, #0]
 80015c4:	bf18      	it	ne
 80015c6:	2300      	movne	r3, #0
 80015c8:	1bf6      	subs	r6, r6, r7
 80015ca:	608b      	str	r3, [r1, #8]
 80015cc:	2e00      	cmp	r6, #0
 80015ce:	dd9f      	ble.n	8001510 <__sflush_r+0x18>
 80015d0:	6a21      	ldr	r1, [r4, #32]
 80015d2:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 80015d6:	4633      	mov	r3, r6
 80015d8:	463a      	mov	r2, r7
 80015da:	4628      	mov	r0, r5
 80015dc:	47e0      	blx	ip
 80015de:	2800      	cmp	r0, #0
 80015e0:	dc06      	bgt.n	80015f0 <__sflush_r+0xf8>
 80015e2:	89a3      	ldrh	r3, [r4, #12]
 80015e4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80015e8:	81a3      	strh	r3, [r4, #12]
 80015ea:	f04f 30ff 	mov.w	r0, #4294967295
 80015ee:	e790      	b.n	8001512 <__sflush_r+0x1a>
 80015f0:	4407      	add	r7, r0
 80015f2:	1a36      	subs	r6, r6, r0
 80015f4:	e7ea      	b.n	80015cc <__sflush_r+0xd4>
 80015f6:	bf00      	nop
 80015f8:	20400001 	.word	0x20400001

080015fc <_fflush_r>:
 80015fc:	b538      	push	{r3, r4, r5, lr}
 80015fe:	690b      	ldr	r3, [r1, #16]
 8001600:	4605      	mov	r5, r0
 8001602:	460c      	mov	r4, r1
 8001604:	b913      	cbnz	r3, 800160c <_fflush_r+0x10>
 8001606:	2500      	movs	r5, #0
 8001608:	4628      	mov	r0, r5
 800160a:	bd38      	pop	{r3, r4, r5, pc}
 800160c:	b118      	cbz	r0, 8001616 <_fflush_r+0x1a>
 800160e:	6983      	ldr	r3, [r0, #24]
 8001610:	b90b      	cbnz	r3, 8001616 <_fflush_r+0x1a>
 8001612:	f000 f887 	bl	8001724 <__sinit>
 8001616:	4b14      	ldr	r3, [pc, #80]	; (8001668 <_fflush_r+0x6c>)
 8001618:	429c      	cmp	r4, r3
 800161a:	d11b      	bne.n	8001654 <_fflush_r+0x58>
 800161c:	686c      	ldr	r4, [r5, #4]
 800161e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001622:	2b00      	cmp	r3, #0
 8001624:	d0ef      	beq.n	8001606 <_fflush_r+0xa>
 8001626:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8001628:	07d0      	lsls	r0, r2, #31
 800162a:	d404      	bmi.n	8001636 <_fflush_r+0x3a>
 800162c:	0599      	lsls	r1, r3, #22
 800162e:	d402      	bmi.n	8001636 <_fflush_r+0x3a>
 8001630:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001632:	f000 f915 	bl	8001860 <__retarget_lock_acquire_recursive>
 8001636:	4628      	mov	r0, r5
 8001638:	4621      	mov	r1, r4
 800163a:	f7ff ff5d 	bl	80014f8 <__sflush_r>
 800163e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8001640:	07da      	lsls	r2, r3, #31
 8001642:	4605      	mov	r5, r0
 8001644:	d4e0      	bmi.n	8001608 <_fflush_r+0xc>
 8001646:	89a3      	ldrh	r3, [r4, #12]
 8001648:	059b      	lsls	r3, r3, #22
 800164a:	d4dd      	bmi.n	8001608 <_fflush_r+0xc>
 800164c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800164e:	f000 f908 	bl	8001862 <__retarget_lock_release_recursive>
 8001652:	e7d9      	b.n	8001608 <_fflush_r+0xc>
 8001654:	4b05      	ldr	r3, [pc, #20]	; (800166c <_fflush_r+0x70>)
 8001656:	429c      	cmp	r4, r3
 8001658:	d101      	bne.n	800165e <_fflush_r+0x62>
 800165a:	68ac      	ldr	r4, [r5, #8]
 800165c:	e7df      	b.n	800161e <_fflush_r+0x22>
 800165e:	4b04      	ldr	r3, [pc, #16]	; (8001670 <_fflush_r+0x74>)
 8001660:	429c      	cmp	r4, r3
 8001662:	bf08      	it	eq
 8001664:	68ec      	ldreq	r4, [r5, #12]
 8001666:	e7da      	b.n	800161e <_fflush_r+0x22>
 8001668:	080028bc 	.word	0x080028bc
 800166c:	080028dc 	.word	0x080028dc
 8001670:	0800289c 	.word	0x0800289c

08001674 <std>:
 8001674:	2300      	movs	r3, #0
 8001676:	b510      	push	{r4, lr}
 8001678:	4604      	mov	r4, r0
 800167a:	e9c0 3300 	strd	r3, r3, [r0]
 800167e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8001682:	6083      	str	r3, [r0, #8]
 8001684:	8181      	strh	r1, [r0, #12]
 8001686:	6643      	str	r3, [r0, #100]	; 0x64
 8001688:	81c2      	strh	r2, [r0, #14]
 800168a:	6183      	str	r3, [r0, #24]
 800168c:	4619      	mov	r1, r3
 800168e:	2208      	movs	r2, #8
 8001690:	305c      	adds	r0, #92	; 0x5c
 8001692:	f7ff fddb 	bl	800124c <memset>
 8001696:	4b05      	ldr	r3, [pc, #20]	; (80016ac <std+0x38>)
 8001698:	6263      	str	r3, [r4, #36]	; 0x24
 800169a:	4b05      	ldr	r3, [pc, #20]	; (80016b0 <std+0x3c>)
 800169c:	62a3      	str	r3, [r4, #40]	; 0x28
 800169e:	4b05      	ldr	r3, [pc, #20]	; (80016b4 <std+0x40>)
 80016a0:	62e3      	str	r3, [r4, #44]	; 0x2c
 80016a2:	4b05      	ldr	r3, [pc, #20]	; (80016b8 <std+0x44>)
 80016a4:	6224      	str	r4, [r4, #32]
 80016a6:	6323      	str	r3, [r4, #48]	; 0x30
 80016a8:	bd10      	pop	{r4, pc}
 80016aa:	bf00      	nop
 80016ac:	080020e5 	.word	0x080020e5
 80016b0:	08002107 	.word	0x08002107
 80016b4:	0800213f 	.word	0x0800213f
 80016b8:	08002163 	.word	0x08002163

080016bc <_cleanup_r>:
 80016bc:	4901      	ldr	r1, [pc, #4]	; (80016c4 <_cleanup_r+0x8>)
 80016be:	f000 b8af 	b.w	8001820 <_fwalk_reent>
 80016c2:	bf00      	nop
 80016c4:	080015fd 	.word	0x080015fd

080016c8 <__sfmoreglue>:
 80016c8:	b570      	push	{r4, r5, r6, lr}
 80016ca:	2268      	movs	r2, #104	; 0x68
 80016cc:	1e4d      	subs	r5, r1, #1
 80016ce:	4355      	muls	r5, r2
 80016d0:	460e      	mov	r6, r1
 80016d2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80016d6:	f000 f995 	bl	8001a04 <_malloc_r>
 80016da:	4604      	mov	r4, r0
 80016dc:	b140      	cbz	r0, 80016f0 <__sfmoreglue+0x28>
 80016de:	2100      	movs	r1, #0
 80016e0:	e9c0 1600 	strd	r1, r6, [r0]
 80016e4:	300c      	adds	r0, #12
 80016e6:	60a0      	str	r0, [r4, #8]
 80016e8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80016ec:	f7ff fdae 	bl	800124c <memset>
 80016f0:	4620      	mov	r0, r4
 80016f2:	bd70      	pop	{r4, r5, r6, pc}

080016f4 <__sfp_lock_acquire>:
 80016f4:	4801      	ldr	r0, [pc, #4]	; (80016fc <__sfp_lock_acquire+0x8>)
 80016f6:	f000 b8b3 	b.w	8001860 <__retarget_lock_acquire_recursive>
 80016fa:	bf00      	nop
 80016fc:	2000008d 	.word	0x2000008d

08001700 <__sfp_lock_release>:
 8001700:	4801      	ldr	r0, [pc, #4]	; (8001708 <__sfp_lock_release+0x8>)
 8001702:	f000 b8ae 	b.w	8001862 <__retarget_lock_release_recursive>
 8001706:	bf00      	nop
 8001708:	2000008d 	.word	0x2000008d

0800170c <__sinit_lock_acquire>:
 800170c:	4801      	ldr	r0, [pc, #4]	; (8001714 <__sinit_lock_acquire+0x8>)
 800170e:	f000 b8a7 	b.w	8001860 <__retarget_lock_acquire_recursive>
 8001712:	bf00      	nop
 8001714:	2000008e 	.word	0x2000008e

08001718 <__sinit_lock_release>:
 8001718:	4801      	ldr	r0, [pc, #4]	; (8001720 <__sinit_lock_release+0x8>)
 800171a:	f000 b8a2 	b.w	8001862 <__retarget_lock_release_recursive>
 800171e:	bf00      	nop
 8001720:	2000008e 	.word	0x2000008e

08001724 <__sinit>:
 8001724:	b510      	push	{r4, lr}
 8001726:	4604      	mov	r4, r0
 8001728:	f7ff fff0 	bl	800170c <__sinit_lock_acquire>
 800172c:	69a3      	ldr	r3, [r4, #24]
 800172e:	b11b      	cbz	r3, 8001738 <__sinit+0x14>
 8001730:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001734:	f7ff bff0 	b.w	8001718 <__sinit_lock_release>
 8001738:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800173c:	6523      	str	r3, [r4, #80]	; 0x50
 800173e:	4b13      	ldr	r3, [pc, #76]	; (800178c <__sinit+0x68>)
 8001740:	4a13      	ldr	r2, [pc, #76]	; (8001790 <__sinit+0x6c>)
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	62a2      	str	r2, [r4, #40]	; 0x28
 8001746:	42a3      	cmp	r3, r4
 8001748:	bf04      	itt	eq
 800174a:	2301      	moveq	r3, #1
 800174c:	61a3      	streq	r3, [r4, #24]
 800174e:	4620      	mov	r0, r4
 8001750:	f000 f820 	bl	8001794 <__sfp>
 8001754:	6060      	str	r0, [r4, #4]
 8001756:	4620      	mov	r0, r4
 8001758:	f000 f81c 	bl	8001794 <__sfp>
 800175c:	60a0      	str	r0, [r4, #8]
 800175e:	4620      	mov	r0, r4
 8001760:	f000 f818 	bl	8001794 <__sfp>
 8001764:	2200      	movs	r2, #0
 8001766:	60e0      	str	r0, [r4, #12]
 8001768:	2104      	movs	r1, #4
 800176a:	6860      	ldr	r0, [r4, #4]
 800176c:	f7ff ff82 	bl	8001674 <std>
 8001770:	68a0      	ldr	r0, [r4, #8]
 8001772:	2201      	movs	r2, #1
 8001774:	2109      	movs	r1, #9
 8001776:	f7ff ff7d 	bl	8001674 <std>
 800177a:	68e0      	ldr	r0, [r4, #12]
 800177c:	2202      	movs	r2, #2
 800177e:	2112      	movs	r1, #18
 8001780:	f7ff ff78 	bl	8001674 <std>
 8001784:	2301      	movs	r3, #1
 8001786:	61a3      	str	r3, [r4, #24]
 8001788:	e7d2      	b.n	8001730 <__sinit+0xc>
 800178a:	bf00      	nop
 800178c:	08002898 	.word	0x08002898
 8001790:	080016bd 	.word	0x080016bd

08001794 <__sfp>:
 8001794:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001796:	4607      	mov	r7, r0
 8001798:	f7ff ffac 	bl	80016f4 <__sfp_lock_acquire>
 800179c:	4b1e      	ldr	r3, [pc, #120]	; (8001818 <__sfp+0x84>)
 800179e:	681e      	ldr	r6, [r3, #0]
 80017a0:	69b3      	ldr	r3, [r6, #24]
 80017a2:	b913      	cbnz	r3, 80017aa <__sfp+0x16>
 80017a4:	4630      	mov	r0, r6
 80017a6:	f7ff ffbd 	bl	8001724 <__sinit>
 80017aa:	3648      	adds	r6, #72	; 0x48
 80017ac:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80017b0:	3b01      	subs	r3, #1
 80017b2:	d503      	bpl.n	80017bc <__sfp+0x28>
 80017b4:	6833      	ldr	r3, [r6, #0]
 80017b6:	b30b      	cbz	r3, 80017fc <__sfp+0x68>
 80017b8:	6836      	ldr	r6, [r6, #0]
 80017ba:	e7f7      	b.n	80017ac <__sfp+0x18>
 80017bc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80017c0:	b9d5      	cbnz	r5, 80017f8 <__sfp+0x64>
 80017c2:	4b16      	ldr	r3, [pc, #88]	; (800181c <__sfp+0x88>)
 80017c4:	60e3      	str	r3, [r4, #12]
 80017c6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80017ca:	6665      	str	r5, [r4, #100]	; 0x64
 80017cc:	f000 f847 	bl	800185e <__retarget_lock_init_recursive>
 80017d0:	f7ff ff96 	bl	8001700 <__sfp_lock_release>
 80017d4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80017d8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80017dc:	6025      	str	r5, [r4, #0]
 80017de:	61a5      	str	r5, [r4, #24]
 80017e0:	2208      	movs	r2, #8
 80017e2:	4629      	mov	r1, r5
 80017e4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80017e8:	f7ff fd30 	bl	800124c <memset>
 80017ec:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80017f0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80017f4:	4620      	mov	r0, r4
 80017f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80017f8:	3468      	adds	r4, #104	; 0x68
 80017fa:	e7d9      	b.n	80017b0 <__sfp+0x1c>
 80017fc:	2104      	movs	r1, #4
 80017fe:	4638      	mov	r0, r7
 8001800:	f7ff ff62 	bl	80016c8 <__sfmoreglue>
 8001804:	4604      	mov	r4, r0
 8001806:	6030      	str	r0, [r6, #0]
 8001808:	2800      	cmp	r0, #0
 800180a:	d1d5      	bne.n	80017b8 <__sfp+0x24>
 800180c:	f7ff ff78 	bl	8001700 <__sfp_lock_release>
 8001810:	230c      	movs	r3, #12
 8001812:	603b      	str	r3, [r7, #0]
 8001814:	e7ee      	b.n	80017f4 <__sfp+0x60>
 8001816:	bf00      	nop
 8001818:	08002898 	.word	0x08002898
 800181c:	ffff0001 	.word	0xffff0001

08001820 <_fwalk_reent>:
 8001820:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001824:	4606      	mov	r6, r0
 8001826:	4688      	mov	r8, r1
 8001828:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800182c:	2700      	movs	r7, #0
 800182e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8001832:	f1b9 0901 	subs.w	r9, r9, #1
 8001836:	d505      	bpl.n	8001844 <_fwalk_reent+0x24>
 8001838:	6824      	ldr	r4, [r4, #0]
 800183a:	2c00      	cmp	r4, #0
 800183c:	d1f7      	bne.n	800182e <_fwalk_reent+0xe>
 800183e:	4638      	mov	r0, r7
 8001840:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001844:	89ab      	ldrh	r3, [r5, #12]
 8001846:	2b01      	cmp	r3, #1
 8001848:	d907      	bls.n	800185a <_fwalk_reent+0x3a>
 800184a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800184e:	3301      	adds	r3, #1
 8001850:	d003      	beq.n	800185a <_fwalk_reent+0x3a>
 8001852:	4629      	mov	r1, r5
 8001854:	4630      	mov	r0, r6
 8001856:	47c0      	blx	r8
 8001858:	4307      	orrs	r7, r0
 800185a:	3568      	adds	r5, #104	; 0x68
 800185c:	e7e9      	b.n	8001832 <_fwalk_reent+0x12>

0800185e <__retarget_lock_init_recursive>:
 800185e:	4770      	bx	lr

08001860 <__retarget_lock_acquire_recursive>:
 8001860:	4770      	bx	lr

08001862 <__retarget_lock_release_recursive>:
 8001862:	4770      	bx	lr

08001864 <__swhatbuf_r>:
 8001864:	b570      	push	{r4, r5, r6, lr}
 8001866:	460e      	mov	r6, r1
 8001868:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800186c:	2900      	cmp	r1, #0
 800186e:	b096      	sub	sp, #88	; 0x58
 8001870:	4614      	mov	r4, r2
 8001872:	461d      	mov	r5, r3
 8001874:	da08      	bge.n	8001888 <__swhatbuf_r+0x24>
 8001876:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800187a:	2200      	movs	r2, #0
 800187c:	602a      	str	r2, [r5, #0]
 800187e:	061a      	lsls	r2, r3, #24
 8001880:	d410      	bmi.n	80018a4 <__swhatbuf_r+0x40>
 8001882:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001886:	e00e      	b.n	80018a6 <__swhatbuf_r+0x42>
 8001888:	466a      	mov	r2, sp
 800188a:	f000 fc91 	bl	80021b0 <_fstat_r>
 800188e:	2800      	cmp	r0, #0
 8001890:	dbf1      	blt.n	8001876 <__swhatbuf_r+0x12>
 8001892:	9a01      	ldr	r2, [sp, #4]
 8001894:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8001898:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800189c:	425a      	negs	r2, r3
 800189e:	415a      	adcs	r2, r3
 80018a0:	602a      	str	r2, [r5, #0]
 80018a2:	e7ee      	b.n	8001882 <__swhatbuf_r+0x1e>
 80018a4:	2340      	movs	r3, #64	; 0x40
 80018a6:	2000      	movs	r0, #0
 80018a8:	6023      	str	r3, [r4, #0]
 80018aa:	b016      	add	sp, #88	; 0x58
 80018ac:	bd70      	pop	{r4, r5, r6, pc}
	...

080018b0 <__smakebuf_r>:
 80018b0:	898b      	ldrh	r3, [r1, #12]
 80018b2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80018b4:	079d      	lsls	r5, r3, #30
 80018b6:	4606      	mov	r6, r0
 80018b8:	460c      	mov	r4, r1
 80018ba:	d507      	bpl.n	80018cc <__smakebuf_r+0x1c>
 80018bc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80018c0:	6023      	str	r3, [r4, #0]
 80018c2:	6123      	str	r3, [r4, #16]
 80018c4:	2301      	movs	r3, #1
 80018c6:	6163      	str	r3, [r4, #20]
 80018c8:	b002      	add	sp, #8
 80018ca:	bd70      	pop	{r4, r5, r6, pc}
 80018cc:	ab01      	add	r3, sp, #4
 80018ce:	466a      	mov	r2, sp
 80018d0:	f7ff ffc8 	bl	8001864 <__swhatbuf_r>
 80018d4:	9900      	ldr	r1, [sp, #0]
 80018d6:	4605      	mov	r5, r0
 80018d8:	4630      	mov	r0, r6
 80018da:	f000 f893 	bl	8001a04 <_malloc_r>
 80018de:	b948      	cbnz	r0, 80018f4 <__smakebuf_r+0x44>
 80018e0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80018e4:	059a      	lsls	r2, r3, #22
 80018e6:	d4ef      	bmi.n	80018c8 <__smakebuf_r+0x18>
 80018e8:	f023 0303 	bic.w	r3, r3, #3
 80018ec:	f043 0302 	orr.w	r3, r3, #2
 80018f0:	81a3      	strh	r3, [r4, #12]
 80018f2:	e7e3      	b.n	80018bc <__smakebuf_r+0xc>
 80018f4:	4b0d      	ldr	r3, [pc, #52]	; (800192c <__smakebuf_r+0x7c>)
 80018f6:	62b3      	str	r3, [r6, #40]	; 0x28
 80018f8:	89a3      	ldrh	r3, [r4, #12]
 80018fa:	6020      	str	r0, [r4, #0]
 80018fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001900:	81a3      	strh	r3, [r4, #12]
 8001902:	9b00      	ldr	r3, [sp, #0]
 8001904:	6163      	str	r3, [r4, #20]
 8001906:	9b01      	ldr	r3, [sp, #4]
 8001908:	6120      	str	r0, [r4, #16]
 800190a:	b15b      	cbz	r3, 8001924 <__smakebuf_r+0x74>
 800190c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001910:	4630      	mov	r0, r6
 8001912:	f000 fc5f 	bl	80021d4 <_isatty_r>
 8001916:	b128      	cbz	r0, 8001924 <__smakebuf_r+0x74>
 8001918:	89a3      	ldrh	r3, [r4, #12]
 800191a:	f023 0303 	bic.w	r3, r3, #3
 800191e:	f043 0301 	orr.w	r3, r3, #1
 8001922:	81a3      	strh	r3, [r4, #12]
 8001924:	89a0      	ldrh	r0, [r4, #12]
 8001926:	4305      	orrs	r5, r0
 8001928:	81a5      	strh	r5, [r4, #12]
 800192a:	e7cd      	b.n	80018c8 <__smakebuf_r+0x18>
 800192c:	080016bd 	.word	0x080016bd

08001930 <_free_r>:
 8001930:	b538      	push	{r3, r4, r5, lr}
 8001932:	4605      	mov	r5, r0
 8001934:	2900      	cmp	r1, #0
 8001936:	d041      	beq.n	80019bc <_free_r+0x8c>
 8001938:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800193c:	1f0c      	subs	r4, r1, #4
 800193e:	2b00      	cmp	r3, #0
 8001940:	bfb8      	it	lt
 8001942:	18e4      	addlt	r4, r4, r3
 8001944:	f000 fc68 	bl	8002218 <__malloc_lock>
 8001948:	4a1d      	ldr	r2, [pc, #116]	; (80019c0 <_free_r+0x90>)
 800194a:	6813      	ldr	r3, [r2, #0]
 800194c:	b933      	cbnz	r3, 800195c <_free_r+0x2c>
 800194e:	6063      	str	r3, [r4, #4]
 8001950:	6014      	str	r4, [r2, #0]
 8001952:	4628      	mov	r0, r5
 8001954:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001958:	f000 bc64 	b.w	8002224 <__malloc_unlock>
 800195c:	42a3      	cmp	r3, r4
 800195e:	d908      	bls.n	8001972 <_free_r+0x42>
 8001960:	6820      	ldr	r0, [r4, #0]
 8001962:	1821      	adds	r1, r4, r0
 8001964:	428b      	cmp	r3, r1
 8001966:	bf01      	itttt	eq
 8001968:	6819      	ldreq	r1, [r3, #0]
 800196a:	685b      	ldreq	r3, [r3, #4]
 800196c:	1809      	addeq	r1, r1, r0
 800196e:	6021      	streq	r1, [r4, #0]
 8001970:	e7ed      	b.n	800194e <_free_r+0x1e>
 8001972:	461a      	mov	r2, r3
 8001974:	685b      	ldr	r3, [r3, #4]
 8001976:	b10b      	cbz	r3, 800197c <_free_r+0x4c>
 8001978:	42a3      	cmp	r3, r4
 800197a:	d9fa      	bls.n	8001972 <_free_r+0x42>
 800197c:	6811      	ldr	r1, [r2, #0]
 800197e:	1850      	adds	r0, r2, r1
 8001980:	42a0      	cmp	r0, r4
 8001982:	d10b      	bne.n	800199c <_free_r+0x6c>
 8001984:	6820      	ldr	r0, [r4, #0]
 8001986:	4401      	add	r1, r0
 8001988:	1850      	adds	r0, r2, r1
 800198a:	4283      	cmp	r3, r0
 800198c:	6011      	str	r1, [r2, #0]
 800198e:	d1e0      	bne.n	8001952 <_free_r+0x22>
 8001990:	6818      	ldr	r0, [r3, #0]
 8001992:	685b      	ldr	r3, [r3, #4]
 8001994:	6053      	str	r3, [r2, #4]
 8001996:	4401      	add	r1, r0
 8001998:	6011      	str	r1, [r2, #0]
 800199a:	e7da      	b.n	8001952 <_free_r+0x22>
 800199c:	d902      	bls.n	80019a4 <_free_r+0x74>
 800199e:	230c      	movs	r3, #12
 80019a0:	602b      	str	r3, [r5, #0]
 80019a2:	e7d6      	b.n	8001952 <_free_r+0x22>
 80019a4:	6820      	ldr	r0, [r4, #0]
 80019a6:	1821      	adds	r1, r4, r0
 80019a8:	428b      	cmp	r3, r1
 80019aa:	bf04      	itt	eq
 80019ac:	6819      	ldreq	r1, [r3, #0]
 80019ae:	685b      	ldreq	r3, [r3, #4]
 80019b0:	6063      	str	r3, [r4, #4]
 80019b2:	bf04      	itt	eq
 80019b4:	1809      	addeq	r1, r1, r0
 80019b6:	6021      	streq	r1, [r4, #0]
 80019b8:	6054      	str	r4, [r2, #4]
 80019ba:	e7ca      	b.n	8001952 <_free_r+0x22>
 80019bc:	bd38      	pop	{r3, r4, r5, pc}
 80019be:	bf00      	nop
 80019c0:	20000090 	.word	0x20000090

080019c4 <sbrk_aligned>:
 80019c4:	b570      	push	{r4, r5, r6, lr}
 80019c6:	4e0e      	ldr	r6, [pc, #56]	; (8001a00 <sbrk_aligned+0x3c>)
 80019c8:	460c      	mov	r4, r1
 80019ca:	6831      	ldr	r1, [r6, #0]
 80019cc:	4605      	mov	r5, r0
 80019ce:	b911      	cbnz	r1, 80019d6 <sbrk_aligned+0x12>
 80019d0:	f000 fb78 	bl	80020c4 <_sbrk_r>
 80019d4:	6030      	str	r0, [r6, #0]
 80019d6:	4621      	mov	r1, r4
 80019d8:	4628      	mov	r0, r5
 80019da:	f000 fb73 	bl	80020c4 <_sbrk_r>
 80019de:	1c43      	adds	r3, r0, #1
 80019e0:	d00a      	beq.n	80019f8 <sbrk_aligned+0x34>
 80019e2:	1cc4      	adds	r4, r0, #3
 80019e4:	f024 0403 	bic.w	r4, r4, #3
 80019e8:	42a0      	cmp	r0, r4
 80019ea:	d007      	beq.n	80019fc <sbrk_aligned+0x38>
 80019ec:	1a21      	subs	r1, r4, r0
 80019ee:	4628      	mov	r0, r5
 80019f0:	f000 fb68 	bl	80020c4 <_sbrk_r>
 80019f4:	3001      	adds	r0, #1
 80019f6:	d101      	bne.n	80019fc <sbrk_aligned+0x38>
 80019f8:	f04f 34ff 	mov.w	r4, #4294967295
 80019fc:	4620      	mov	r0, r4
 80019fe:	bd70      	pop	{r4, r5, r6, pc}
 8001a00:	20000094 	.word	0x20000094

08001a04 <_malloc_r>:
 8001a04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001a08:	1ccd      	adds	r5, r1, #3
 8001a0a:	f025 0503 	bic.w	r5, r5, #3
 8001a0e:	3508      	adds	r5, #8
 8001a10:	2d0c      	cmp	r5, #12
 8001a12:	bf38      	it	cc
 8001a14:	250c      	movcc	r5, #12
 8001a16:	2d00      	cmp	r5, #0
 8001a18:	4607      	mov	r7, r0
 8001a1a:	db01      	blt.n	8001a20 <_malloc_r+0x1c>
 8001a1c:	42a9      	cmp	r1, r5
 8001a1e:	d905      	bls.n	8001a2c <_malloc_r+0x28>
 8001a20:	230c      	movs	r3, #12
 8001a22:	603b      	str	r3, [r7, #0]
 8001a24:	2600      	movs	r6, #0
 8001a26:	4630      	mov	r0, r6
 8001a28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001a2c:	4e2e      	ldr	r6, [pc, #184]	; (8001ae8 <_malloc_r+0xe4>)
 8001a2e:	f000 fbf3 	bl	8002218 <__malloc_lock>
 8001a32:	6833      	ldr	r3, [r6, #0]
 8001a34:	461c      	mov	r4, r3
 8001a36:	bb34      	cbnz	r4, 8001a86 <_malloc_r+0x82>
 8001a38:	4629      	mov	r1, r5
 8001a3a:	4638      	mov	r0, r7
 8001a3c:	f7ff ffc2 	bl	80019c4 <sbrk_aligned>
 8001a40:	1c43      	adds	r3, r0, #1
 8001a42:	4604      	mov	r4, r0
 8001a44:	d14d      	bne.n	8001ae2 <_malloc_r+0xde>
 8001a46:	6834      	ldr	r4, [r6, #0]
 8001a48:	4626      	mov	r6, r4
 8001a4a:	2e00      	cmp	r6, #0
 8001a4c:	d140      	bne.n	8001ad0 <_malloc_r+0xcc>
 8001a4e:	6823      	ldr	r3, [r4, #0]
 8001a50:	4631      	mov	r1, r6
 8001a52:	4638      	mov	r0, r7
 8001a54:	eb04 0803 	add.w	r8, r4, r3
 8001a58:	f000 fb34 	bl	80020c4 <_sbrk_r>
 8001a5c:	4580      	cmp	r8, r0
 8001a5e:	d13a      	bne.n	8001ad6 <_malloc_r+0xd2>
 8001a60:	6821      	ldr	r1, [r4, #0]
 8001a62:	3503      	adds	r5, #3
 8001a64:	1a6d      	subs	r5, r5, r1
 8001a66:	f025 0503 	bic.w	r5, r5, #3
 8001a6a:	3508      	adds	r5, #8
 8001a6c:	2d0c      	cmp	r5, #12
 8001a6e:	bf38      	it	cc
 8001a70:	250c      	movcc	r5, #12
 8001a72:	4629      	mov	r1, r5
 8001a74:	4638      	mov	r0, r7
 8001a76:	f7ff ffa5 	bl	80019c4 <sbrk_aligned>
 8001a7a:	3001      	adds	r0, #1
 8001a7c:	d02b      	beq.n	8001ad6 <_malloc_r+0xd2>
 8001a7e:	6823      	ldr	r3, [r4, #0]
 8001a80:	442b      	add	r3, r5
 8001a82:	6023      	str	r3, [r4, #0]
 8001a84:	e00e      	b.n	8001aa4 <_malloc_r+0xa0>
 8001a86:	6822      	ldr	r2, [r4, #0]
 8001a88:	1b52      	subs	r2, r2, r5
 8001a8a:	d41e      	bmi.n	8001aca <_malloc_r+0xc6>
 8001a8c:	2a0b      	cmp	r2, #11
 8001a8e:	d916      	bls.n	8001abe <_malloc_r+0xba>
 8001a90:	1961      	adds	r1, r4, r5
 8001a92:	42a3      	cmp	r3, r4
 8001a94:	6025      	str	r5, [r4, #0]
 8001a96:	bf18      	it	ne
 8001a98:	6059      	strne	r1, [r3, #4]
 8001a9a:	6863      	ldr	r3, [r4, #4]
 8001a9c:	bf08      	it	eq
 8001a9e:	6031      	streq	r1, [r6, #0]
 8001aa0:	5162      	str	r2, [r4, r5]
 8001aa2:	604b      	str	r3, [r1, #4]
 8001aa4:	4638      	mov	r0, r7
 8001aa6:	f104 060b 	add.w	r6, r4, #11
 8001aaa:	f000 fbbb 	bl	8002224 <__malloc_unlock>
 8001aae:	f026 0607 	bic.w	r6, r6, #7
 8001ab2:	1d23      	adds	r3, r4, #4
 8001ab4:	1af2      	subs	r2, r6, r3
 8001ab6:	d0b6      	beq.n	8001a26 <_malloc_r+0x22>
 8001ab8:	1b9b      	subs	r3, r3, r6
 8001aba:	50a3      	str	r3, [r4, r2]
 8001abc:	e7b3      	b.n	8001a26 <_malloc_r+0x22>
 8001abe:	6862      	ldr	r2, [r4, #4]
 8001ac0:	42a3      	cmp	r3, r4
 8001ac2:	bf0c      	ite	eq
 8001ac4:	6032      	streq	r2, [r6, #0]
 8001ac6:	605a      	strne	r2, [r3, #4]
 8001ac8:	e7ec      	b.n	8001aa4 <_malloc_r+0xa0>
 8001aca:	4623      	mov	r3, r4
 8001acc:	6864      	ldr	r4, [r4, #4]
 8001ace:	e7b2      	b.n	8001a36 <_malloc_r+0x32>
 8001ad0:	4634      	mov	r4, r6
 8001ad2:	6876      	ldr	r6, [r6, #4]
 8001ad4:	e7b9      	b.n	8001a4a <_malloc_r+0x46>
 8001ad6:	230c      	movs	r3, #12
 8001ad8:	603b      	str	r3, [r7, #0]
 8001ada:	4638      	mov	r0, r7
 8001adc:	f000 fba2 	bl	8002224 <__malloc_unlock>
 8001ae0:	e7a1      	b.n	8001a26 <_malloc_r+0x22>
 8001ae2:	6025      	str	r5, [r4, #0]
 8001ae4:	e7de      	b.n	8001aa4 <_malloc_r+0xa0>
 8001ae6:	bf00      	nop
 8001ae8:	20000090 	.word	0x20000090

08001aec <__sfputc_r>:
 8001aec:	6893      	ldr	r3, [r2, #8]
 8001aee:	3b01      	subs	r3, #1
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	b410      	push	{r4}
 8001af4:	6093      	str	r3, [r2, #8]
 8001af6:	da07      	bge.n	8001b08 <__sfputc_r+0x1c>
 8001af8:	6994      	ldr	r4, [r2, #24]
 8001afa:	42a3      	cmp	r3, r4
 8001afc:	db01      	blt.n	8001b02 <__sfputc_r+0x16>
 8001afe:	290a      	cmp	r1, #10
 8001b00:	d102      	bne.n	8001b08 <__sfputc_r+0x1c>
 8001b02:	bc10      	pop	{r4}
 8001b04:	f7ff bc38 	b.w	8001378 <__swbuf_r>
 8001b08:	6813      	ldr	r3, [r2, #0]
 8001b0a:	1c58      	adds	r0, r3, #1
 8001b0c:	6010      	str	r0, [r2, #0]
 8001b0e:	7019      	strb	r1, [r3, #0]
 8001b10:	4608      	mov	r0, r1
 8001b12:	bc10      	pop	{r4}
 8001b14:	4770      	bx	lr

08001b16 <__sfputs_r>:
 8001b16:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001b18:	4606      	mov	r6, r0
 8001b1a:	460f      	mov	r7, r1
 8001b1c:	4614      	mov	r4, r2
 8001b1e:	18d5      	adds	r5, r2, r3
 8001b20:	42ac      	cmp	r4, r5
 8001b22:	d101      	bne.n	8001b28 <__sfputs_r+0x12>
 8001b24:	2000      	movs	r0, #0
 8001b26:	e007      	b.n	8001b38 <__sfputs_r+0x22>
 8001b28:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001b2c:	463a      	mov	r2, r7
 8001b2e:	4630      	mov	r0, r6
 8001b30:	f7ff ffdc 	bl	8001aec <__sfputc_r>
 8001b34:	1c43      	adds	r3, r0, #1
 8001b36:	d1f3      	bne.n	8001b20 <__sfputs_r+0xa>
 8001b38:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08001b3c <_vfiprintf_r>:
 8001b3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001b40:	460d      	mov	r5, r1
 8001b42:	b09d      	sub	sp, #116	; 0x74
 8001b44:	4614      	mov	r4, r2
 8001b46:	4698      	mov	r8, r3
 8001b48:	4606      	mov	r6, r0
 8001b4a:	b118      	cbz	r0, 8001b54 <_vfiprintf_r+0x18>
 8001b4c:	6983      	ldr	r3, [r0, #24]
 8001b4e:	b90b      	cbnz	r3, 8001b54 <_vfiprintf_r+0x18>
 8001b50:	f7ff fde8 	bl	8001724 <__sinit>
 8001b54:	4b89      	ldr	r3, [pc, #548]	; (8001d7c <_vfiprintf_r+0x240>)
 8001b56:	429d      	cmp	r5, r3
 8001b58:	d11b      	bne.n	8001b92 <_vfiprintf_r+0x56>
 8001b5a:	6875      	ldr	r5, [r6, #4]
 8001b5c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8001b5e:	07d9      	lsls	r1, r3, #31
 8001b60:	d405      	bmi.n	8001b6e <_vfiprintf_r+0x32>
 8001b62:	89ab      	ldrh	r3, [r5, #12]
 8001b64:	059a      	lsls	r2, r3, #22
 8001b66:	d402      	bmi.n	8001b6e <_vfiprintf_r+0x32>
 8001b68:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8001b6a:	f7ff fe79 	bl	8001860 <__retarget_lock_acquire_recursive>
 8001b6e:	89ab      	ldrh	r3, [r5, #12]
 8001b70:	071b      	lsls	r3, r3, #28
 8001b72:	d501      	bpl.n	8001b78 <_vfiprintf_r+0x3c>
 8001b74:	692b      	ldr	r3, [r5, #16]
 8001b76:	b9eb      	cbnz	r3, 8001bb4 <_vfiprintf_r+0x78>
 8001b78:	4629      	mov	r1, r5
 8001b7a:	4630      	mov	r0, r6
 8001b7c:	f7ff fc4e 	bl	800141c <__swsetup_r>
 8001b80:	b1c0      	cbz	r0, 8001bb4 <_vfiprintf_r+0x78>
 8001b82:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8001b84:	07dc      	lsls	r4, r3, #31
 8001b86:	d50e      	bpl.n	8001ba6 <_vfiprintf_r+0x6a>
 8001b88:	f04f 30ff 	mov.w	r0, #4294967295
 8001b8c:	b01d      	add	sp, #116	; 0x74
 8001b8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001b92:	4b7b      	ldr	r3, [pc, #492]	; (8001d80 <_vfiprintf_r+0x244>)
 8001b94:	429d      	cmp	r5, r3
 8001b96:	d101      	bne.n	8001b9c <_vfiprintf_r+0x60>
 8001b98:	68b5      	ldr	r5, [r6, #8]
 8001b9a:	e7df      	b.n	8001b5c <_vfiprintf_r+0x20>
 8001b9c:	4b79      	ldr	r3, [pc, #484]	; (8001d84 <_vfiprintf_r+0x248>)
 8001b9e:	429d      	cmp	r5, r3
 8001ba0:	bf08      	it	eq
 8001ba2:	68f5      	ldreq	r5, [r6, #12]
 8001ba4:	e7da      	b.n	8001b5c <_vfiprintf_r+0x20>
 8001ba6:	89ab      	ldrh	r3, [r5, #12]
 8001ba8:	0598      	lsls	r0, r3, #22
 8001baa:	d4ed      	bmi.n	8001b88 <_vfiprintf_r+0x4c>
 8001bac:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8001bae:	f7ff fe58 	bl	8001862 <__retarget_lock_release_recursive>
 8001bb2:	e7e9      	b.n	8001b88 <_vfiprintf_r+0x4c>
 8001bb4:	2300      	movs	r3, #0
 8001bb6:	9309      	str	r3, [sp, #36]	; 0x24
 8001bb8:	2320      	movs	r3, #32
 8001bba:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8001bbe:	f8cd 800c 	str.w	r8, [sp, #12]
 8001bc2:	2330      	movs	r3, #48	; 0x30
 8001bc4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8001d88 <_vfiprintf_r+0x24c>
 8001bc8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8001bcc:	f04f 0901 	mov.w	r9, #1
 8001bd0:	4623      	mov	r3, r4
 8001bd2:	469a      	mov	sl, r3
 8001bd4:	f813 2b01 	ldrb.w	r2, [r3], #1
 8001bd8:	b10a      	cbz	r2, 8001bde <_vfiprintf_r+0xa2>
 8001bda:	2a25      	cmp	r2, #37	; 0x25
 8001bdc:	d1f9      	bne.n	8001bd2 <_vfiprintf_r+0x96>
 8001bde:	ebba 0b04 	subs.w	fp, sl, r4
 8001be2:	d00b      	beq.n	8001bfc <_vfiprintf_r+0xc0>
 8001be4:	465b      	mov	r3, fp
 8001be6:	4622      	mov	r2, r4
 8001be8:	4629      	mov	r1, r5
 8001bea:	4630      	mov	r0, r6
 8001bec:	f7ff ff93 	bl	8001b16 <__sfputs_r>
 8001bf0:	3001      	adds	r0, #1
 8001bf2:	f000 80aa 	beq.w	8001d4a <_vfiprintf_r+0x20e>
 8001bf6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8001bf8:	445a      	add	r2, fp
 8001bfa:	9209      	str	r2, [sp, #36]	; 0x24
 8001bfc:	f89a 3000 	ldrb.w	r3, [sl]
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	f000 80a2 	beq.w	8001d4a <_vfiprintf_r+0x20e>
 8001c06:	2300      	movs	r3, #0
 8001c08:	f04f 32ff 	mov.w	r2, #4294967295
 8001c0c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8001c10:	f10a 0a01 	add.w	sl, sl, #1
 8001c14:	9304      	str	r3, [sp, #16]
 8001c16:	9307      	str	r3, [sp, #28]
 8001c18:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8001c1c:	931a      	str	r3, [sp, #104]	; 0x68
 8001c1e:	4654      	mov	r4, sl
 8001c20:	2205      	movs	r2, #5
 8001c22:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001c26:	4858      	ldr	r0, [pc, #352]	; (8001d88 <_vfiprintf_r+0x24c>)
 8001c28:	f7fe faea 	bl	8000200 <memchr>
 8001c2c:	9a04      	ldr	r2, [sp, #16]
 8001c2e:	b9d8      	cbnz	r0, 8001c68 <_vfiprintf_r+0x12c>
 8001c30:	06d1      	lsls	r1, r2, #27
 8001c32:	bf44      	itt	mi
 8001c34:	2320      	movmi	r3, #32
 8001c36:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8001c3a:	0713      	lsls	r3, r2, #28
 8001c3c:	bf44      	itt	mi
 8001c3e:	232b      	movmi	r3, #43	; 0x2b
 8001c40:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8001c44:	f89a 3000 	ldrb.w	r3, [sl]
 8001c48:	2b2a      	cmp	r3, #42	; 0x2a
 8001c4a:	d015      	beq.n	8001c78 <_vfiprintf_r+0x13c>
 8001c4c:	9a07      	ldr	r2, [sp, #28]
 8001c4e:	4654      	mov	r4, sl
 8001c50:	2000      	movs	r0, #0
 8001c52:	f04f 0c0a 	mov.w	ip, #10
 8001c56:	4621      	mov	r1, r4
 8001c58:	f811 3b01 	ldrb.w	r3, [r1], #1
 8001c5c:	3b30      	subs	r3, #48	; 0x30
 8001c5e:	2b09      	cmp	r3, #9
 8001c60:	d94e      	bls.n	8001d00 <_vfiprintf_r+0x1c4>
 8001c62:	b1b0      	cbz	r0, 8001c92 <_vfiprintf_r+0x156>
 8001c64:	9207      	str	r2, [sp, #28]
 8001c66:	e014      	b.n	8001c92 <_vfiprintf_r+0x156>
 8001c68:	eba0 0308 	sub.w	r3, r0, r8
 8001c6c:	fa09 f303 	lsl.w	r3, r9, r3
 8001c70:	4313      	orrs	r3, r2
 8001c72:	9304      	str	r3, [sp, #16]
 8001c74:	46a2      	mov	sl, r4
 8001c76:	e7d2      	b.n	8001c1e <_vfiprintf_r+0xe2>
 8001c78:	9b03      	ldr	r3, [sp, #12]
 8001c7a:	1d19      	adds	r1, r3, #4
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	9103      	str	r1, [sp, #12]
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	bfbb      	ittet	lt
 8001c84:	425b      	neglt	r3, r3
 8001c86:	f042 0202 	orrlt.w	r2, r2, #2
 8001c8a:	9307      	strge	r3, [sp, #28]
 8001c8c:	9307      	strlt	r3, [sp, #28]
 8001c8e:	bfb8      	it	lt
 8001c90:	9204      	strlt	r2, [sp, #16]
 8001c92:	7823      	ldrb	r3, [r4, #0]
 8001c94:	2b2e      	cmp	r3, #46	; 0x2e
 8001c96:	d10c      	bne.n	8001cb2 <_vfiprintf_r+0x176>
 8001c98:	7863      	ldrb	r3, [r4, #1]
 8001c9a:	2b2a      	cmp	r3, #42	; 0x2a
 8001c9c:	d135      	bne.n	8001d0a <_vfiprintf_r+0x1ce>
 8001c9e:	9b03      	ldr	r3, [sp, #12]
 8001ca0:	1d1a      	adds	r2, r3, #4
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	9203      	str	r2, [sp, #12]
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	bfb8      	it	lt
 8001caa:	f04f 33ff 	movlt.w	r3, #4294967295
 8001cae:	3402      	adds	r4, #2
 8001cb0:	9305      	str	r3, [sp, #20]
 8001cb2:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 8001d8c <_vfiprintf_r+0x250>
 8001cb6:	7821      	ldrb	r1, [r4, #0]
 8001cb8:	2203      	movs	r2, #3
 8001cba:	4650      	mov	r0, sl
 8001cbc:	f7fe faa0 	bl	8000200 <memchr>
 8001cc0:	b140      	cbz	r0, 8001cd4 <_vfiprintf_r+0x198>
 8001cc2:	2340      	movs	r3, #64	; 0x40
 8001cc4:	eba0 000a 	sub.w	r0, r0, sl
 8001cc8:	fa03 f000 	lsl.w	r0, r3, r0
 8001ccc:	9b04      	ldr	r3, [sp, #16]
 8001cce:	4303      	orrs	r3, r0
 8001cd0:	3401      	adds	r4, #1
 8001cd2:	9304      	str	r3, [sp, #16]
 8001cd4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001cd8:	482d      	ldr	r0, [pc, #180]	; (8001d90 <_vfiprintf_r+0x254>)
 8001cda:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8001cde:	2206      	movs	r2, #6
 8001ce0:	f7fe fa8e 	bl	8000200 <memchr>
 8001ce4:	2800      	cmp	r0, #0
 8001ce6:	d03f      	beq.n	8001d68 <_vfiprintf_r+0x22c>
 8001ce8:	4b2a      	ldr	r3, [pc, #168]	; (8001d94 <_vfiprintf_r+0x258>)
 8001cea:	bb1b      	cbnz	r3, 8001d34 <_vfiprintf_r+0x1f8>
 8001cec:	9b03      	ldr	r3, [sp, #12]
 8001cee:	3307      	adds	r3, #7
 8001cf0:	f023 0307 	bic.w	r3, r3, #7
 8001cf4:	3308      	adds	r3, #8
 8001cf6:	9303      	str	r3, [sp, #12]
 8001cf8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001cfa:	443b      	add	r3, r7
 8001cfc:	9309      	str	r3, [sp, #36]	; 0x24
 8001cfe:	e767      	b.n	8001bd0 <_vfiprintf_r+0x94>
 8001d00:	fb0c 3202 	mla	r2, ip, r2, r3
 8001d04:	460c      	mov	r4, r1
 8001d06:	2001      	movs	r0, #1
 8001d08:	e7a5      	b.n	8001c56 <_vfiprintf_r+0x11a>
 8001d0a:	2300      	movs	r3, #0
 8001d0c:	3401      	adds	r4, #1
 8001d0e:	9305      	str	r3, [sp, #20]
 8001d10:	4619      	mov	r1, r3
 8001d12:	f04f 0c0a 	mov.w	ip, #10
 8001d16:	4620      	mov	r0, r4
 8001d18:	f810 2b01 	ldrb.w	r2, [r0], #1
 8001d1c:	3a30      	subs	r2, #48	; 0x30
 8001d1e:	2a09      	cmp	r2, #9
 8001d20:	d903      	bls.n	8001d2a <_vfiprintf_r+0x1ee>
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d0c5      	beq.n	8001cb2 <_vfiprintf_r+0x176>
 8001d26:	9105      	str	r1, [sp, #20]
 8001d28:	e7c3      	b.n	8001cb2 <_vfiprintf_r+0x176>
 8001d2a:	fb0c 2101 	mla	r1, ip, r1, r2
 8001d2e:	4604      	mov	r4, r0
 8001d30:	2301      	movs	r3, #1
 8001d32:	e7f0      	b.n	8001d16 <_vfiprintf_r+0x1da>
 8001d34:	ab03      	add	r3, sp, #12
 8001d36:	9300      	str	r3, [sp, #0]
 8001d38:	462a      	mov	r2, r5
 8001d3a:	4b17      	ldr	r3, [pc, #92]	; (8001d98 <_vfiprintf_r+0x25c>)
 8001d3c:	a904      	add	r1, sp, #16
 8001d3e:	4630      	mov	r0, r6
 8001d40:	f3af 8000 	nop.w
 8001d44:	4607      	mov	r7, r0
 8001d46:	1c78      	adds	r0, r7, #1
 8001d48:	d1d6      	bne.n	8001cf8 <_vfiprintf_r+0x1bc>
 8001d4a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8001d4c:	07d9      	lsls	r1, r3, #31
 8001d4e:	d405      	bmi.n	8001d5c <_vfiprintf_r+0x220>
 8001d50:	89ab      	ldrh	r3, [r5, #12]
 8001d52:	059a      	lsls	r2, r3, #22
 8001d54:	d402      	bmi.n	8001d5c <_vfiprintf_r+0x220>
 8001d56:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8001d58:	f7ff fd83 	bl	8001862 <__retarget_lock_release_recursive>
 8001d5c:	89ab      	ldrh	r3, [r5, #12]
 8001d5e:	065b      	lsls	r3, r3, #25
 8001d60:	f53f af12 	bmi.w	8001b88 <_vfiprintf_r+0x4c>
 8001d64:	9809      	ldr	r0, [sp, #36]	; 0x24
 8001d66:	e711      	b.n	8001b8c <_vfiprintf_r+0x50>
 8001d68:	ab03      	add	r3, sp, #12
 8001d6a:	9300      	str	r3, [sp, #0]
 8001d6c:	462a      	mov	r2, r5
 8001d6e:	4b0a      	ldr	r3, [pc, #40]	; (8001d98 <_vfiprintf_r+0x25c>)
 8001d70:	a904      	add	r1, sp, #16
 8001d72:	4630      	mov	r0, r6
 8001d74:	f000 f880 	bl	8001e78 <_printf_i>
 8001d78:	e7e4      	b.n	8001d44 <_vfiprintf_r+0x208>
 8001d7a:	bf00      	nop
 8001d7c:	080028bc 	.word	0x080028bc
 8001d80:	080028dc 	.word	0x080028dc
 8001d84:	0800289c 	.word	0x0800289c
 8001d88:	080028fc 	.word	0x080028fc
 8001d8c:	08002902 	.word	0x08002902
 8001d90:	08002906 	.word	0x08002906
 8001d94:	00000000 	.word	0x00000000
 8001d98:	08001b17 	.word	0x08001b17

08001d9c <_printf_common>:
 8001d9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001da0:	4616      	mov	r6, r2
 8001da2:	4699      	mov	r9, r3
 8001da4:	688a      	ldr	r2, [r1, #8]
 8001da6:	690b      	ldr	r3, [r1, #16]
 8001da8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8001dac:	4293      	cmp	r3, r2
 8001dae:	bfb8      	it	lt
 8001db0:	4613      	movlt	r3, r2
 8001db2:	6033      	str	r3, [r6, #0]
 8001db4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8001db8:	4607      	mov	r7, r0
 8001dba:	460c      	mov	r4, r1
 8001dbc:	b10a      	cbz	r2, 8001dc2 <_printf_common+0x26>
 8001dbe:	3301      	adds	r3, #1
 8001dc0:	6033      	str	r3, [r6, #0]
 8001dc2:	6823      	ldr	r3, [r4, #0]
 8001dc4:	0699      	lsls	r1, r3, #26
 8001dc6:	bf42      	ittt	mi
 8001dc8:	6833      	ldrmi	r3, [r6, #0]
 8001dca:	3302      	addmi	r3, #2
 8001dcc:	6033      	strmi	r3, [r6, #0]
 8001dce:	6825      	ldr	r5, [r4, #0]
 8001dd0:	f015 0506 	ands.w	r5, r5, #6
 8001dd4:	d106      	bne.n	8001de4 <_printf_common+0x48>
 8001dd6:	f104 0a19 	add.w	sl, r4, #25
 8001dda:	68e3      	ldr	r3, [r4, #12]
 8001ddc:	6832      	ldr	r2, [r6, #0]
 8001dde:	1a9b      	subs	r3, r3, r2
 8001de0:	42ab      	cmp	r3, r5
 8001de2:	dc26      	bgt.n	8001e32 <_printf_common+0x96>
 8001de4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8001de8:	1e13      	subs	r3, r2, #0
 8001dea:	6822      	ldr	r2, [r4, #0]
 8001dec:	bf18      	it	ne
 8001dee:	2301      	movne	r3, #1
 8001df0:	0692      	lsls	r2, r2, #26
 8001df2:	d42b      	bmi.n	8001e4c <_printf_common+0xb0>
 8001df4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8001df8:	4649      	mov	r1, r9
 8001dfa:	4638      	mov	r0, r7
 8001dfc:	47c0      	blx	r8
 8001dfe:	3001      	adds	r0, #1
 8001e00:	d01e      	beq.n	8001e40 <_printf_common+0xa4>
 8001e02:	6823      	ldr	r3, [r4, #0]
 8001e04:	68e5      	ldr	r5, [r4, #12]
 8001e06:	6832      	ldr	r2, [r6, #0]
 8001e08:	f003 0306 	and.w	r3, r3, #6
 8001e0c:	2b04      	cmp	r3, #4
 8001e0e:	bf08      	it	eq
 8001e10:	1aad      	subeq	r5, r5, r2
 8001e12:	68a3      	ldr	r3, [r4, #8]
 8001e14:	6922      	ldr	r2, [r4, #16]
 8001e16:	bf0c      	ite	eq
 8001e18:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8001e1c:	2500      	movne	r5, #0
 8001e1e:	4293      	cmp	r3, r2
 8001e20:	bfc4      	itt	gt
 8001e22:	1a9b      	subgt	r3, r3, r2
 8001e24:	18ed      	addgt	r5, r5, r3
 8001e26:	2600      	movs	r6, #0
 8001e28:	341a      	adds	r4, #26
 8001e2a:	42b5      	cmp	r5, r6
 8001e2c:	d11a      	bne.n	8001e64 <_printf_common+0xc8>
 8001e2e:	2000      	movs	r0, #0
 8001e30:	e008      	b.n	8001e44 <_printf_common+0xa8>
 8001e32:	2301      	movs	r3, #1
 8001e34:	4652      	mov	r2, sl
 8001e36:	4649      	mov	r1, r9
 8001e38:	4638      	mov	r0, r7
 8001e3a:	47c0      	blx	r8
 8001e3c:	3001      	adds	r0, #1
 8001e3e:	d103      	bne.n	8001e48 <_printf_common+0xac>
 8001e40:	f04f 30ff 	mov.w	r0, #4294967295
 8001e44:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001e48:	3501      	adds	r5, #1
 8001e4a:	e7c6      	b.n	8001dda <_printf_common+0x3e>
 8001e4c:	18e1      	adds	r1, r4, r3
 8001e4e:	1c5a      	adds	r2, r3, #1
 8001e50:	2030      	movs	r0, #48	; 0x30
 8001e52:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8001e56:	4422      	add	r2, r4
 8001e58:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8001e5c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8001e60:	3302      	adds	r3, #2
 8001e62:	e7c7      	b.n	8001df4 <_printf_common+0x58>
 8001e64:	2301      	movs	r3, #1
 8001e66:	4622      	mov	r2, r4
 8001e68:	4649      	mov	r1, r9
 8001e6a:	4638      	mov	r0, r7
 8001e6c:	47c0      	blx	r8
 8001e6e:	3001      	adds	r0, #1
 8001e70:	d0e6      	beq.n	8001e40 <_printf_common+0xa4>
 8001e72:	3601      	adds	r6, #1
 8001e74:	e7d9      	b.n	8001e2a <_printf_common+0x8e>
	...

08001e78 <_printf_i>:
 8001e78:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8001e7c:	7e0f      	ldrb	r7, [r1, #24]
 8001e7e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8001e80:	2f78      	cmp	r7, #120	; 0x78
 8001e82:	4691      	mov	r9, r2
 8001e84:	4680      	mov	r8, r0
 8001e86:	460c      	mov	r4, r1
 8001e88:	469a      	mov	sl, r3
 8001e8a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8001e8e:	d807      	bhi.n	8001ea0 <_printf_i+0x28>
 8001e90:	2f62      	cmp	r7, #98	; 0x62
 8001e92:	d80a      	bhi.n	8001eaa <_printf_i+0x32>
 8001e94:	2f00      	cmp	r7, #0
 8001e96:	f000 80d8 	beq.w	800204a <_printf_i+0x1d2>
 8001e9a:	2f58      	cmp	r7, #88	; 0x58
 8001e9c:	f000 80a3 	beq.w	8001fe6 <_printf_i+0x16e>
 8001ea0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8001ea4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8001ea8:	e03a      	b.n	8001f20 <_printf_i+0xa8>
 8001eaa:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8001eae:	2b15      	cmp	r3, #21
 8001eb0:	d8f6      	bhi.n	8001ea0 <_printf_i+0x28>
 8001eb2:	a101      	add	r1, pc, #4	; (adr r1, 8001eb8 <_printf_i+0x40>)
 8001eb4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8001eb8:	08001f11 	.word	0x08001f11
 8001ebc:	08001f25 	.word	0x08001f25
 8001ec0:	08001ea1 	.word	0x08001ea1
 8001ec4:	08001ea1 	.word	0x08001ea1
 8001ec8:	08001ea1 	.word	0x08001ea1
 8001ecc:	08001ea1 	.word	0x08001ea1
 8001ed0:	08001f25 	.word	0x08001f25
 8001ed4:	08001ea1 	.word	0x08001ea1
 8001ed8:	08001ea1 	.word	0x08001ea1
 8001edc:	08001ea1 	.word	0x08001ea1
 8001ee0:	08001ea1 	.word	0x08001ea1
 8001ee4:	08002031 	.word	0x08002031
 8001ee8:	08001f55 	.word	0x08001f55
 8001eec:	08002013 	.word	0x08002013
 8001ef0:	08001ea1 	.word	0x08001ea1
 8001ef4:	08001ea1 	.word	0x08001ea1
 8001ef8:	08002053 	.word	0x08002053
 8001efc:	08001ea1 	.word	0x08001ea1
 8001f00:	08001f55 	.word	0x08001f55
 8001f04:	08001ea1 	.word	0x08001ea1
 8001f08:	08001ea1 	.word	0x08001ea1
 8001f0c:	0800201b 	.word	0x0800201b
 8001f10:	682b      	ldr	r3, [r5, #0]
 8001f12:	1d1a      	adds	r2, r3, #4
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	602a      	str	r2, [r5, #0]
 8001f18:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8001f1c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8001f20:	2301      	movs	r3, #1
 8001f22:	e0a3      	b.n	800206c <_printf_i+0x1f4>
 8001f24:	6820      	ldr	r0, [r4, #0]
 8001f26:	6829      	ldr	r1, [r5, #0]
 8001f28:	0606      	lsls	r6, r0, #24
 8001f2a:	f101 0304 	add.w	r3, r1, #4
 8001f2e:	d50a      	bpl.n	8001f46 <_printf_i+0xce>
 8001f30:	680e      	ldr	r6, [r1, #0]
 8001f32:	602b      	str	r3, [r5, #0]
 8001f34:	2e00      	cmp	r6, #0
 8001f36:	da03      	bge.n	8001f40 <_printf_i+0xc8>
 8001f38:	232d      	movs	r3, #45	; 0x2d
 8001f3a:	4276      	negs	r6, r6
 8001f3c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8001f40:	485e      	ldr	r0, [pc, #376]	; (80020bc <_printf_i+0x244>)
 8001f42:	230a      	movs	r3, #10
 8001f44:	e019      	b.n	8001f7a <_printf_i+0x102>
 8001f46:	680e      	ldr	r6, [r1, #0]
 8001f48:	602b      	str	r3, [r5, #0]
 8001f4a:	f010 0f40 	tst.w	r0, #64	; 0x40
 8001f4e:	bf18      	it	ne
 8001f50:	b236      	sxthne	r6, r6
 8001f52:	e7ef      	b.n	8001f34 <_printf_i+0xbc>
 8001f54:	682b      	ldr	r3, [r5, #0]
 8001f56:	6820      	ldr	r0, [r4, #0]
 8001f58:	1d19      	adds	r1, r3, #4
 8001f5a:	6029      	str	r1, [r5, #0]
 8001f5c:	0601      	lsls	r1, r0, #24
 8001f5e:	d501      	bpl.n	8001f64 <_printf_i+0xec>
 8001f60:	681e      	ldr	r6, [r3, #0]
 8001f62:	e002      	b.n	8001f6a <_printf_i+0xf2>
 8001f64:	0646      	lsls	r6, r0, #25
 8001f66:	d5fb      	bpl.n	8001f60 <_printf_i+0xe8>
 8001f68:	881e      	ldrh	r6, [r3, #0]
 8001f6a:	4854      	ldr	r0, [pc, #336]	; (80020bc <_printf_i+0x244>)
 8001f6c:	2f6f      	cmp	r7, #111	; 0x6f
 8001f6e:	bf0c      	ite	eq
 8001f70:	2308      	moveq	r3, #8
 8001f72:	230a      	movne	r3, #10
 8001f74:	2100      	movs	r1, #0
 8001f76:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8001f7a:	6865      	ldr	r5, [r4, #4]
 8001f7c:	60a5      	str	r5, [r4, #8]
 8001f7e:	2d00      	cmp	r5, #0
 8001f80:	bfa2      	ittt	ge
 8001f82:	6821      	ldrge	r1, [r4, #0]
 8001f84:	f021 0104 	bicge.w	r1, r1, #4
 8001f88:	6021      	strge	r1, [r4, #0]
 8001f8a:	b90e      	cbnz	r6, 8001f90 <_printf_i+0x118>
 8001f8c:	2d00      	cmp	r5, #0
 8001f8e:	d04d      	beq.n	800202c <_printf_i+0x1b4>
 8001f90:	4615      	mov	r5, r2
 8001f92:	fbb6 f1f3 	udiv	r1, r6, r3
 8001f96:	fb03 6711 	mls	r7, r3, r1, r6
 8001f9a:	5dc7      	ldrb	r7, [r0, r7]
 8001f9c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8001fa0:	4637      	mov	r7, r6
 8001fa2:	42bb      	cmp	r3, r7
 8001fa4:	460e      	mov	r6, r1
 8001fa6:	d9f4      	bls.n	8001f92 <_printf_i+0x11a>
 8001fa8:	2b08      	cmp	r3, #8
 8001faa:	d10b      	bne.n	8001fc4 <_printf_i+0x14c>
 8001fac:	6823      	ldr	r3, [r4, #0]
 8001fae:	07de      	lsls	r6, r3, #31
 8001fb0:	d508      	bpl.n	8001fc4 <_printf_i+0x14c>
 8001fb2:	6923      	ldr	r3, [r4, #16]
 8001fb4:	6861      	ldr	r1, [r4, #4]
 8001fb6:	4299      	cmp	r1, r3
 8001fb8:	bfde      	ittt	le
 8001fba:	2330      	movle	r3, #48	; 0x30
 8001fbc:	f805 3c01 	strble.w	r3, [r5, #-1]
 8001fc0:	f105 35ff 	addle.w	r5, r5, #4294967295
 8001fc4:	1b52      	subs	r2, r2, r5
 8001fc6:	6122      	str	r2, [r4, #16]
 8001fc8:	f8cd a000 	str.w	sl, [sp]
 8001fcc:	464b      	mov	r3, r9
 8001fce:	aa03      	add	r2, sp, #12
 8001fd0:	4621      	mov	r1, r4
 8001fd2:	4640      	mov	r0, r8
 8001fd4:	f7ff fee2 	bl	8001d9c <_printf_common>
 8001fd8:	3001      	adds	r0, #1
 8001fda:	d14c      	bne.n	8002076 <_printf_i+0x1fe>
 8001fdc:	f04f 30ff 	mov.w	r0, #4294967295
 8001fe0:	b004      	add	sp, #16
 8001fe2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001fe6:	4835      	ldr	r0, [pc, #212]	; (80020bc <_printf_i+0x244>)
 8001fe8:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8001fec:	6829      	ldr	r1, [r5, #0]
 8001fee:	6823      	ldr	r3, [r4, #0]
 8001ff0:	f851 6b04 	ldr.w	r6, [r1], #4
 8001ff4:	6029      	str	r1, [r5, #0]
 8001ff6:	061d      	lsls	r5, r3, #24
 8001ff8:	d514      	bpl.n	8002024 <_printf_i+0x1ac>
 8001ffa:	07df      	lsls	r7, r3, #31
 8001ffc:	bf44      	itt	mi
 8001ffe:	f043 0320 	orrmi.w	r3, r3, #32
 8002002:	6023      	strmi	r3, [r4, #0]
 8002004:	b91e      	cbnz	r6, 800200e <_printf_i+0x196>
 8002006:	6823      	ldr	r3, [r4, #0]
 8002008:	f023 0320 	bic.w	r3, r3, #32
 800200c:	6023      	str	r3, [r4, #0]
 800200e:	2310      	movs	r3, #16
 8002010:	e7b0      	b.n	8001f74 <_printf_i+0xfc>
 8002012:	6823      	ldr	r3, [r4, #0]
 8002014:	f043 0320 	orr.w	r3, r3, #32
 8002018:	6023      	str	r3, [r4, #0]
 800201a:	2378      	movs	r3, #120	; 0x78
 800201c:	4828      	ldr	r0, [pc, #160]	; (80020c0 <_printf_i+0x248>)
 800201e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8002022:	e7e3      	b.n	8001fec <_printf_i+0x174>
 8002024:	0659      	lsls	r1, r3, #25
 8002026:	bf48      	it	mi
 8002028:	b2b6      	uxthmi	r6, r6
 800202a:	e7e6      	b.n	8001ffa <_printf_i+0x182>
 800202c:	4615      	mov	r5, r2
 800202e:	e7bb      	b.n	8001fa8 <_printf_i+0x130>
 8002030:	682b      	ldr	r3, [r5, #0]
 8002032:	6826      	ldr	r6, [r4, #0]
 8002034:	6961      	ldr	r1, [r4, #20]
 8002036:	1d18      	adds	r0, r3, #4
 8002038:	6028      	str	r0, [r5, #0]
 800203a:	0635      	lsls	r5, r6, #24
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	d501      	bpl.n	8002044 <_printf_i+0x1cc>
 8002040:	6019      	str	r1, [r3, #0]
 8002042:	e002      	b.n	800204a <_printf_i+0x1d2>
 8002044:	0670      	lsls	r0, r6, #25
 8002046:	d5fb      	bpl.n	8002040 <_printf_i+0x1c8>
 8002048:	8019      	strh	r1, [r3, #0]
 800204a:	2300      	movs	r3, #0
 800204c:	6123      	str	r3, [r4, #16]
 800204e:	4615      	mov	r5, r2
 8002050:	e7ba      	b.n	8001fc8 <_printf_i+0x150>
 8002052:	682b      	ldr	r3, [r5, #0]
 8002054:	1d1a      	adds	r2, r3, #4
 8002056:	602a      	str	r2, [r5, #0]
 8002058:	681d      	ldr	r5, [r3, #0]
 800205a:	6862      	ldr	r2, [r4, #4]
 800205c:	2100      	movs	r1, #0
 800205e:	4628      	mov	r0, r5
 8002060:	f7fe f8ce 	bl	8000200 <memchr>
 8002064:	b108      	cbz	r0, 800206a <_printf_i+0x1f2>
 8002066:	1b40      	subs	r0, r0, r5
 8002068:	6060      	str	r0, [r4, #4]
 800206a:	6863      	ldr	r3, [r4, #4]
 800206c:	6123      	str	r3, [r4, #16]
 800206e:	2300      	movs	r3, #0
 8002070:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002074:	e7a8      	b.n	8001fc8 <_printf_i+0x150>
 8002076:	6923      	ldr	r3, [r4, #16]
 8002078:	462a      	mov	r2, r5
 800207a:	4649      	mov	r1, r9
 800207c:	4640      	mov	r0, r8
 800207e:	47d0      	blx	sl
 8002080:	3001      	adds	r0, #1
 8002082:	d0ab      	beq.n	8001fdc <_printf_i+0x164>
 8002084:	6823      	ldr	r3, [r4, #0]
 8002086:	079b      	lsls	r3, r3, #30
 8002088:	d413      	bmi.n	80020b2 <_printf_i+0x23a>
 800208a:	68e0      	ldr	r0, [r4, #12]
 800208c:	9b03      	ldr	r3, [sp, #12]
 800208e:	4298      	cmp	r0, r3
 8002090:	bfb8      	it	lt
 8002092:	4618      	movlt	r0, r3
 8002094:	e7a4      	b.n	8001fe0 <_printf_i+0x168>
 8002096:	2301      	movs	r3, #1
 8002098:	4632      	mov	r2, r6
 800209a:	4649      	mov	r1, r9
 800209c:	4640      	mov	r0, r8
 800209e:	47d0      	blx	sl
 80020a0:	3001      	adds	r0, #1
 80020a2:	d09b      	beq.n	8001fdc <_printf_i+0x164>
 80020a4:	3501      	adds	r5, #1
 80020a6:	68e3      	ldr	r3, [r4, #12]
 80020a8:	9903      	ldr	r1, [sp, #12]
 80020aa:	1a5b      	subs	r3, r3, r1
 80020ac:	42ab      	cmp	r3, r5
 80020ae:	dcf2      	bgt.n	8002096 <_printf_i+0x21e>
 80020b0:	e7eb      	b.n	800208a <_printf_i+0x212>
 80020b2:	2500      	movs	r5, #0
 80020b4:	f104 0619 	add.w	r6, r4, #25
 80020b8:	e7f5      	b.n	80020a6 <_printf_i+0x22e>
 80020ba:	bf00      	nop
 80020bc:	0800290d 	.word	0x0800290d
 80020c0:	0800291e 	.word	0x0800291e

080020c4 <_sbrk_r>:
 80020c4:	b538      	push	{r3, r4, r5, lr}
 80020c6:	4d06      	ldr	r5, [pc, #24]	; (80020e0 <_sbrk_r+0x1c>)
 80020c8:	2300      	movs	r3, #0
 80020ca:	4604      	mov	r4, r0
 80020cc:	4608      	mov	r0, r1
 80020ce:	602b      	str	r3, [r5, #0]
 80020d0:	f000 f9b8 	bl	8002444 <_sbrk>
 80020d4:	1c43      	adds	r3, r0, #1
 80020d6:	d102      	bne.n	80020de <_sbrk_r+0x1a>
 80020d8:	682b      	ldr	r3, [r5, #0]
 80020da:	b103      	cbz	r3, 80020de <_sbrk_r+0x1a>
 80020dc:	6023      	str	r3, [r4, #0]
 80020de:	bd38      	pop	{r3, r4, r5, pc}
 80020e0:	20000098 	.word	0x20000098

080020e4 <__sread>:
 80020e4:	b510      	push	{r4, lr}
 80020e6:	460c      	mov	r4, r1
 80020e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80020ec:	f000 f8a0 	bl	8002230 <_read_r>
 80020f0:	2800      	cmp	r0, #0
 80020f2:	bfab      	itete	ge
 80020f4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80020f6:	89a3      	ldrhlt	r3, [r4, #12]
 80020f8:	181b      	addge	r3, r3, r0
 80020fa:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80020fe:	bfac      	ite	ge
 8002100:	6563      	strge	r3, [r4, #84]	; 0x54
 8002102:	81a3      	strhlt	r3, [r4, #12]
 8002104:	bd10      	pop	{r4, pc}

08002106 <__swrite>:
 8002106:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800210a:	461f      	mov	r7, r3
 800210c:	898b      	ldrh	r3, [r1, #12]
 800210e:	05db      	lsls	r3, r3, #23
 8002110:	4605      	mov	r5, r0
 8002112:	460c      	mov	r4, r1
 8002114:	4616      	mov	r6, r2
 8002116:	d505      	bpl.n	8002124 <__swrite+0x1e>
 8002118:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800211c:	2302      	movs	r3, #2
 800211e:	2200      	movs	r2, #0
 8002120:	f000 f868 	bl	80021f4 <_lseek_r>
 8002124:	89a3      	ldrh	r3, [r4, #12]
 8002126:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800212a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800212e:	81a3      	strh	r3, [r4, #12]
 8002130:	4632      	mov	r2, r6
 8002132:	463b      	mov	r3, r7
 8002134:	4628      	mov	r0, r5
 8002136:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800213a:	f000 b817 	b.w	800216c <_write_r>

0800213e <__sseek>:
 800213e:	b510      	push	{r4, lr}
 8002140:	460c      	mov	r4, r1
 8002142:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002146:	f000 f855 	bl	80021f4 <_lseek_r>
 800214a:	1c43      	adds	r3, r0, #1
 800214c:	89a3      	ldrh	r3, [r4, #12]
 800214e:	bf15      	itete	ne
 8002150:	6560      	strne	r0, [r4, #84]	; 0x54
 8002152:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8002156:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800215a:	81a3      	strheq	r3, [r4, #12]
 800215c:	bf18      	it	ne
 800215e:	81a3      	strhne	r3, [r4, #12]
 8002160:	bd10      	pop	{r4, pc}

08002162 <__sclose>:
 8002162:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002166:	f000 b813 	b.w	8002190 <_close_r>
	...

0800216c <_write_r>:
 800216c:	b538      	push	{r3, r4, r5, lr}
 800216e:	4d07      	ldr	r5, [pc, #28]	; (800218c <_write_r+0x20>)
 8002170:	4604      	mov	r4, r0
 8002172:	4608      	mov	r0, r1
 8002174:	4611      	mov	r1, r2
 8002176:	2200      	movs	r2, #0
 8002178:	602a      	str	r2, [r5, #0]
 800217a:	461a      	mov	r2, r3
 800217c:	f000 f90f 	bl	800239e <_write>
 8002180:	1c43      	adds	r3, r0, #1
 8002182:	d102      	bne.n	800218a <_write_r+0x1e>
 8002184:	682b      	ldr	r3, [r5, #0]
 8002186:	b103      	cbz	r3, 800218a <_write_r+0x1e>
 8002188:	6023      	str	r3, [r4, #0]
 800218a:	bd38      	pop	{r3, r4, r5, pc}
 800218c:	20000098 	.word	0x20000098

08002190 <_close_r>:
 8002190:	b538      	push	{r3, r4, r5, lr}
 8002192:	4d06      	ldr	r5, [pc, #24]	; (80021ac <_close_r+0x1c>)
 8002194:	2300      	movs	r3, #0
 8002196:	4604      	mov	r4, r0
 8002198:	4608      	mov	r0, r1
 800219a:	602b      	str	r3, [r5, #0]
 800219c:	f000 f92c 	bl	80023f8 <_close>
 80021a0:	1c43      	adds	r3, r0, #1
 80021a2:	d102      	bne.n	80021aa <_close_r+0x1a>
 80021a4:	682b      	ldr	r3, [r5, #0]
 80021a6:	b103      	cbz	r3, 80021aa <_close_r+0x1a>
 80021a8:	6023      	str	r3, [r4, #0]
 80021aa:	bd38      	pop	{r3, r4, r5, pc}
 80021ac:	20000098 	.word	0x20000098

080021b0 <_fstat_r>:
 80021b0:	b538      	push	{r3, r4, r5, lr}
 80021b2:	4d07      	ldr	r5, [pc, #28]	; (80021d0 <_fstat_r+0x20>)
 80021b4:	2300      	movs	r3, #0
 80021b6:	4604      	mov	r4, r0
 80021b8:	4608      	mov	r0, r1
 80021ba:	4611      	mov	r1, r2
 80021bc:	602b      	str	r3, [r5, #0]
 80021be:	f000 f986 	bl	80024ce <_fstat>
 80021c2:	1c43      	adds	r3, r0, #1
 80021c4:	d102      	bne.n	80021cc <_fstat_r+0x1c>
 80021c6:	682b      	ldr	r3, [r5, #0]
 80021c8:	b103      	cbz	r3, 80021cc <_fstat_r+0x1c>
 80021ca:	6023      	str	r3, [r4, #0]
 80021cc:	bd38      	pop	{r3, r4, r5, pc}
 80021ce:	bf00      	nop
 80021d0:	20000098 	.word	0x20000098

080021d4 <_isatty_r>:
 80021d4:	b538      	push	{r3, r4, r5, lr}
 80021d6:	4d06      	ldr	r5, [pc, #24]	; (80021f0 <_isatty_r+0x1c>)
 80021d8:	2300      	movs	r3, #0
 80021da:	4604      	mov	r4, r0
 80021dc:	4608      	mov	r0, r1
 80021de:	602b      	str	r3, [r5, #0]
 80021e0:	f000 fadc 	bl	800279c <_isatty>
 80021e4:	1c43      	adds	r3, r0, #1
 80021e6:	d102      	bne.n	80021ee <_isatty_r+0x1a>
 80021e8:	682b      	ldr	r3, [r5, #0]
 80021ea:	b103      	cbz	r3, 80021ee <_isatty_r+0x1a>
 80021ec:	6023      	str	r3, [r4, #0]
 80021ee:	bd38      	pop	{r3, r4, r5, pc}
 80021f0:	20000098 	.word	0x20000098

080021f4 <_lseek_r>:
 80021f4:	b538      	push	{r3, r4, r5, lr}
 80021f6:	4d07      	ldr	r5, [pc, #28]	; (8002214 <_lseek_r+0x20>)
 80021f8:	4604      	mov	r4, r0
 80021fa:	4608      	mov	r0, r1
 80021fc:	4611      	mov	r1, r2
 80021fe:	2200      	movs	r2, #0
 8002200:	602a      	str	r2, [r5, #0]
 8002202:	461a      	mov	r2, r3
 8002204:	f000 f8b9 	bl	800237a <_lseek>
 8002208:	1c43      	adds	r3, r0, #1
 800220a:	d102      	bne.n	8002212 <_lseek_r+0x1e>
 800220c:	682b      	ldr	r3, [r5, #0]
 800220e:	b103      	cbz	r3, 8002212 <_lseek_r+0x1e>
 8002210:	6023      	str	r3, [r4, #0]
 8002212:	bd38      	pop	{r3, r4, r5, pc}
 8002214:	20000098 	.word	0x20000098

08002218 <__malloc_lock>:
 8002218:	4801      	ldr	r0, [pc, #4]	; (8002220 <__malloc_lock+0x8>)
 800221a:	f7ff bb21 	b.w	8001860 <__retarget_lock_acquire_recursive>
 800221e:	bf00      	nop
 8002220:	2000008c 	.word	0x2000008c

08002224 <__malloc_unlock>:
 8002224:	4801      	ldr	r0, [pc, #4]	; (800222c <__malloc_unlock+0x8>)
 8002226:	f7ff bb1c 	b.w	8001862 <__retarget_lock_release_recursive>
 800222a:	bf00      	nop
 800222c:	2000008c 	.word	0x2000008c

08002230 <_read_r>:
 8002230:	b538      	push	{r3, r4, r5, lr}
 8002232:	4d07      	ldr	r5, [pc, #28]	; (8002250 <_read_r+0x20>)
 8002234:	4604      	mov	r4, r0
 8002236:	4608      	mov	r0, r1
 8002238:	4611      	mov	r1, r2
 800223a:	2200      	movs	r2, #0
 800223c:	602a      	str	r2, [r5, #0]
 800223e:	461a      	mov	r2, r3
 8002240:	f000 f845 	bl	80022ce <_read>
 8002244:	1c43      	adds	r3, r0, #1
 8002246:	d102      	bne.n	800224e <_read_r+0x1e>
 8002248:	682b      	ldr	r3, [r5, #0]
 800224a:	b103      	cbz	r3, 800224e <_read_r+0x1e>
 800224c:	6023      	str	r3, [r4, #0]
 800224e:	bd38      	pop	{r3, r4, r5, pc}
 8002250:	20000098 	.word	0x20000098

08002254 <findslot>:
 8002254:	4b0a      	ldr	r3, [pc, #40]	; (8002280 <findslot+0x2c>)
 8002256:	b510      	push	{r4, lr}
 8002258:	4604      	mov	r4, r0
 800225a:	6818      	ldr	r0, [r3, #0]
 800225c:	b118      	cbz	r0, 8002266 <findslot+0x12>
 800225e:	6983      	ldr	r3, [r0, #24]
 8002260:	b90b      	cbnz	r3, 8002266 <findslot+0x12>
 8002262:	f7ff fa5f 	bl	8001724 <__sinit>
 8002266:	2c13      	cmp	r4, #19
 8002268:	d807      	bhi.n	800227a <findslot+0x26>
 800226a:	4806      	ldr	r0, [pc, #24]	; (8002284 <findslot+0x30>)
 800226c:	f850 2034 	ldr.w	r2, [r0, r4, lsl #3]
 8002270:	3201      	adds	r2, #1
 8002272:	d002      	beq.n	800227a <findslot+0x26>
 8002274:	eb00 00c4 	add.w	r0, r0, r4, lsl #3
 8002278:	bd10      	pop	{r4, pc}
 800227a:	2000      	movs	r0, #0
 800227c:	e7fc      	b.n	8002278 <findslot+0x24>
 800227e:	bf00      	nop
 8002280:	20000000 	.word	0x20000000
 8002284:	200000ac 	.word	0x200000ac

08002288 <error>:
 8002288:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800228a:	4604      	mov	r4, r0
 800228c:	f000 faa2 	bl	80027d4 <__errno>
 8002290:	2613      	movs	r6, #19
 8002292:	4605      	mov	r5, r0
 8002294:	2700      	movs	r7, #0
 8002296:	4630      	mov	r0, r6
 8002298:	4639      	mov	r1, r7
 800229a:	beab      	bkpt	0x00ab
 800229c:	4606      	mov	r6, r0
 800229e:	602e      	str	r6, [r5, #0]
 80022a0:	4620      	mov	r0, r4
 80022a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080022a4 <checkerror>:
 80022a4:	1c43      	adds	r3, r0, #1
 80022a6:	d101      	bne.n	80022ac <checkerror+0x8>
 80022a8:	f7ff bfee 	b.w	8002288 <error>
 80022ac:	4770      	bx	lr

080022ae <_swiread>:
 80022ae:	b530      	push	{r4, r5, lr}
 80022b0:	b085      	sub	sp, #20
 80022b2:	e9cd 0101 	strd	r0, r1, [sp, #4]
 80022b6:	9203      	str	r2, [sp, #12]
 80022b8:	2406      	movs	r4, #6
 80022ba:	ad01      	add	r5, sp, #4
 80022bc:	4620      	mov	r0, r4
 80022be:	4629      	mov	r1, r5
 80022c0:	beab      	bkpt	0x00ab
 80022c2:	4604      	mov	r4, r0
 80022c4:	4620      	mov	r0, r4
 80022c6:	f7ff ffed 	bl	80022a4 <checkerror>
 80022ca:	b005      	add	sp, #20
 80022cc:	bd30      	pop	{r4, r5, pc}

080022ce <_read>:
 80022ce:	b570      	push	{r4, r5, r6, lr}
 80022d0:	460e      	mov	r6, r1
 80022d2:	4615      	mov	r5, r2
 80022d4:	f7ff ffbe 	bl	8002254 <findslot>
 80022d8:	4604      	mov	r4, r0
 80022da:	b930      	cbnz	r0, 80022ea <_read+0x1c>
 80022dc:	f000 fa7a 	bl	80027d4 <__errno>
 80022e0:	2309      	movs	r3, #9
 80022e2:	6003      	str	r3, [r0, #0]
 80022e4:	f04f 30ff 	mov.w	r0, #4294967295
 80022e8:	bd70      	pop	{r4, r5, r6, pc}
 80022ea:	6800      	ldr	r0, [r0, #0]
 80022ec:	462a      	mov	r2, r5
 80022ee:	4631      	mov	r1, r6
 80022f0:	f7ff ffdd 	bl	80022ae <_swiread>
 80022f4:	1c43      	adds	r3, r0, #1
 80022f6:	bf1f      	itttt	ne
 80022f8:	6863      	ldrne	r3, [r4, #4]
 80022fa:	1a28      	subne	r0, r5, r0
 80022fc:	181b      	addne	r3, r3, r0
 80022fe:	6063      	strne	r3, [r4, #4]
 8002300:	e7f2      	b.n	80022e8 <_read+0x1a>

08002302 <_swilseek>:
 8002302:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002304:	460c      	mov	r4, r1
 8002306:	4616      	mov	r6, r2
 8002308:	f7ff ffa4 	bl	8002254 <findslot>
 800230c:	4605      	mov	r5, r0
 800230e:	b940      	cbnz	r0, 8002322 <_swilseek+0x20>
 8002310:	f000 fa60 	bl	80027d4 <__errno>
 8002314:	2309      	movs	r3, #9
 8002316:	6003      	str	r3, [r0, #0]
 8002318:	f04f 34ff 	mov.w	r4, #4294967295
 800231c:	4620      	mov	r0, r4
 800231e:	b003      	add	sp, #12
 8002320:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002322:	2e02      	cmp	r6, #2
 8002324:	d903      	bls.n	800232e <_swilseek+0x2c>
 8002326:	f000 fa55 	bl	80027d4 <__errno>
 800232a:	2316      	movs	r3, #22
 800232c:	e7f3      	b.n	8002316 <_swilseek+0x14>
 800232e:	2e01      	cmp	r6, #1
 8002330:	d112      	bne.n	8002358 <_swilseek+0x56>
 8002332:	6843      	ldr	r3, [r0, #4]
 8002334:	18e4      	adds	r4, r4, r3
 8002336:	d4f6      	bmi.n	8002326 <_swilseek+0x24>
 8002338:	682b      	ldr	r3, [r5, #0]
 800233a:	260a      	movs	r6, #10
 800233c:	e9cd 3400 	strd	r3, r4, [sp]
 8002340:	466f      	mov	r7, sp
 8002342:	4630      	mov	r0, r6
 8002344:	4639      	mov	r1, r7
 8002346:	beab      	bkpt	0x00ab
 8002348:	4606      	mov	r6, r0
 800234a:	4630      	mov	r0, r6
 800234c:	f7ff ffaa 	bl	80022a4 <checkerror>
 8002350:	2800      	cmp	r0, #0
 8002352:	dbe1      	blt.n	8002318 <_swilseek+0x16>
 8002354:	606c      	str	r4, [r5, #4]
 8002356:	e7e1      	b.n	800231c <_swilseek+0x1a>
 8002358:	2e02      	cmp	r6, #2
 800235a:	d1ed      	bne.n	8002338 <_swilseek+0x36>
 800235c:	6803      	ldr	r3, [r0, #0]
 800235e:	9300      	str	r3, [sp, #0]
 8002360:	260c      	movs	r6, #12
 8002362:	466f      	mov	r7, sp
 8002364:	4630      	mov	r0, r6
 8002366:	4639      	mov	r1, r7
 8002368:	beab      	bkpt	0x00ab
 800236a:	4606      	mov	r6, r0
 800236c:	4630      	mov	r0, r6
 800236e:	f7ff ff99 	bl	80022a4 <checkerror>
 8002372:	1c43      	adds	r3, r0, #1
 8002374:	d0d0      	beq.n	8002318 <_swilseek+0x16>
 8002376:	4404      	add	r4, r0
 8002378:	e7de      	b.n	8002338 <_swilseek+0x36>

0800237a <_lseek>:
 800237a:	f7ff bfc2 	b.w	8002302 <_swilseek>

0800237e <_swiwrite>:
 800237e:	b530      	push	{r4, r5, lr}
 8002380:	b085      	sub	sp, #20
 8002382:	e9cd 0101 	strd	r0, r1, [sp, #4]
 8002386:	9203      	str	r2, [sp, #12]
 8002388:	2405      	movs	r4, #5
 800238a:	ad01      	add	r5, sp, #4
 800238c:	4620      	mov	r0, r4
 800238e:	4629      	mov	r1, r5
 8002390:	beab      	bkpt	0x00ab
 8002392:	4604      	mov	r4, r0
 8002394:	4620      	mov	r0, r4
 8002396:	f7ff ff85 	bl	80022a4 <checkerror>
 800239a:	b005      	add	sp, #20
 800239c:	bd30      	pop	{r4, r5, pc}

0800239e <_write>:
 800239e:	b570      	push	{r4, r5, r6, lr}
 80023a0:	460e      	mov	r6, r1
 80023a2:	4615      	mov	r5, r2
 80023a4:	f7ff ff56 	bl	8002254 <findslot>
 80023a8:	4604      	mov	r4, r0
 80023aa:	b930      	cbnz	r0, 80023ba <_write+0x1c>
 80023ac:	f000 fa12 	bl	80027d4 <__errno>
 80023b0:	2309      	movs	r3, #9
 80023b2:	6003      	str	r3, [r0, #0]
 80023b4:	f04f 30ff 	mov.w	r0, #4294967295
 80023b8:	bd70      	pop	{r4, r5, r6, pc}
 80023ba:	6800      	ldr	r0, [r0, #0]
 80023bc:	462a      	mov	r2, r5
 80023be:	4631      	mov	r1, r6
 80023c0:	f7ff ffdd 	bl	800237e <_swiwrite>
 80023c4:	1e03      	subs	r3, r0, #0
 80023c6:	dbf5      	blt.n	80023b4 <_write+0x16>
 80023c8:	6862      	ldr	r2, [r4, #4]
 80023ca:	1ae8      	subs	r0, r5, r3
 80023cc:	4402      	add	r2, r0
 80023ce:	42ab      	cmp	r3, r5
 80023d0:	6062      	str	r2, [r4, #4]
 80023d2:	d1f1      	bne.n	80023b8 <_write+0x1a>
 80023d4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80023d8:	2000      	movs	r0, #0
 80023da:	f7ff bf55 	b.w	8002288 <error>

080023de <_swiclose>:
 80023de:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80023e0:	2402      	movs	r4, #2
 80023e2:	9001      	str	r0, [sp, #4]
 80023e4:	ad01      	add	r5, sp, #4
 80023e6:	4620      	mov	r0, r4
 80023e8:	4629      	mov	r1, r5
 80023ea:	beab      	bkpt	0x00ab
 80023ec:	4604      	mov	r4, r0
 80023ee:	4620      	mov	r0, r4
 80023f0:	f7ff ff58 	bl	80022a4 <checkerror>
 80023f4:	b003      	add	sp, #12
 80023f6:	bd30      	pop	{r4, r5, pc}

080023f8 <_close>:
 80023f8:	b538      	push	{r3, r4, r5, lr}
 80023fa:	4605      	mov	r5, r0
 80023fc:	f7ff ff2a 	bl	8002254 <findslot>
 8002400:	4604      	mov	r4, r0
 8002402:	b930      	cbnz	r0, 8002412 <_close+0x1a>
 8002404:	f000 f9e6 	bl	80027d4 <__errno>
 8002408:	2309      	movs	r3, #9
 800240a:	6003      	str	r3, [r0, #0]
 800240c:	f04f 30ff 	mov.w	r0, #4294967295
 8002410:	bd38      	pop	{r3, r4, r5, pc}
 8002412:	3d01      	subs	r5, #1
 8002414:	2d01      	cmp	r5, #1
 8002416:	d809      	bhi.n	800242c <_close+0x34>
 8002418:	4b09      	ldr	r3, [pc, #36]	; (8002440 <_close+0x48>)
 800241a:	689a      	ldr	r2, [r3, #8]
 800241c:	691b      	ldr	r3, [r3, #16]
 800241e:	429a      	cmp	r2, r3
 8002420:	d104      	bne.n	800242c <_close+0x34>
 8002422:	f04f 33ff 	mov.w	r3, #4294967295
 8002426:	6003      	str	r3, [r0, #0]
 8002428:	2000      	movs	r0, #0
 800242a:	e7f1      	b.n	8002410 <_close+0x18>
 800242c:	6820      	ldr	r0, [r4, #0]
 800242e:	f7ff ffd6 	bl	80023de <_swiclose>
 8002432:	2800      	cmp	r0, #0
 8002434:	d1ec      	bne.n	8002410 <_close+0x18>
 8002436:	f04f 33ff 	mov.w	r3, #4294967295
 800243a:	6023      	str	r3, [r4, #0]
 800243c:	e7e8      	b.n	8002410 <_close+0x18>
 800243e:	bf00      	nop
 8002440:	200000ac 	.word	0x200000ac

08002444 <_sbrk>:
 8002444:	4a0d      	ldr	r2, [pc, #52]	; (800247c <_sbrk+0x38>)
 8002446:	6811      	ldr	r1, [r2, #0]
 8002448:	b510      	push	{r4, lr}
 800244a:	4603      	mov	r3, r0
 800244c:	b909      	cbnz	r1, 8002452 <_sbrk+0xe>
 800244e:	490c      	ldr	r1, [pc, #48]	; (8002480 <_sbrk+0x3c>)
 8002450:	6011      	str	r1, [r2, #0]
 8002452:	6810      	ldr	r0, [r2, #0]
 8002454:	4669      	mov	r1, sp
 8002456:	4403      	add	r3, r0
 8002458:	428b      	cmp	r3, r1
 800245a:	d806      	bhi.n	800246a <_sbrk+0x26>
 800245c:	4909      	ldr	r1, [pc, #36]	; (8002484 <_sbrk+0x40>)
 800245e:	4c0a      	ldr	r4, [pc, #40]	; (8002488 <_sbrk+0x44>)
 8002460:	6809      	ldr	r1, [r1, #0]
 8002462:	42a1      	cmp	r1, r4
 8002464:	d008      	beq.n	8002478 <_sbrk+0x34>
 8002466:	428b      	cmp	r3, r1
 8002468:	d906      	bls.n	8002478 <_sbrk+0x34>
 800246a:	f000 f9b3 	bl	80027d4 <__errno>
 800246e:	230c      	movs	r3, #12
 8002470:	6003      	str	r3, [r0, #0]
 8002472:	f04f 30ff 	mov.w	r0, #4294967295
 8002476:	bd10      	pop	{r4, pc}
 8002478:	6013      	str	r3, [r2, #0]
 800247a:	e7fc      	b.n	8002476 <_sbrk+0x32>
 800247c:	2000009c 	.word	0x2000009c
 8002480:	20000150 	.word	0x20000150
 8002484:	20000064 	.word	0x20000064
 8002488:	cafedead 	.word	0xcafedead

0800248c <_swistat>:
 800248c:	b570      	push	{r4, r5, r6, lr}
 800248e:	460c      	mov	r4, r1
 8002490:	f7ff fee0 	bl	8002254 <findslot>
 8002494:	4605      	mov	r5, r0
 8002496:	b930      	cbnz	r0, 80024a6 <_swistat+0x1a>
 8002498:	f000 f99c 	bl	80027d4 <__errno>
 800249c:	2309      	movs	r3, #9
 800249e:	6003      	str	r3, [r0, #0]
 80024a0:	f04f 30ff 	mov.w	r0, #4294967295
 80024a4:	bd70      	pop	{r4, r5, r6, pc}
 80024a6:	6863      	ldr	r3, [r4, #4]
 80024a8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80024ac:	6063      	str	r3, [r4, #4]
 80024ae:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80024b2:	64a3      	str	r3, [r4, #72]	; 0x48
 80024b4:	260c      	movs	r6, #12
 80024b6:	4630      	mov	r0, r6
 80024b8:	4629      	mov	r1, r5
 80024ba:	beab      	bkpt	0x00ab
 80024bc:	4605      	mov	r5, r0
 80024be:	4628      	mov	r0, r5
 80024c0:	f7ff fef0 	bl	80022a4 <checkerror>
 80024c4:	1c43      	adds	r3, r0, #1
 80024c6:	bf1c      	itt	ne
 80024c8:	6120      	strne	r0, [r4, #16]
 80024ca:	2000      	movne	r0, #0
 80024cc:	e7ea      	b.n	80024a4 <_swistat+0x18>

080024ce <_fstat>:
 80024ce:	460b      	mov	r3, r1
 80024d0:	b510      	push	{r4, lr}
 80024d2:	2100      	movs	r1, #0
 80024d4:	4604      	mov	r4, r0
 80024d6:	2258      	movs	r2, #88	; 0x58
 80024d8:	4618      	mov	r0, r3
 80024da:	f7fe feb7 	bl	800124c <memset>
 80024de:	4601      	mov	r1, r0
 80024e0:	4620      	mov	r0, r4
 80024e2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80024e6:	f7ff bfd1 	b.w	800248c <_swistat>

080024ea <_stat>:
 80024ea:	b538      	push	{r3, r4, r5, lr}
 80024ec:	460d      	mov	r5, r1
 80024ee:	4604      	mov	r4, r0
 80024f0:	2258      	movs	r2, #88	; 0x58
 80024f2:	2100      	movs	r1, #0
 80024f4:	4628      	mov	r0, r5
 80024f6:	f7fe fea9 	bl	800124c <memset>
 80024fa:	4620      	mov	r0, r4
 80024fc:	2100      	movs	r1, #0
 80024fe:	f000 f811 	bl	8002524 <_swiopen>
 8002502:	1c43      	adds	r3, r0, #1
 8002504:	4604      	mov	r4, r0
 8002506:	d00b      	beq.n	8002520 <_stat+0x36>
 8002508:	686b      	ldr	r3, [r5, #4]
 800250a:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 800250e:	606b      	str	r3, [r5, #4]
 8002510:	4629      	mov	r1, r5
 8002512:	f7ff ffbb 	bl	800248c <_swistat>
 8002516:	4605      	mov	r5, r0
 8002518:	4620      	mov	r0, r4
 800251a:	f7ff ff6d 	bl	80023f8 <_close>
 800251e:	462c      	mov	r4, r5
 8002520:	4620      	mov	r0, r4
 8002522:	bd38      	pop	{r3, r4, r5, pc}

08002524 <_swiopen>:
 8002524:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002528:	f8df 80a8 	ldr.w	r8, [pc, #168]	; 80025d4 <_swiopen+0xb0>
 800252c:	b097      	sub	sp, #92	; 0x5c
 800252e:	4607      	mov	r7, r0
 8002530:	460e      	mov	r6, r1
 8002532:	2500      	movs	r5, #0
 8002534:	f858 4035 	ldr.w	r4, [r8, r5, lsl #3]
 8002538:	1c61      	adds	r1, r4, #1
 800253a:	d037      	beq.n	80025ac <_swiopen+0x88>
 800253c:	3501      	adds	r5, #1
 800253e:	2d14      	cmp	r5, #20
 8002540:	d1f8      	bne.n	8002534 <_swiopen+0x10>
 8002542:	f000 f947 	bl	80027d4 <__errno>
 8002546:	2318      	movs	r3, #24
 8002548:	6003      	str	r3, [r0, #0]
 800254a:	f04f 34ff 	mov.w	r4, #4294967295
 800254e:	e03d      	b.n	80025cc <_swiopen+0xa8>
 8002550:	f3c6 4400 	ubfx	r4, r6, #16, #1
 8002554:	f240 6301 	movw	r3, #1537	; 0x601
 8002558:	07b2      	lsls	r2, r6, #30
 800255a:	bf48      	it	mi
 800255c:	f044 0402 	orrmi.w	r4, r4, #2
 8002560:	421e      	tst	r6, r3
 8002562:	bf18      	it	ne
 8002564:	f044 0404 	orrne.w	r4, r4, #4
 8002568:	0733      	lsls	r3, r6, #28
 800256a:	bf48      	it	mi
 800256c:	f024 0404 	bicmi.w	r4, r4, #4
 8002570:	4638      	mov	r0, r7
 8002572:	bf48      	it	mi
 8002574:	f044 0408 	orrmi.w	r4, r4, #8
 8002578:	9700      	str	r7, [sp, #0]
 800257a:	f7fd fe39 	bl	80001f0 <strlen>
 800257e:	e9cd 4001 	strd	r4, r0, [sp, #4]
 8002582:	2401      	movs	r4, #1
 8002584:	4620      	mov	r0, r4
 8002586:	4649      	mov	r1, r9
 8002588:	beab      	bkpt	0x00ab
 800258a:	4604      	mov	r4, r0
 800258c:	2c00      	cmp	r4, #0
 800258e:	db08      	blt.n	80025a2 <_swiopen+0x7e>
 8002590:	f848 4035 	str.w	r4, [r8, r5, lsl #3]
 8002594:	eb08 08c5 	add.w	r8, r8, r5, lsl #3
 8002598:	2300      	movs	r3, #0
 800259a:	f8c8 3004 	str.w	r3, [r8, #4]
 800259e:	462c      	mov	r4, r5
 80025a0:	e014      	b.n	80025cc <_swiopen+0xa8>
 80025a2:	4620      	mov	r0, r4
 80025a4:	f7ff fe70 	bl	8002288 <error>
 80025a8:	4604      	mov	r4, r0
 80025aa:	e00f      	b.n	80025cc <_swiopen+0xa8>
 80025ac:	f406 6320 	and.w	r3, r6, #2560	; 0xa00
 80025b0:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 80025b4:	46e9      	mov	r9, sp
 80025b6:	d1cb      	bne.n	8002550 <_swiopen+0x2c>
 80025b8:	4649      	mov	r1, r9
 80025ba:	4638      	mov	r0, r7
 80025bc:	f7ff ff95 	bl	80024ea <_stat>
 80025c0:	3001      	adds	r0, #1
 80025c2:	d0c5      	beq.n	8002550 <_swiopen+0x2c>
 80025c4:	f000 f906 	bl	80027d4 <__errno>
 80025c8:	2311      	movs	r3, #17
 80025ca:	6003      	str	r3, [r0, #0]
 80025cc:	4620      	mov	r0, r4
 80025ce:	b017      	add	sp, #92	; 0x5c
 80025d0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80025d4:	200000ac 	.word	0x200000ac

080025d8 <_get_semihosting_exts>:
 80025d8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80025dc:	4606      	mov	r6, r0
 80025de:	460f      	mov	r7, r1
 80025e0:	482a      	ldr	r0, [pc, #168]	; (800268c <_get_semihosting_exts+0xb4>)
 80025e2:	2100      	movs	r1, #0
 80025e4:	4615      	mov	r5, r2
 80025e6:	f7ff ff9d 	bl	8002524 <_swiopen>
 80025ea:	462a      	mov	r2, r5
 80025ec:	4604      	mov	r4, r0
 80025ee:	2100      	movs	r1, #0
 80025f0:	4630      	mov	r0, r6
 80025f2:	f7fe fe2b 	bl	800124c <memset>
 80025f6:	1c63      	adds	r3, r4, #1
 80025f8:	d016      	beq.n	8002628 <_get_semihosting_exts+0x50>
 80025fa:	4620      	mov	r0, r4
 80025fc:	f7ff fe2a 	bl	8002254 <findslot>
 8002600:	f04f 080c 	mov.w	r8, #12
 8002604:	4681      	mov	r9, r0
 8002606:	4640      	mov	r0, r8
 8002608:	4649      	mov	r1, r9
 800260a:	beab      	bkpt	0x00ab
 800260c:	4680      	mov	r8, r0
 800260e:	4640      	mov	r0, r8
 8002610:	f7ff fe48 	bl	80022a4 <checkerror>
 8002614:	2803      	cmp	r0, #3
 8002616:	dd02      	ble.n	800261e <_get_semihosting_exts+0x46>
 8002618:	1ec3      	subs	r3, r0, #3
 800261a:	42ab      	cmp	r3, r5
 800261c:	dc08      	bgt.n	8002630 <_get_semihosting_exts+0x58>
 800261e:	4620      	mov	r0, r4
 8002620:	f7ff feea 	bl	80023f8 <_close>
 8002624:	f04f 34ff 	mov.w	r4, #4294967295
 8002628:	4620      	mov	r0, r4
 800262a:	b003      	add	sp, #12
 800262c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8002630:	2204      	movs	r2, #4
 8002632:	eb0d 0102 	add.w	r1, sp, r2
 8002636:	4620      	mov	r0, r4
 8002638:	f7ff fe49 	bl	80022ce <_read>
 800263c:	2803      	cmp	r0, #3
 800263e:	ddee      	ble.n	800261e <_get_semihosting_exts+0x46>
 8002640:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8002644:	2b53      	cmp	r3, #83	; 0x53
 8002646:	d1ea      	bne.n	800261e <_get_semihosting_exts+0x46>
 8002648:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800264c:	2b48      	cmp	r3, #72	; 0x48
 800264e:	d1e6      	bne.n	800261e <_get_semihosting_exts+0x46>
 8002650:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8002654:	2b46      	cmp	r3, #70	; 0x46
 8002656:	d1e2      	bne.n	800261e <_get_semihosting_exts+0x46>
 8002658:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800265c:	2b42      	cmp	r3, #66	; 0x42
 800265e:	d1de      	bne.n	800261e <_get_semihosting_exts+0x46>
 8002660:	2201      	movs	r2, #1
 8002662:	4639      	mov	r1, r7
 8002664:	4620      	mov	r0, r4
 8002666:	f7ff fe4c 	bl	8002302 <_swilseek>
 800266a:	2800      	cmp	r0, #0
 800266c:	dbd7      	blt.n	800261e <_get_semihosting_exts+0x46>
 800266e:	462a      	mov	r2, r5
 8002670:	4631      	mov	r1, r6
 8002672:	4620      	mov	r0, r4
 8002674:	f7ff fe2b 	bl	80022ce <_read>
 8002678:	4605      	mov	r5, r0
 800267a:	4620      	mov	r0, r4
 800267c:	f7ff febc 	bl	80023f8 <_close>
 8002680:	4628      	mov	r0, r5
 8002682:	f7ff fe0f 	bl	80022a4 <checkerror>
 8002686:	4604      	mov	r4, r0
 8002688:	e7ce      	b.n	8002628 <_get_semihosting_exts+0x50>
 800268a:	bf00      	nop
 800268c:	0800292f 	.word	0x0800292f

08002690 <initialise_semihosting_exts>:
 8002690:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8002692:	4d0a      	ldr	r5, [pc, #40]	; (80026bc <initialise_semihosting_exts+0x2c>)
 8002694:	4c0a      	ldr	r4, [pc, #40]	; (80026c0 <initialise_semihosting_exts+0x30>)
 8002696:	2100      	movs	r1, #0
 8002698:	2201      	movs	r2, #1
 800269a:	a801      	add	r0, sp, #4
 800269c:	6029      	str	r1, [r5, #0]
 800269e:	6022      	str	r2, [r4, #0]
 80026a0:	f7ff ff9a 	bl	80025d8 <_get_semihosting_exts>
 80026a4:	2800      	cmp	r0, #0
 80026a6:	dd07      	ble.n	80026b8 <initialise_semihosting_exts+0x28>
 80026a8:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80026ac:	f003 0201 	and.w	r2, r3, #1
 80026b0:	f003 0302 	and.w	r3, r3, #2
 80026b4:	602a      	str	r2, [r5, #0]
 80026b6:	6023      	str	r3, [r4, #0]
 80026b8:	b003      	add	sp, #12
 80026ba:	bd30      	pop	{r4, r5, pc}
 80026bc:	20000068 	.word	0x20000068
 80026c0:	2000006c 	.word	0x2000006c

080026c4 <_has_ext_stdout_stderr>:
 80026c4:	b510      	push	{r4, lr}
 80026c6:	4c04      	ldr	r4, [pc, #16]	; (80026d8 <_has_ext_stdout_stderr+0x14>)
 80026c8:	6823      	ldr	r3, [r4, #0]
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	da01      	bge.n	80026d2 <_has_ext_stdout_stderr+0xe>
 80026ce:	f7ff ffdf 	bl	8002690 <initialise_semihosting_exts>
 80026d2:	6820      	ldr	r0, [r4, #0]
 80026d4:	bd10      	pop	{r4, pc}
 80026d6:	bf00      	nop
 80026d8:	2000006c 	.word	0x2000006c

080026dc <initialise_monitor_handles>:
 80026dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80026e0:	b085      	sub	sp, #20
 80026e2:	f8df 90a4 	ldr.w	r9, [pc, #164]	; 8002788 <initialise_monitor_handles+0xac>
 80026e6:	f8cd 9004 	str.w	r9, [sp, #4]
 80026ea:	2303      	movs	r3, #3
 80026ec:	2400      	movs	r4, #0
 80026ee:	9303      	str	r3, [sp, #12]
 80026f0:	af01      	add	r7, sp, #4
 80026f2:	9402      	str	r4, [sp, #8]
 80026f4:	2501      	movs	r5, #1
 80026f6:	4628      	mov	r0, r5
 80026f8:	4639      	mov	r1, r7
 80026fa:	beab      	bkpt	0x00ab
 80026fc:	4605      	mov	r5, r0
 80026fe:	f8df 808c 	ldr.w	r8, [pc, #140]	; 800278c <initialise_monitor_handles+0xb0>
 8002702:	4623      	mov	r3, r4
 8002704:	4c22      	ldr	r4, [pc, #136]	; (8002790 <initialise_monitor_handles+0xb4>)
 8002706:	f8c8 5000 	str.w	r5, [r8]
 800270a:	f04f 32ff 	mov.w	r2, #4294967295
 800270e:	f844 2033 	str.w	r2, [r4, r3, lsl #3]
 8002712:	3301      	adds	r3, #1
 8002714:	2b14      	cmp	r3, #20
 8002716:	d1fa      	bne.n	800270e <initialise_monitor_handles+0x32>
 8002718:	f7ff ffd4 	bl	80026c4 <_has_ext_stdout_stderr>
 800271c:	4d1d      	ldr	r5, [pc, #116]	; (8002794 <initialise_monitor_handles+0xb8>)
 800271e:	b1d0      	cbz	r0, 8002756 <initialise_monitor_handles+0x7a>
 8002720:	f04f 0a03 	mov.w	sl, #3
 8002724:	2304      	movs	r3, #4
 8002726:	f8cd 9004 	str.w	r9, [sp, #4]
 800272a:	2601      	movs	r6, #1
 800272c:	f8cd a00c 	str.w	sl, [sp, #12]
 8002730:	9302      	str	r3, [sp, #8]
 8002732:	4630      	mov	r0, r6
 8002734:	4639      	mov	r1, r7
 8002736:	beab      	bkpt	0x00ab
 8002738:	4683      	mov	fp, r0
 800273a:	4b17      	ldr	r3, [pc, #92]	; (8002798 <initialise_monitor_handles+0xbc>)
 800273c:	f8cd 9004 	str.w	r9, [sp, #4]
 8002740:	f8c3 b000 	str.w	fp, [r3]
 8002744:	2308      	movs	r3, #8
 8002746:	f8cd a00c 	str.w	sl, [sp, #12]
 800274a:	9302      	str	r3, [sp, #8]
 800274c:	4630      	mov	r0, r6
 800274e:	4639      	mov	r1, r7
 8002750:	beab      	bkpt	0x00ab
 8002752:	4606      	mov	r6, r0
 8002754:	602e      	str	r6, [r5, #0]
 8002756:	682b      	ldr	r3, [r5, #0]
 8002758:	3301      	adds	r3, #1
 800275a:	bf02      	ittt	eq
 800275c:	4b0e      	ldreq	r3, [pc, #56]	; (8002798 <initialise_monitor_handles+0xbc>)
 800275e:	681b      	ldreq	r3, [r3, #0]
 8002760:	602b      	streq	r3, [r5, #0]
 8002762:	2600      	movs	r6, #0
 8002764:	f8d8 3000 	ldr.w	r3, [r8]
 8002768:	6023      	str	r3, [r4, #0]
 800276a:	6066      	str	r6, [r4, #4]
 800276c:	f7ff ffaa 	bl	80026c4 <_has_ext_stdout_stderr>
 8002770:	b130      	cbz	r0, 8002780 <initialise_monitor_handles+0xa4>
 8002772:	4b09      	ldr	r3, [pc, #36]	; (8002798 <initialise_monitor_handles+0xbc>)
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	e9c4 3602 	strd	r3, r6, [r4, #8]
 800277a:	682b      	ldr	r3, [r5, #0]
 800277c:	e9c4 3604 	strd	r3, r6, [r4, #16]
 8002780:	b005      	add	sp, #20
 8002782:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002786:	bf00      	nop
 8002788:	08002945 	.word	0x08002945
 800278c:	200000a4 	.word	0x200000a4
 8002790:	200000ac 	.word	0x200000ac
 8002794:	200000a0 	.word	0x200000a0
 8002798:	200000a8 	.word	0x200000a8

0800279c <_isatty>:
 800279c:	b570      	push	{r4, r5, r6, lr}
 800279e:	f7ff fd59 	bl	8002254 <findslot>
 80027a2:	2509      	movs	r5, #9
 80027a4:	4604      	mov	r4, r0
 80027a6:	b920      	cbnz	r0, 80027b2 <_isatty+0x16>
 80027a8:	f000 f814 	bl	80027d4 <__errno>
 80027ac:	6005      	str	r5, [r0, #0]
 80027ae:	4620      	mov	r0, r4
 80027b0:	bd70      	pop	{r4, r5, r6, pc}
 80027b2:	4628      	mov	r0, r5
 80027b4:	4621      	mov	r1, r4
 80027b6:	beab      	bkpt	0x00ab
 80027b8:	4604      	mov	r4, r0
 80027ba:	2c01      	cmp	r4, #1
 80027bc:	d0f7      	beq.n	80027ae <_isatty+0x12>
 80027be:	f000 f809 	bl	80027d4 <__errno>
 80027c2:	2400      	movs	r4, #0
 80027c4:	4605      	mov	r5, r0
 80027c6:	2613      	movs	r6, #19
 80027c8:	4630      	mov	r0, r6
 80027ca:	4621      	mov	r1, r4
 80027cc:	beab      	bkpt	0x00ab
 80027ce:	4606      	mov	r6, r0
 80027d0:	602e      	str	r6, [r5, #0]
 80027d2:	e7ec      	b.n	80027ae <_isatty+0x12>

080027d4 <__errno>:
 80027d4:	4b01      	ldr	r3, [pc, #4]	; (80027dc <__errno+0x8>)
 80027d6:	6818      	ldr	r0, [r3, #0]
 80027d8:	4770      	bx	lr
 80027da:	bf00      	nop
 80027dc:	20000000 	.word	0x20000000

080027e0 <_init>:
 80027e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80027e2:	bf00      	nop
 80027e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80027e6:	bc08      	pop	{r3}
 80027e8:	469e      	mov	lr, r3
 80027ea:	4770      	bx	lr

080027ec <_fini>:
 80027ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80027ee:	bf00      	nop
 80027f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80027f2:	bc08      	pop	{r3}
 80027f4:	469e      	mov	lr, r3
 80027f6:	4770      	bx	lr

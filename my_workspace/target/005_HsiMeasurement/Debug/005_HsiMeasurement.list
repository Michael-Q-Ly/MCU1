
005_HsiMeasurement.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000178  080001ac  080001ac  000101ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000324  0800032c  0001032c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000324  08000324  0001032c  2**0
                  CONTENTS
  4 .ARM          00000000  08000324  08000324  0001032c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000324  0800032c  0001032c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000324  08000324  00010324  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000328  08000328  00010328  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  0001032c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0001032c  2**0
                  CONTENTS
 10 .bss          0000001c  20000000  20000000  00020000  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000001c  2000001c  00020000  2**0
                  ALLOC
 12 .ARM.attributes 0000002a  00000000  00000000  0001032c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00000107  00000000  00000000  00010356  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000086  00000000  00000000  0001045d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000048  00000000  00000000  000104e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000030  00000000  00000000  00010530  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00000f9a  00000000  00000000  00010560  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00000426  00000000  00000000  000114fa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00003d1e  00000000  00000000  00011920  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  0001563e  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000058  00000000  00000000  00015694  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	; (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	20000000 	.word	0x20000000
 80001c8:	00000000 	.word	0x00000000
 80001cc:	0800030c 	.word	0x0800030c

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	; (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	; (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	; (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	20000004 	.word	0x20000004
 80001e8:	0800030c 	.word	0x0800030c

080001ec <main>:
#define BIT_1                           (1UL << 0)
#define BIT_8                           (1UL << 8)
#define BIT_25                          (1UL << 25)
#define BIT_26                          (1UL << 26)

int main(void) {
 80001ec:	b480      	push	{r7}
 80001ee:	b085      	sub	sp, #20
 80001f0:	af00      	add	r7, sp, #0
    uint32_t *pRccCfgrReg = (uint32_t*) RCC_CFGR_REG_ADDR ;
 80001f2:	4b1b      	ldr	r3, [pc, #108]	; (8000260 <main+0x74>)
 80001f4:	60fb      	str	r3, [r7, #12]

    // 1. Configure the RCC_CFGR MCO1 bit fields to select HSI as clock source
    *pRccCfgrReg &= ~(0x3 << 21) ;                                                          // Clear 21st and 22nd bit positions
 80001f6:	68fb      	ldr	r3, [r7, #12]
 80001f8:	681b      	ldr	r3, [r3, #0]
 80001fa:	f423 02c0 	bic.w	r2, r3, #6291456	; 0x600000
 80001fe:	68fb      	ldr	r3, [r7, #12]
 8000200:	601a      	str	r2, [r3, #0]
    // Configure MCO1 precaler to divide by 4 ; ref manual is wrong - should be 26:24 rather than 24:26
    *pRccCfgrReg |= BIT_26 ;
 8000202:	68fb      	ldr	r3, [r7, #12]
 8000204:	681b      	ldr	r3, [r3, #0]
 8000206:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 800020a:	68fb      	ldr	r3, [r7, #12]
 800020c:	601a      	str	r2, [r3, #0]
    *pRccCfgrReg |= BIT_25 ;
 800020e:	68fb      	ldr	r3, [r7, #12]
 8000210:	681b      	ldr	r3, [r3, #0]
 8000212:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8000216:	68fb      	ldr	r3, [r7, #12]
 8000218:	601a      	str	r2, [r3, #0]
     * because the code is related to GPIO configurations, which will be
     * covered in later sections of this course
     */
    
    // a) Enable the peripheral clock for GPIOA peripheral
    uint32_t *pRccAhb1Enr = (uint32_t*)(RCC_BASE_ADDR + RCC_AHB1_EN_REG_OFFSET) ;
 800021a:	4b12      	ldr	r3, [pc, #72]	; (8000264 <main+0x78>)
 800021c:	60bb      	str	r3, [r7, #8]
    *pRccAhb1Enr |= BIT_1 ;                                                                 // Enable GPIOA peripheral clock
 800021e:	68bb      	ldr	r3, [r7, #8]
 8000220:	681b      	ldr	r3, [r3, #0]
 8000222:	f043 0201 	orr.w	r2, r3, #1
 8000226:	68bb      	ldr	r3, [r7, #8]
 8000228:	601a      	str	r2, [r3, #0]

    // b) Configure the mode of GPIOA pin 8 as alternate function mode
    uint32_t *pGPIOAModeReg = (uint32_t*)(GPIOA_BASE_ADDR + GPIOA_PORT_MODE_REG_OFFSET) ;
 800022a:	4b0f      	ldr	r3, [pc, #60]	; (8000268 <main+0x7c>)
 800022c:	607b      	str	r3, [r7, #4]
    *pGPIOAModeReg &= ~(0x03 << 16) ;                                                       // Clear MODER8[1:0]
 800022e:	687b      	ldr	r3, [r7, #4]
 8000230:	681b      	ldr	r3, [r3, #0]
 8000232:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8000236:	687b      	ldr	r3, [r7, #4]
 8000238:	601a      	str	r2, [r3, #0]
    *pGPIOAModeReg |= (0x02 << 16) ;                                                        // Set MODER8[1:0] into Alternate Function Mode
 800023a:	687b      	ldr	r3, [r7, #4]
 800023c:	681b      	ldr	r3, [r3, #0]
 800023e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000242:	687b      	ldr	r3, [r7, #4]
 8000244:	601a      	str	r2, [r3, #0]

    // c) Configure the alternation function register to set the mode 0 for PA8
    uint32_t *pGPiOAAltFunHighReg = (uint32_t*)(GPIOA_BASE_ADDR + GPIOA_ALT_FUN_HIGH_REG_OFFSET) ;
 8000246:	4b09      	ldr	r3, [pc, #36]	; (800026c <main+0x80>)
 8000248:	603b      	str	r3, [r7, #0]
     * Important note:
     * Test this code only if you have the STM32F407 discover board. If you have any
     * other board, then you can skip the testing and come back to this section to modify the code
     * when you have a better understanding of GPIO settings
     */
    *pGPiOAAltFunHighReg *= ~(0xF << 0) ;                                                   // Clear all bits in AFRH8[3:0]
 800024a:	683b      	ldr	r3, [r7, #0]
 800024c:	681a      	ldr	r2, [r3, #0]
 800024e:	4613      	mov	r3, r2
 8000250:	071b      	lsls	r3, r3, #28
 8000252:	1a9b      	subs	r3, r3, r2
 8000254:	011b      	lsls	r3, r3, #4
 8000256:	461a      	mov	r2, r3
 8000258:	683b      	ldr	r3, [r7, #0]
 800025a:	601a      	str	r2, [r3, #0]

    /* Loop forever */
	for(;;);
 800025c:	e7fe      	b.n	800025c <main+0x70>
 800025e:	bf00      	nop
 8000260:	40023808 	.word	0x40023808
 8000264:	40023830 	.word	0x40023830
 8000268:	40020000 	.word	0x40020000
 800026c:	40020024 	.word	0x40020024

08000270 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000270:	480d      	ldr	r0, [pc, #52]	; (80002a8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000272:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000274:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000278:	480c      	ldr	r0, [pc, #48]	; (80002ac <LoopForever+0x6>)
  ldr r1, =_edata
 800027a:	490d      	ldr	r1, [pc, #52]	; (80002b0 <LoopForever+0xa>)
  ldr r2, =_sidata
 800027c:	4a0d      	ldr	r2, [pc, #52]	; (80002b4 <LoopForever+0xe>)
  movs r3, #0
 800027e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000280:	e002      	b.n	8000288 <LoopCopyDataInit>

08000282 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000282:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000284:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000286:	3304      	adds	r3, #4

08000288 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000288:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800028a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800028c:	d3f9      	bcc.n	8000282 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800028e:	4a0a      	ldr	r2, [pc, #40]	; (80002b8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000290:	4c0a      	ldr	r4, [pc, #40]	; (80002bc <LoopForever+0x16>)
  movs r3, #0
 8000292:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000294:	e001      	b.n	800029a <LoopFillZerobss>

08000296 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000296:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000298:	3204      	adds	r2, #4

0800029a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800029a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800029c:	d3fb      	bcc.n	8000296 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800029e:	f000 f811 	bl	80002c4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80002a2:	f7ff ffa3 	bl	80001ec <main>

080002a6 <LoopForever>:

LoopForever:
    b LoopForever
 80002a6:	e7fe      	b.n	80002a6 <LoopForever>
  ldr   r0, =_estack
 80002a8:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 80002ac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80002b0:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 80002b4:	0800032c 	.word	0x0800032c
  ldr r2, =_sbss
 80002b8:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80002bc:	2000001c 	.word	0x2000001c

080002c0 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80002c0:	e7fe      	b.n	80002c0 <ADC_IRQHandler>
	...

080002c4 <__libc_init_array>:
 80002c4:	b570      	push	{r4, r5, r6, lr}
 80002c6:	4d0d      	ldr	r5, [pc, #52]	; (80002fc <__libc_init_array+0x38>)
 80002c8:	4c0d      	ldr	r4, [pc, #52]	; (8000300 <__libc_init_array+0x3c>)
 80002ca:	1b64      	subs	r4, r4, r5
 80002cc:	10a4      	asrs	r4, r4, #2
 80002ce:	2600      	movs	r6, #0
 80002d0:	42a6      	cmp	r6, r4
 80002d2:	d109      	bne.n	80002e8 <__libc_init_array+0x24>
 80002d4:	4d0b      	ldr	r5, [pc, #44]	; (8000304 <__libc_init_array+0x40>)
 80002d6:	4c0c      	ldr	r4, [pc, #48]	; (8000308 <__libc_init_array+0x44>)
 80002d8:	f000 f818 	bl	800030c <_init>
 80002dc:	1b64      	subs	r4, r4, r5
 80002de:	10a4      	asrs	r4, r4, #2
 80002e0:	2600      	movs	r6, #0
 80002e2:	42a6      	cmp	r6, r4
 80002e4:	d105      	bne.n	80002f2 <__libc_init_array+0x2e>
 80002e6:	bd70      	pop	{r4, r5, r6, pc}
 80002e8:	f855 3b04 	ldr.w	r3, [r5], #4
 80002ec:	4798      	blx	r3
 80002ee:	3601      	adds	r6, #1
 80002f0:	e7ee      	b.n	80002d0 <__libc_init_array+0xc>
 80002f2:	f855 3b04 	ldr.w	r3, [r5], #4
 80002f6:	4798      	blx	r3
 80002f8:	3601      	adds	r6, #1
 80002fa:	e7f2      	b.n	80002e2 <__libc_init_array+0x1e>
 80002fc:	08000324 	.word	0x08000324
 8000300:	08000324 	.word	0x08000324
 8000304:	08000324 	.word	0x08000324
 8000308:	08000328 	.word	0x08000328

0800030c <_init>:
 800030c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800030e:	bf00      	nop
 8000310:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000312:	bc08      	pop	{r3}
 8000314:	469e      	mov	lr, r3
 8000316:	4770      	bx	lr

08000318 <_fini>:
 8000318:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800031a:	bf00      	nop
 800031c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800031e:	bc08      	pop	{r3}
 8000320:	469e      	mov	lr, r3
 8000322:	4770      	bx	lr
